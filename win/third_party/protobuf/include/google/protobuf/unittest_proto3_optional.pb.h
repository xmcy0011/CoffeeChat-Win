// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_proto3_optional.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
namespace protobuf_unittest {
class TestProto3Optional;
class TestProto3OptionalDefaultTypeInternal;
extern TestProto3OptionalDefaultTypeInternal _TestProto3Optional_default_instance_;
class TestProto3Optional_NestedMessage;
class TestProto3Optional_NestedMessageDefaultTypeInternal;
extern TestProto3Optional_NestedMessageDefaultTypeInternal _TestProto3Optional_NestedMessage_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_unittest::TestProto3Optional* Arena::CreateMaybeMessage<::protobuf_unittest::TestProto3Optional>(Arena*);
template<> ::protobuf_unittest::TestProto3Optional_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestProto3Optional_NestedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_unittest {

enum TestProto3Optional_NestedEnum : int {
  TestProto3Optional_NestedEnum_UNSPECIFIED = 0,
  TestProto3Optional_NestedEnum_FOO = 1,
  TestProto3Optional_NestedEnum_BAR = 2,
  TestProto3Optional_NestedEnum_BAZ = 3,
  TestProto3Optional_NestedEnum_NEG = -1,
  TestProto3Optional_NestedEnum_TestProto3Optional_NestedEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TestProto3Optional_NestedEnum_TestProto3Optional_NestedEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TestProto3Optional_NestedEnum_IsValid(int value);
constexpr TestProto3Optional_NestedEnum TestProto3Optional_NestedEnum_NestedEnum_MIN = TestProto3Optional_NestedEnum_NEG;
constexpr TestProto3Optional_NestedEnum TestProto3Optional_NestedEnum_NestedEnum_MAX = TestProto3Optional_NestedEnum_BAZ;
constexpr int TestProto3Optional_NestedEnum_NestedEnum_ARRAYSIZE = TestProto3Optional_NestedEnum_NestedEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestProto3Optional_NestedEnum_descriptor();
template<typename T>
inline const std::string& TestProto3Optional_NestedEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestProto3Optional_NestedEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestProto3Optional_NestedEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestProto3Optional_NestedEnum_descriptor(), enum_t_value);
}
inline bool TestProto3Optional_NestedEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestProto3Optional_NestedEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestProto3Optional_NestedEnum>(
    TestProto3Optional_NestedEnum_descriptor(), name, value);
}
// ===================================================================

class TestProto3Optional_NestedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3Optional.NestedMessage) */ {
 public:
  inline TestProto3Optional_NestedMessage() : TestProto3Optional_NestedMessage(nullptr) {}
  virtual ~TestProto3Optional_NestedMessage();

  TestProto3Optional_NestedMessage(const TestProto3Optional_NestedMessage& from);
  TestProto3Optional_NestedMessage(TestProto3Optional_NestedMessage&& from) noexcept
    : TestProto3Optional_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestProto3Optional_NestedMessage& operator=(const TestProto3Optional_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3Optional_NestedMessage& operator=(TestProto3Optional_NestedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestProto3Optional_NestedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestProto3Optional_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestProto3Optional_NestedMessage*>(
               &_TestProto3Optional_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestProto3Optional_NestedMessage& a, TestProto3Optional_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestProto3Optional_NestedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3Optional_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestProto3Optional_NestedMessage* New() const final {
    return CreateMaybeMessage<TestProto3Optional_NestedMessage>(nullptr);
  }

  TestProto3Optional_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestProto3Optional_NestedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestProto3Optional_NestedMessage& from);
  void MergeFrom(const TestProto3Optional_NestedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestProto3Optional_NestedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestProto3Optional.NestedMessage";
  }
  protected:
  explicit TestProto3Optional_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto);
    return ::descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbFieldNumber = 1,
  };
  // int32 bb = 1;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  ::PROTOBUF_NAMESPACE_ID::int32 bb() const;
  void set_bb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bb() const;
  void _internal_set_bb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3Optional.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// -------------------------------------------------------------------

class TestProto3Optional PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestProto3Optional) */ {
 public:
  inline TestProto3Optional() : TestProto3Optional(nullptr) {}
  virtual ~TestProto3Optional();

  TestProto3Optional(const TestProto3Optional& from);
  TestProto3Optional(TestProto3Optional&& from) noexcept
    : TestProto3Optional() {
    *this = ::std::move(from);
  }

  inline TestProto3Optional& operator=(const TestProto3Optional& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto3Optional& operator=(TestProto3Optional&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestProto3Optional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestProto3Optional* internal_default_instance() {
    return reinterpret_cast<const TestProto3Optional*>(
               &_TestProto3Optional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestProto3Optional& a, TestProto3Optional& b) {
    a.Swap(&b);
  }
  inline void Swap(TestProto3Optional* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto3Optional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestProto3Optional* New() const final {
    return CreateMaybeMessage<TestProto3Optional>(nullptr);
  }

  TestProto3Optional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestProto3Optional>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestProto3Optional& from);
  void MergeFrom(const TestProto3Optional& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestProto3Optional* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestProto3Optional";
  }
  protected:
  explicit TestProto3Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto);
    return ::descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TestProto3Optional_NestedMessage NestedMessage;

  typedef TestProto3Optional_NestedEnum NestedEnum;
  static constexpr NestedEnum UNSPECIFIED =
    TestProto3Optional_NestedEnum_UNSPECIFIED;
  static constexpr NestedEnum FOO =
    TestProto3Optional_NestedEnum_FOO;
  static constexpr NestedEnum BAR =
    TestProto3Optional_NestedEnum_BAR;
  static constexpr NestedEnum BAZ =
    TestProto3Optional_NestedEnum_BAZ;
  static constexpr NestedEnum NEG =
    TestProto3Optional_NestedEnum_NEG;
  static inline bool NestedEnum_IsValid(int value) {
    return TestProto3Optional_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN =
    TestProto3Optional_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX =
    TestProto3Optional_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE =
    TestProto3Optional_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NestedEnum_descriptor() {
    return TestProto3Optional_NestedEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& NestedEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedEnum_Name.");
    return TestProto3Optional_NestedEnum_Name(enum_t_value);
  }
  static inline bool NestedEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NestedEnum* value) {
    return TestProto3Optional_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalStringFieldNumber = 14,
    kOptionalBytesFieldNumber = 15,
    kOptionalCordFieldNumber = 16,
    kOptionalNestedMessageFieldNumber = 18,
    kLazyNestedMessageFieldNumber = 19,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalSint64FieldNumber = 6,
    kOptionalSint32FieldNumber = 5,
    kOptionalFixed32FieldNumber = 7,
    kOptionalFixed64FieldNumber = 8,
    kOptionalSfixed64FieldNumber = 10,
    kOptionalSfixed32FieldNumber = 9,
    kOptionalFloatFieldNumber = 11,
    kOptionalDoubleFieldNumber = 12,
    kOptionalBoolFieldNumber = 13,
    kOptionalNestedEnumFieldNumber = 21,
    kSingularInt32FieldNumber = 22,
    kSingularInt64FieldNumber = 23,
  };
  // string optional_string = 14;
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  void set_optional_string(const std::string& value);
  void set_optional_string(std::string&& value);
  void set_optional_string(const char* value);
  void set_optional_string(const char* value, size_t size);
  std::string* mutable_optional_string();
  std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // bytes optional_bytes = 15;
  bool has_optional_bytes() const;
  private:
  bool _internal_has_optional_bytes() const;
  public:
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  void set_optional_bytes(const std::string& value);
  void set_optional_bytes(std::string&& value);
  void set_optional_bytes(const char* value);
  void set_optional_bytes(const void* value, size_t size);
  std::string* mutable_optional_bytes();
  std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);
  private:
  const std::string& _internal_optional_bytes() const;
  void _internal_set_optional_bytes(const std::string& value);
  std::string* _internal_mutable_optional_bytes();
  public:

  // string optional_cord = 16 [ctype = CORD];
  bool has_optional_cord() const;
  private:
  bool _internal_has_optional_cord() const;
  public:
  void clear_optional_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_cord() const;
  void set_optional_cord(const std::string& value);
  void set_optional_cord(std::string&& value);
  void set_optional_cord(const char* value);
  void set_optional_cord(const char* value, size_t size);
  std::string* mutable_optional_cord();
  std::string* release_optional_cord();
  void set_allocated_optional_cord(std::string* optional_cord);
  private:
  const std::string& _internal_optional_cord() const;
  void _internal_set_optional_cord(const std::string& value);
  std::string* _internal_mutable_optional_cord();
  public:
 public:

  // .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
  bool has_optional_nested_message() const;
  private:
  bool _internal_has_optional_nested_message() const;
  public:
  void clear_optional_nested_message();
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& optional_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestProto3Optional_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message);
  private:
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _internal_mutable_optional_nested_message();
  public:
  void unsafe_arena_set_allocated_optional_nested_message(
      ::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message);
  ::protobuf_unittest::TestProto3Optional_NestedMessage* unsafe_arena_release_optional_nested_message();

  // .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
  bool has_lazy_nested_message() const;
  private:
  bool _internal_has_lazy_nested_message() const;
  public:
  void clear_lazy_nested_message();
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& lazy_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* release_lazy_nested_message();
  ::protobuf_unittest::TestProto3Optional_NestedMessage* mutable_lazy_nested_message();
  void set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message);
  private:
  const ::protobuf_unittest::TestProto3Optional_NestedMessage& _internal_lazy_nested_message() const;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* _internal_mutable_lazy_nested_message();
  public:
  void unsafe_arena_set_allocated_lazy_nested_message(
      ::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message);
  ::protobuf_unittest::TestProto3Optional_NestedMessage* unsafe_arena_release_lazy_nested_message();

  // int64 optional_int64 = 2;
  bool has_optional_int64() const;
  private:
  bool _internal_has_optional_int64() const;
  public:
  void clear_optional_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_int64() const;
  void set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_optional_int64() const;
  void _internal_set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 optional_int32 = 1;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32() const;
  void set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_optional_int32() const;
  void _internal_set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 optional_uint32 = 3;
  bool has_optional_uint32() const;
  private:
  bool _internal_has_optional_uint32() const;
  public:
  void clear_optional_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_uint32() const;
  void set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_optional_uint32() const;
  void _internal_set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 optional_uint64 = 4;
  bool has_optional_uint64() const;
  private:
  bool _internal_has_optional_uint64() const;
  public:
  void clear_optional_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_uint64() const;
  void set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_optional_uint64() const;
  void _internal_set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 optional_sint64 = 6;
  bool has_optional_sint64() const;
  private:
  bool _internal_has_optional_sint64() const;
  public:
  void clear_optional_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sint64() const;
  void set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_optional_sint64() const;
  void _internal_set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 optional_sint32 = 5;
  bool has_optional_sint32() const;
  private:
  bool _internal_has_optional_sint32() const;
  public:
  void clear_optional_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sint32() const;
  void set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_optional_sint32() const;
  void _internal_set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // fixed32 optional_fixed32 = 7;
  bool has_optional_fixed32() const;
  private:
  bool _internal_has_optional_fixed32() const;
  public:
  void clear_optional_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_fixed32() const;
  void set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_optional_fixed32() const;
  void _internal_set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 optional_fixed64 = 8;
  bool has_optional_fixed64() const;
  private:
  bool _internal_has_optional_fixed64() const;
  public:
  void clear_optional_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_fixed64() const;
  void set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_optional_fixed64() const;
  void _internal_set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 optional_sfixed64 = 10;
  bool has_optional_sfixed64() const;
  private:
  bool _internal_has_optional_sfixed64() const;
  public:
  void clear_optional_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sfixed64() const;
  void set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_optional_sfixed64() const;
  void _internal_set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed32 optional_sfixed32 = 9;
  bool has_optional_sfixed32() const;
  private:
  bool _internal_has_optional_sfixed32() const;
  public:
  void clear_optional_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sfixed32() const;
  void set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_optional_sfixed32() const;
  void _internal_set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float optional_float = 11;
  bool has_optional_float() const;
  private:
  bool _internal_has_optional_float() const;
  public:
  void clear_optional_float();
  float optional_float() const;
  void set_optional_float(float value);
  private:
  float _internal_optional_float() const;
  void _internal_set_optional_float(float value);
  public:

  // double optional_double = 12;
  bool has_optional_double() const;
  private:
  bool _internal_has_optional_double() const;
  public:
  void clear_optional_double();
  double optional_double() const;
  void set_optional_double(double value);
  private:
  double _internal_optional_double() const;
  void _internal_set_optional_double(double value);
  public:

  // bool optional_bool = 13;
  bool has_optional_bool() const;
  private:
  bool _internal_has_optional_bool() const;
  public:
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);
  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);
  public:

  // .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
  bool has_optional_nested_enum() const;
  private:
  bool _internal_has_optional_nested_enum() const;
  public:
  void clear_optional_nested_enum();
  ::protobuf_unittest::TestProto3Optional_NestedEnum optional_nested_enum() const;
  void set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value);
  private:
  ::protobuf_unittest::TestProto3Optional_NestedEnum _internal_optional_nested_enum() const;
  void _internal_set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value);
  public:

  // int32 singular_int32 = 22;
  void clear_singular_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 singular_int32() const;
  void set_singular_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_singular_int32() const;
  void _internal_set_singular_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 singular_int64 = 23;
  void clear_singular_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 singular_int64() const;
  void set_singular_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_singular_int64() const;
  void _internal_set_singular_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestProto3Optional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_cord_;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message_;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_int64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_uint32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_uint64_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sfixed32_;
  float optional_float_;
  double optional_double_;
  bool optional_bool_;
  int optional_nested_enum_;
  ::PROTOBUF_NAMESPACE_ID::int32 singular_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 singular_int64_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestProto3Optional_NestedMessage

// int32 bb = 1;
inline bool TestProto3Optional_NestedMessage::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestProto3Optional_NestedMessage::has_bb() const {
  return _internal_has_bb();
}
inline void TestProto3Optional_NestedMessage::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional_NestedMessage::_internal_bb() const {
  return bb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.NestedMessage.bb)
  return _internal_bb();
}
inline void TestProto3Optional_NestedMessage::_internal_set_bb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  bb_ = value;
}
inline void TestProto3Optional_NestedMessage::set_bb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.NestedMessage.bb)
}

// -------------------------------------------------------------------

// TestProto3Optional

// int32 optional_int32 = 1;
inline bool TestProto3Optional::_internal_has_optional_int32() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestProto3Optional::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::_internal_optional_int32() const {
  return optional_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_int32)
  return _internal_optional_int32();
}
inline void TestProto3Optional::_internal_set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  optional_int32_ = value;
}
inline void TestProto3Optional::set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_int32)
}

// int64 optional_int64 = 2;
inline bool TestProto3Optional::_internal_has_optional_int64() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_int64() const {
  return _internal_has_optional_int64();
}
inline void TestProto3Optional::clear_optional_int64() {
  optional_int64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::_internal_optional_int64() const {
  return optional_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::optional_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_int64)
  return _internal_optional_int64();
}
inline void TestProto3Optional::_internal_set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  optional_int64_ = value;
}
inline void TestProto3Optional::set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_optional_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_int64)
}

// uint32 optional_uint32 = 3;
inline bool TestProto3Optional::_internal_has_optional_uint32() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_uint32() const {
  return _internal_has_optional_uint32();
}
inline void TestProto3Optional::clear_optional_uint32() {
  optional_uint32_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestProto3Optional::_internal_optional_uint32() const {
  return optional_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestProto3Optional::optional_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_uint32)
  return _internal_optional_uint32();
}
inline void TestProto3Optional::_internal_set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  optional_uint32_ = value;
}
inline void TestProto3Optional::set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_optional_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_uint32)
}

// uint64 optional_uint64 = 4;
inline bool TestProto3Optional::_internal_has_optional_uint64() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_uint64() const {
  return _internal_has_optional_uint64();
}
inline void TestProto3Optional::clear_optional_uint64() {
  optional_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestProto3Optional::_internal_optional_uint64() const {
  return optional_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestProto3Optional::optional_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_uint64)
  return _internal_optional_uint64();
}
inline void TestProto3Optional::_internal_set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  optional_uint64_ = value;
}
inline void TestProto3Optional::set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_optional_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_uint64)
}

// sint32 optional_sint32 = 5;
inline bool TestProto3Optional::_internal_has_optional_sint32() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_sint32() const {
  return _internal_has_optional_sint32();
}
inline void TestProto3Optional::clear_optional_sint32() {
  optional_sint32_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::_internal_optional_sint32() const {
  return optional_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::optional_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sint32)
  return _internal_optional_sint32();
}
inline void TestProto3Optional::_internal_set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  optional_sint32_ = value;
}
inline void TestProto3Optional::set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_optional_sint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sint32)
}

// sint64 optional_sint64 = 6;
inline bool TestProto3Optional::_internal_has_optional_sint64() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_sint64() const {
  return _internal_has_optional_sint64();
}
inline void TestProto3Optional::clear_optional_sint64() {
  optional_sint64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::_internal_optional_sint64() const {
  return optional_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::optional_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sint64)
  return _internal_optional_sint64();
}
inline void TestProto3Optional::_internal_set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  optional_sint64_ = value;
}
inline void TestProto3Optional::set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_optional_sint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sint64)
}

// fixed32 optional_fixed32 = 7;
inline bool TestProto3Optional::_internal_has_optional_fixed32() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_fixed32() const {
  return _internal_has_optional_fixed32();
}
inline void TestProto3Optional::clear_optional_fixed32() {
  optional_fixed32_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestProto3Optional::_internal_optional_fixed32() const {
  return optional_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestProto3Optional::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_fixed32)
  return _internal_optional_fixed32();
}
inline void TestProto3Optional::_internal_set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  optional_fixed32_ = value;
}
inline void TestProto3Optional::set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_optional_fixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_fixed32)
}

// fixed64 optional_fixed64 = 8;
inline bool TestProto3Optional::_internal_has_optional_fixed64() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_fixed64() const {
  return _internal_has_optional_fixed64();
}
inline void TestProto3Optional::clear_optional_fixed64() {
  optional_fixed64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestProto3Optional::_internal_optional_fixed64() const {
  return optional_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestProto3Optional::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_fixed64)
  return _internal_optional_fixed64();
}
inline void TestProto3Optional::_internal_set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  optional_fixed64_ = value;
}
inline void TestProto3Optional::set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_optional_fixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_fixed64)
}

// sfixed32 optional_sfixed32 = 9;
inline bool TestProto3Optional::_internal_has_optional_sfixed32() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_sfixed32() const {
  return _internal_has_optional_sfixed32();
}
inline void TestProto3Optional::clear_optional_sfixed32() {
  optional_sfixed32_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::_internal_optional_sfixed32() const {
  return optional_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sfixed32)
  return _internal_optional_sfixed32();
}
inline void TestProto3Optional::_internal_set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  optional_sfixed32_ = value;
}
inline void TestProto3Optional::set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_optional_sfixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sfixed32)
}

// sfixed64 optional_sfixed64 = 10;
inline bool TestProto3Optional::_internal_has_optional_sfixed64() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_sfixed64() const {
  return _internal_has_optional_sfixed64();
}
inline void TestProto3Optional::clear_optional_sfixed64() {
  optional_sfixed64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::_internal_optional_sfixed64() const {
  return optional_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_sfixed64)
  return _internal_optional_sfixed64();
}
inline void TestProto3Optional::_internal_set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  optional_sfixed64_ = value;
}
inline void TestProto3Optional::set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_optional_sfixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_sfixed64)
}

// float optional_float = 11;
inline bool TestProto3Optional::_internal_has_optional_float() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_float() const {
  return _internal_has_optional_float();
}
inline void TestProto3Optional::clear_optional_float() {
  optional_float_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TestProto3Optional::_internal_optional_float() const {
  return optional_float_;
}
inline float TestProto3Optional::optional_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_float)
  return _internal_optional_float();
}
inline void TestProto3Optional::_internal_set_optional_float(float value) {
  _has_bits_[0] |= 0x00008000u;
  optional_float_ = value;
}
inline void TestProto3Optional::set_optional_float(float value) {
  _internal_set_optional_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_float)
}

// double optional_double = 12;
inline bool TestProto3Optional::_internal_has_optional_double() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_double() const {
  return _internal_has_optional_double();
}
inline void TestProto3Optional::clear_optional_double() {
  optional_double_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double TestProto3Optional::_internal_optional_double() const {
  return optional_double_;
}
inline double TestProto3Optional::optional_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_double)
  return _internal_optional_double();
}
inline void TestProto3Optional::_internal_set_optional_double(double value) {
  _has_bits_[0] |= 0x00010000u;
  optional_double_ = value;
}
inline void TestProto3Optional::set_optional_double(double value) {
  _internal_set_optional_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_double)
}

// bool optional_bool = 13;
inline bool TestProto3Optional::_internal_has_optional_bool() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_bool() const {
  return _internal_has_optional_bool();
}
inline void TestProto3Optional::clear_optional_bool() {
  optional_bool_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool TestProto3Optional::_internal_optional_bool() const {
  return optional_bool_;
}
inline bool TestProto3Optional::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_bool)
  return _internal_optional_bool();
}
inline void TestProto3Optional::_internal_set_optional_bool(bool value) {
  _has_bits_[0] |= 0x00020000u;
  optional_bool_ = value;
}
inline void TestProto3Optional::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_bool)
}

// string optional_string = 14;
inline bool TestProto3Optional::_internal_has_optional_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void TestProto3Optional::clear_optional_string() {
  optional_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestProto3Optional::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_string)
  return _internal_optional_string();
}
inline void TestProto3Optional::set_optional_string(const std::string& value) {
  _internal_set_optional_string(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_string)
}
inline std::string* TestProto3Optional::mutable_optional_string() {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_string)
  return _internal_mutable_optional_string();
}
inline const std::string& TestProto3Optional::_internal_optional_string() const {
  return optional_string_.Get();
}
inline void TestProto3Optional::_internal_set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestProto3Optional::set_optional_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestProto3Optional.optional_string)
}
inline void TestProto3Optional::set_optional_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestProto3Optional.optional_string)
}
inline void TestProto3Optional::set_optional_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestProto3Optional.optional_string)
}
inline std::string* TestProto3Optional::_internal_mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  return optional_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestProto3Optional::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return optional_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestProto3Optional::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_string)
}

// bytes optional_bytes = 15;
inline bool TestProto3Optional::_internal_has_optional_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_bytes() const {
  return _internal_has_optional_bytes();
}
inline void TestProto3Optional::clear_optional_bytes() {
  optional_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestProto3Optional::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_bytes)
  return _internal_optional_bytes();
}
inline void TestProto3Optional::set_optional_bytes(const std::string& value) {
  _internal_set_optional_bytes(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_bytes)
}
inline std::string* TestProto3Optional::mutable_optional_bytes() {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_bytes)
  return _internal_mutable_optional_bytes();
}
inline const std::string& TestProto3Optional::_internal_optional_bytes() const {
  return optional_bytes_.Get();
}
inline void TestProto3Optional::_internal_set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestProto3Optional::set_optional_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestProto3Optional.optional_bytes)
}
inline void TestProto3Optional::set_optional_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestProto3Optional.optional_bytes)
}
inline void TestProto3Optional::set_optional_bytes(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestProto3Optional.optional_bytes)
}
inline std::string* TestProto3Optional::_internal_mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return optional_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestProto3Optional::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_bytes)
  if (!_internal_has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return optional_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestProto3Optional::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_bytes)
}

// string optional_cord = 16 [ctype = CORD];
inline bool TestProto3Optional::_internal_has_optional_cord() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_cord() const {
  return _internal_has_optional_cord();
}
inline void TestProto3Optional::clear_optional_cord() {
  optional_cord_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestProto3Optional::optional_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_cord)
  return _internal_optional_cord();
}
inline void TestProto3Optional::set_optional_cord(const std::string& value) {
  _internal_set_optional_cord(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_cord)
}
inline std::string* TestProto3Optional::mutable_optional_cord() {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_cord)
  return _internal_mutable_optional_cord();
}
inline const std::string& TestProto3Optional::_internal_optional_cord() const {
  return optional_cord_.Get();
}
inline void TestProto3Optional::_internal_set_optional_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestProto3Optional::set_optional_cord(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_cord_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestProto3Optional.optional_cord)
}
inline void TestProto3Optional::set_optional_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestProto3Optional.optional_cord)
}
inline void TestProto3Optional::set_optional_cord(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestProto3Optional.optional_cord)
}
inline std::string* TestProto3Optional::_internal_mutable_optional_cord() {
  _has_bits_[0] |= 0x00000004u;
  return optional_cord_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestProto3Optional::release_optional_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_cord)
  if (!_internal_has_optional_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return optional_cord_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestProto3Optional::set_allocated_optional_cord(std::string* optional_cord) {
  if (optional_cord != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_cord_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_cord,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_cord)
}

// .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
inline bool TestProto3Optional::_internal_has_optional_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || optional_nested_message_ != nullptr);
  return value;
}
inline bool TestProto3Optional::has_optional_nested_message() const {
  return _internal_has_optional_nested_message();
}
inline void TestProto3Optional::clear_optional_nested_message() {
  if (GetArena() == nullptr && optional_nested_message_ != nullptr) {
    delete optional_nested_message_;
  }
  optional_nested_message_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::_internal_optional_nested_message() const {
  const ::protobuf_unittest::TestProto3Optional_NestedMessage* p = optional_nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestProto3Optional_NestedMessage*>(
      &::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestProto3Optional::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_nested_message_);
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3Optional.optional_nested_message)
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::release_optional_nested_message() {
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::unsafe_arena_release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.optional_nested_message)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::_internal_mutable_optional_nested_message() {
  _has_bits_[0] |= 0x00000008u;
  if (optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestProto3Optional_NestedMessage>(GetArena());
    optional_nested_message_ = p;
  }
  return optional_nested_message_;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::mutable_optional_nested_message() {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.optional_nested_message)
  return _internal_mutable_optional_nested_message();
}
inline void TestProto3Optional::set_allocated_optional_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(optional_nested_message);
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.optional_nested_message)
}

// .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
inline bool TestProto3Optional::_internal_has_lazy_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lazy_nested_message_ != nullptr);
  return value;
}
inline bool TestProto3Optional::has_lazy_nested_message() const {
  return _internal_has_lazy_nested_message();
}
inline void TestProto3Optional::clear_lazy_nested_message() {
  if (GetArena() == nullptr && lazy_nested_message_ != nullptr) {
    delete lazy_nested_message_;
  }
  lazy_nested_message_ = nullptr;
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::_internal_lazy_nested_message() const {
  const ::protobuf_unittest::TestProto3Optional_NestedMessage* p = lazy_nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestProto3Optional_NestedMessage*>(
      &::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestProto3Optional_NestedMessage& TestProto3Optional::lazy_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.lazy_nested_message)
  return _internal_lazy_nested_message();
}
inline void TestProto3Optional::unsafe_arena_set_allocated_lazy_nested_message(
    ::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lazy_nested_message_);
  }
  lazy_nested_message_ = lazy_nested_message;
  if (lazy_nested_message) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestProto3Optional.lazy_nested_message)
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::release_lazy_nested_message() {
  _has_bits_[0] &= ~0x00000010u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = lazy_nested_message_;
  lazy_nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::unsafe_arena_release_lazy_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestProto3Optional.lazy_nested_message)
  _has_bits_[0] &= ~0x00000010u;
  ::protobuf_unittest::TestProto3Optional_NestedMessage* temp = lazy_nested_message_;
  lazy_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::_internal_mutable_lazy_nested_message() {
  _has_bits_[0] |= 0x00000010u;
  if (lazy_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestProto3Optional_NestedMessage>(GetArena());
    lazy_nested_message_ = p;
  }
  return lazy_nested_message_;
}
inline ::protobuf_unittest::TestProto3Optional_NestedMessage* TestProto3Optional::mutable_lazy_nested_message() {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestProto3Optional.lazy_nested_message)
  return _internal_mutable_lazy_nested_message();
}
inline void TestProto3Optional::set_allocated_lazy_nested_message(::protobuf_unittest::TestProto3Optional_NestedMessage* lazy_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lazy_nested_message_;
  }
  if (lazy_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lazy_nested_message);
    if (message_arena != submessage_arena) {
      lazy_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lazy_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lazy_nested_message_ = lazy_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestProto3Optional.lazy_nested_message)
}

// .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
inline bool TestProto3Optional::_internal_has_optional_nested_enum() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestProto3Optional::has_optional_nested_enum() const {
  return _internal_has_optional_nested_enum();
}
inline void TestProto3Optional::clear_optional_nested_enum() {
  optional_nested_enum_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::protobuf_unittest::TestProto3Optional_NestedEnum TestProto3Optional::_internal_optional_nested_enum() const {
  return static_cast< ::protobuf_unittest::TestProto3Optional_NestedEnum >(optional_nested_enum_);
}
inline ::protobuf_unittest::TestProto3Optional_NestedEnum TestProto3Optional::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.optional_nested_enum)
  return _internal_optional_nested_enum();
}
inline void TestProto3Optional::_internal_set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value) {
  _has_bits_[0] |= 0x00040000u;
  optional_nested_enum_ = value;
}
inline void TestProto3Optional::set_optional_nested_enum(::protobuf_unittest::TestProto3Optional_NestedEnum value) {
  _internal_set_optional_nested_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.optional_nested_enum)
}

// int32 singular_int32 = 22;
inline void TestProto3Optional::clear_singular_int32() {
  singular_int32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::_internal_singular_int32() const {
  return singular_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto3Optional::singular_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.singular_int32)
  return _internal_singular_int32();
}
inline void TestProto3Optional::_internal_set_singular_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  singular_int32_ = value;
}
inline void TestProto3Optional::set_singular_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_singular_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.singular_int32)
}

// int64 singular_int64 = 23;
inline void TestProto3Optional::clear_singular_int64() {
  singular_int64_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::_internal_singular_int64() const {
  return singular_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestProto3Optional::singular_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestProto3Optional.singular_int64)
  return _internal_singular_int64();
}
inline void TestProto3Optional::_internal_set_singular_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  singular_int64_ = value;
}
inline void TestProto3Optional::set_singular_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_singular_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestProto3Optional.singular_int64)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf_unittest::TestProto3Optional_NestedEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestProto3Optional_NestedEnum>() {
  return ::protobuf_unittest::TestProto3Optional_NestedEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto
