// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/default_value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
namespace proto_util_converter {
namespace testing {
class AnyData;
class AnyDataDefaultTypeInternal;
extern AnyDataDefaultTypeInternal _AnyData_default_instance_;
class AnyData_MapDataEntry_DoNotUse;
class AnyData_MapDataEntry_DoNotUseDefaultTypeInternal;
extern AnyData_MapDataEntry_DoNotUseDefaultTypeInternal _AnyData_MapDataEntry_DoNotUse_default_instance_;
class AnyMessage;
class AnyMessageDefaultTypeInternal;
extern AnyMessageDefaultTypeInternal _AnyMessage_default_instance_;
class DefaultValueTestCases;
class DefaultValueTestCasesDefaultTypeInternal;
extern DefaultValueTestCasesDefaultTypeInternal _DefaultValueTestCases_default_instance_;
class DoubleMessage;
class DoubleMessageDefaultTypeInternal;
extern DoubleMessageDefaultTypeInternal _DoubleMessage_default_instance_;
class DoubleValueMessage;
class DoubleValueMessageDefaultTypeInternal;
extern DoubleValueMessageDefaultTypeInternal _DoubleValueMessage_default_instance_;
class IntToStringMap;
class IntToStringMapDefaultTypeInternal;
extern IntToStringMapDefaultTypeInternal _IntToStringMap_default_instance_;
class IntToStringMap_MapEntry_DoNotUse;
class IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal;
extern IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal _IntToStringMap_MapEntry_DoNotUse_default_instance_;
class ListValueMessage;
class ListValueMessageDefaultTypeInternal;
extern ListValueMessageDefaultTypeInternal _ListValueMessage_default_instance_;
class MessageMap;
class MessageMapDefaultTypeInternal;
extern MessageMapDefaultTypeInternal _MessageMap_default_instance_;
class MessageMap_M;
class MessageMap_MDefaultTypeInternal;
extern MessageMap_MDefaultTypeInternal _MessageMap_M_default_instance_;
class MessageMap_MapEntry_DoNotUse;
class MessageMap_MapEntry_DoNotUseDefaultTypeInternal;
extern MessageMap_MapEntry_DoNotUseDefaultTypeInternal _MessageMap_MapEntry_DoNotUse_default_instance_;
class MixedMap;
class MixedMapDefaultTypeInternal;
extern MixedMapDefaultTypeInternal _MixedMap_default_instance_;
class MixedMap2;
class MixedMap2DefaultTypeInternal;
extern MixedMap2DefaultTypeInternal _MixedMap2_default_instance_;
class MixedMap2_MapEntry_DoNotUse;
class MixedMap2_MapEntry_DoNotUseDefaultTypeInternal;
extern MixedMap2_MapEntry_DoNotUseDefaultTypeInternal _MixedMap2_MapEntry_DoNotUse_default_instance_;
class MixedMap_MapEntry_DoNotUse;
class MixedMap_MapEntry_DoNotUseDefaultTypeInternal;
extern MixedMap_MapEntry_DoNotUseDefaultTypeInternal _MixedMap_MapEntry_DoNotUse_default_instance_;
class RequestMessage;
class RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class StringtoIntMap;
class StringtoIntMapDefaultTypeInternal;
extern StringtoIntMapDefaultTypeInternal _StringtoIntMap_default_instance_;
class StringtoIntMap_MapEntry_DoNotUse;
class StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal;
extern StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal _StringtoIntMap_MapEntry_DoNotUse_default_instance_;
class StructMessage;
class StructMessageDefaultTypeInternal;
extern StructMessageDefaultTypeInternal _StructMessage_default_instance_;
class ValueMessage;
class ValueMessageDefaultTypeInternal;
extern ValueMessageDefaultTypeInternal _ValueMessage_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::AnyData* Arena::CreateMaybeMessage<::proto_util_converter::testing::AnyData>(Arena*);
template<> ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::AnyMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(Arena*);
template<> ::proto_util_converter::testing::DefaultValueTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::DefaultValueTestCases>(Arena*);
template<> ::proto_util_converter::testing::DoubleMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(Arena*);
template<> ::proto_util_converter::testing::DoubleValueMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::DoubleValueMessage>(Arena*);
template<> ::proto_util_converter::testing::IntToStringMap* Arena::CreateMaybeMessage<::proto_util_converter::testing::IntToStringMap>(Arena*);
template<> ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::ListValueMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::ListValueMessage>(Arena*);
template<> ::proto_util_converter::testing::MessageMap* Arena::CreateMaybeMessage<::proto_util_converter::testing::MessageMap>(Arena*);
template<> ::proto_util_converter::testing::MessageMap_M* Arena::CreateMaybeMessage<::proto_util_converter::testing::MessageMap_M>(Arena*);
template<> ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MixedMap* Arena::CreateMaybeMessage<::proto_util_converter::testing::MixedMap>(Arena*);
template<> ::proto_util_converter::testing::MixedMap2* Arena::CreateMaybeMessage<::proto_util_converter::testing::MixedMap2>(Arena*);
template<> ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::RequestMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::RequestMessage>(Arena*);
template<> ::proto_util_converter::testing::StringtoIntMap* Arena::CreateMaybeMessage<::proto_util_converter::testing::StringtoIntMap>(Arena*);
template<> ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::StructMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(Arena*);
template<> ::proto_util_converter::testing::ValueMessage* Arena::CreateMaybeMessage<::proto_util_converter::testing::ValueMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

enum MixedMap2_E : int {
  MixedMap2_E_E0 = 0,
  MixedMap2_E_E1 = 1,
  MixedMap2_E_E2 = 2,
  MixedMap2_E_E3 = 3,
  MixedMap2_E_MixedMap2_E_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MixedMap2_E_MixedMap2_E_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MixedMap2_E_IsValid(int value);
constexpr MixedMap2_E MixedMap2_E_E_MIN = MixedMap2_E_E0;
constexpr MixedMap2_E MixedMap2_E_E_MAX = MixedMap2_E_E3;
constexpr int MixedMap2_E_E_ARRAYSIZE = MixedMap2_E_E_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedMap2_E_descriptor();
template<typename T>
inline const std::string& MixedMap2_E_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MixedMap2_E>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MixedMap2_E_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MixedMap2_E_descriptor(), enum_t_value);
}
inline bool MixedMap2_E_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MixedMap2_E* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MixedMap2_E>(
    MixedMap2_E_descriptor(), name, value);
}
// ===================================================================

class DefaultValueTestCases PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DefaultValueTestCases) */ {
 public:
  inline DefaultValueTestCases() : DefaultValueTestCases(nullptr) {}
  virtual ~DefaultValueTestCases();

  DefaultValueTestCases(const DefaultValueTestCases& from);
  DefaultValueTestCases(DefaultValueTestCases&& from) noexcept
    : DefaultValueTestCases() {
    *this = ::std::move(from);
  }

  inline DefaultValueTestCases& operator=(const DefaultValueTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultValueTestCases& operator=(DefaultValueTestCases&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultValueTestCases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultValueTestCases* internal_default_instance() {
    return reinterpret_cast<const DefaultValueTestCases*>(
               &_DefaultValueTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DefaultValueTestCases& a, DefaultValueTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultValueTestCases* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultValueTestCases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultValueTestCases* New() const final {
    return CreateMaybeMessage<DefaultValueTestCases>(nullptr);
  }

  DefaultValueTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultValueTestCases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultValueTestCases& from);
  void MergeFrom(const DefaultValueTestCases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultValueTestCases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DefaultValueTestCases";
  }
  protected:
  explicit DefaultValueTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyDoubleFieldNumber = 1,
    kDoubleWithDefaultValueFieldNumber = 2,
    kDoubleWithNondefaultValueFieldNumber = 3,
    kRepeatedDoubleFieldNumber = 4,
    kNestedMessageFieldNumber = 5,
    kRepeatedNestedMessageFieldNumber = 6,
    kDoubleMessageWithOneofFieldNumber = 7,
    kEmptyStructFieldNumber = 201,
    kEmptyStruct2FieldNumber = 202,
    kStructWithNullValueFieldNumber = 203,
    kStructWithValuesFieldNumber = 204,
    kStructWithNestedStructFieldNumber = 205,
    kStructWithNestedListFieldNumber = 206,
    kStructWithListOfNullsFieldNumber = 207,
    kStructWithListOfListsFieldNumber = 208,
    kStructWithListOfStructsFieldNumber = 209,
    kTopLevelStructFieldNumber = 210,
    kValueWrapperSimpleFieldNumber = 212,
    kValueWrapperWithStructFieldNumber = 213,
    kValueWrapperWithListFieldNumber = 214,
    kListValueWrapperFieldNumber = 215,
    kTopLevelValueSimpleFieldNumber = 216,
    kTopLevelValueWithStructFieldNumber = 217,
    kTopLevelValueWithListFieldNumber = 218,
    kTopLevelListvalueFieldNumber = 219,
    kEmptyAnyFieldNumber = 301,
    kTypeOnlyAnyFieldNumber = 302,
    kRecursiveAnyFieldNumber = 303,
    kAnyWithMessageValueFieldNumber = 304,
    kAnyWithNestedMessageFieldNumber = 305,
    kAnyWithMessageContainingMapFieldNumber = 306,
    kAnyWithMessageContainingStructFieldNumber = 307,
    kTopLevelAnyFieldNumber = 308,
    kEmptyMapFieldNumber = 401,
    kStringToIntFieldNumber = 402,
    kIntToStringFieldNumber = 403,
    kMixed1FieldNumber = 404,
    kMixed2FieldNumber = 405,
    kEmptyMixed2FieldNumber = 406,
    kMapOfObjectsFieldNumber = 407,
    kMixedEmptyFieldNumber = 408,
    kMessageMapEmptyFieldNumber = 409,
    kDoubleValueFieldNumber = 501,
    kDoubleValueDefaultFieldNumber = 502,
  };
  // .proto_util_converter.testing.DoubleMessage empty_double = 1;
  bool has_empty_double() const;
  private:
  bool _internal_has_empty_double() const;
  public:
  void clear_empty_double();
  const ::proto_util_converter::testing::DoubleMessage& empty_double() const;
  ::proto_util_converter::testing::DoubleMessage* release_empty_double();
  ::proto_util_converter::testing::DoubleMessage* mutable_empty_double();
  void set_allocated_empty_double(::proto_util_converter::testing::DoubleMessage* empty_double);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_empty_double() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_empty_double();
  public:
  void unsafe_arena_set_allocated_empty_double(
      ::proto_util_converter::testing::DoubleMessage* empty_double);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_empty_double();

  // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
  bool has_double_with_default_value() const;
  private:
  bool _internal_has_double_with_default_value() const;
  public:
  void clear_double_with_default_value();
  const ::proto_util_converter::testing::DoubleMessage& double_with_default_value() const;
  ::proto_util_converter::testing::DoubleMessage* release_double_with_default_value();
  ::proto_util_converter::testing::DoubleMessage* mutable_double_with_default_value();
  void set_allocated_double_with_default_value(::proto_util_converter::testing::DoubleMessage* double_with_default_value);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_double_with_default_value() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_double_with_default_value();
  public:
  void unsafe_arena_set_allocated_double_with_default_value(
      ::proto_util_converter::testing::DoubleMessage* double_with_default_value);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_double_with_default_value();

  // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
  bool has_double_with_nondefault_value() const;
  private:
  bool _internal_has_double_with_nondefault_value() const;
  public:
  void clear_double_with_nondefault_value();
  const ::proto_util_converter::testing::DoubleMessage& double_with_nondefault_value() const;
  ::proto_util_converter::testing::DoubleMessage* release_double_with_nondefault_value();
  ::proto_util_converter::testing::DoubleMessage* mutable_double_with_nondefault_value();
  void set_allocated_double_with_nondefault_value(::proto_util_converter::testing::DoubleMessage* double_with_nondefault_value);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_double_with_nondefault_value() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_double_with_nondefault_value();
  public:
  void unsafe_arena_set_allocated_double_with_nondefault_value(
      ::proto_util_converter::testing::DoubleMessage* double_with_nondefault_value);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_double_with_nondefault_value();

  // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
  bool has_repeated_double() const;
  private:
  bool _internal_has_repeated_double() const;
  public:
  void clear_repeated_double();
  const ::proto_util_converter::testing::DoubleMessage& repeated_double() const;
  ::proto_util_converter::testing::DoubleMessage* release_repeated_double();
  ::proto_util_converter::testing::DoubleMessage* mutable_repeated_double();
  void set_allocated_repeated_double(::proto_util_converter::testing::DoubleMessage* repeated_double);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_repeated_double() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_repeated_double();
  public:
  void unsafe_arena_set_allocated_repeated_double(
      ::proto_util_converter::testing::DoubleMessage* repeated_double);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_repeated_double();

  // .proto_util_converter.testing.DoubleMessage nested_message = 5;
  bool has_nested_message() const;
  private:
  bool _internal_has_nested_message() const;
  public:
  void clear_nested_message();
  const ::proto_util_converter::testing::DoubleMessage& nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* release_nested_message();
  ::proto_util_converter::testing::DoubleMessage* mutable_nested_message();
  void set_allocated_nested_message(::proto_util_converter::testing::DoubleMessage* nested_message);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_nested_message();
  public:
  void unsafe_arena_set_allocated_nested_message(
      ::proto_util_converter::testing::DoubleMessage* nested_message);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_nested_message();

  // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
  bool has_repeated_nested_message() const;
  private:
  bool _internal_has_repeated_nested_message() const;
  public:
  void clear_repeated_nested_message();
  const ::proto_util_converter::testing::DoubleMessage& repeated_nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* release_repeated_nested_message();
  ::proto_util_converter::testing::DoubleMessage* mutable_repeated_nested_message();
  void set_allocated_repeated_nested_message(::proto_util_converter::testing::DoubleMessage* repeated_nested_message);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_repeated_nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_repeated_nested_message();
  public:
  void unsafe_arena_set_allocated_repeated_nested_message(
      ::proto_util_converter::testing::DoubleMessage* repeated_nested_message);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_repeated_nested_message();

  // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
  bool has_double_message_with_oneof() const;
  private:
  bool _internal_has_double_message_with_oneof() const;
  public:
  void clear_double_message_with_oneof();
  const ::proto_util_converter::testing::DoubleMessage& double_message_with_oneof() const;
  ::proto_util_converter::testing::DoubleMessage* release_double_message_with_oneof();
  ::proto_util_converter::testing::DoubleMessage* mutable_double_message_with_oneof();
  void set_allocated_double_message_with_oneof(::proto_util_converter::testing::DoubleMessage* double_message_with_oneof);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_double_message_with_oneof() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_double_message_with_oneof();
  public:
  void unsafe_arena_set_allocated_double_message_with_oneof(
      ::proto_util_converter::testing::DoubleMessage* double_message_with_oneof);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_double_message_with_oneof();

  // .proto_util_converter.testing.StructMessage empty_struct = 201;
  bool has_empty_struct() const;
  private:
  bool _internal_has_empty_struct() const;
  public:
  void clear_empty_struct();
  const ::proto_util_converter::testing::StructMessage& empty_struct() const;
  ::proto_util_converter::testing::StructMessage* release_empty_struct();
  ::proto_util_converter::testing::StructMessage* mutable_empty_struct();
  void set_allocated_empty_struct(::proto_util_converter::testing::StructMessage* empty_struct);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_empty_struct() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_empty_struct();
  public:
  void unsafe_arena_set_allocated_empty_struct(
      ::proto_util_converter::testing::StructMessage* empty_struct);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_empty_struct();

  // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
  bool has_empty_struct2() const;
  private:
  bool _internal_has_empty_struct2() const;
  public:
  void clear_empty_struct2();
  const ::proto_util_converter::testing::StructMessage& empty_struct2() const;
  ::proto_util_converter::testing::StructMessage* release_empty_struct2();
  ::proto_util_converter::testing::StructMessage* mutable_empty_struct2();
  void set_allocated_empty_struct2(::proto_util_converter::testing::StructMessage* empty_struct2);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_empty_struct2() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_empty_struct2();
  public:
  void unsafe_arena_set_allocated_empty_struct2(
      ::proto_util_converter::testing::StructMessage* empty_struct2);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_empty_struct2();

  // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
  bool has_struct_with_null_value() const;
  private:
  bool _internal_has_struct_with_null_value() const;
  public:
  void clear_struct_with_null_value();
  const ::proto_util_converter::testing::StructMessage& struct_with_null_value() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_null_value();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_null_value();
  void set_allocated_struct_with_null_value(::proto_util_converter::testing::StructMessage* struct_with_null_value);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_null_value() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_null_value();
  public:
  void unsafe_arena_set_allocated_struct_with_null_value(
      ::proto_util_converter::testing::StructMessage* struct_with_null_value);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_null_value();

  // .proto_util_converter.testing.StructMessage struct_with_values = 204;
  bool has_struct_with_values() const;
  private:
  bool _internal_has_struct_with_values() const;
  public:
  void clear_struct_with_values();
  const ::proto_util_converter::testing::StructMessage& struct_with_values() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_values();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_values();
  void set_allocated_struct_with_values(::proto_util_converter::testing::StructMessage* struct_with_values);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_values() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_values();
  public:
  void unsafe_arena_set_allocated_struct_with_values(
      ::proto_util_converter::testing::StructMessage* struct_with_values);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_values();

  // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
  bool has_struct_with_nested_struct() const;
  private:
  bool _internal_has_struct_with_nested_struct() const;
  public:
  void clear_struct_with_nested_struct();
  const ::proto_util_converter::testing::StructMessage& struct_with_nested_struct() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_nested_struct();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_nested_struct();
  void set_allocated_struct_with_nested_struct(::proto_util_converter::testing::StructMessage* struct_with_nested_struct);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_nested_struct() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_nested_struct();
  public:
  void unsafe_arena_set_allocated_struct_with_nested_struct(
      ::proto_util_converter::testing::StructMessage* struct_with_nested_struct);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_nested_struct();

  // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
  bool has_struct_with_nested_list() const;
  private:
  bool _internal_has_struct_with_nested_list() const;
  public:
  void clear_struct_with_nested_list();
  const ::proto_util_converter::testing::StructMessage& struct_with_nested_list() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_nested_list();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_nested_list();
  void set_allocated_struct_with_nested_list(::proto_util_converter::testing::StructMessage* struct_with_nested_list);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_nested_list() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_nested_list();
  public:
  void unsafe_arena_set_allocated_struct_with_nested_list(
      ::proto_util_converter::testing::StructMessage* struct_with_nested_list);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_nested_list();

  // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
  bool has_struct_with_list_of_nulls() const;
  private:
  bool _internal_has_struct_with_list_of_nulls() const;
  public:
  void clear_struct_with_list_of_nulls();
  const ::proto_util_converter::testing::StructMessage& struct_with_list_of_nulls() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_list_of_nulls();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_list_of_nulls();
  void set_allocated_struct_with_list_of_nulls(::proto_util_converter::testing::StructMessage* struct_with_list_of_nulls);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_list_of_nulls() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_list_of_nulls();
  public:
  void unsafe_arena_set_allocated_struct_with_list_of_nulls(
      ::proto_util_converter::testing::StructMessage* struct_with_list_of_nulls);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_list_of_nulls();

  // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
  bool has_struct_with_list_of_lists() const;
  private:
  bool _internal_has_struct_with_list_of_lists() const;
  public:
  void clear_struct_with_list_of_lists();
  const ::proto_util_converter::testing::StructMessage& struct_with_list_of_lists() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_list_of_lists();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_list_of_lists();
  void set_allocated_struct_with_list_of_lists(::proto_util_converter::testing::StructMessage* struct_with_list_of_lists);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_list_of_lists() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_list_of_lists();
  public:
  void unsafe_arena_set_allocated_struct_with_list_of_lists(
      ::proto_util_converter::testing::StructMessage* struct_with_list_of_lists);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_list_of_lists();

  // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
  bool has_struct_with_list_of_structs() const;
  private:
  bool _internal_has_struct_with_list_of_structs() const;
  public:
  void clear_struct_with_list_of_structs();
  const ::proto_util_converter::testing::StructMessage& struct_with_list_of_structs() const;
  ::proto_util_converter::testing::StructMessage* release_struct_with_list_of_structs();
  ::proto_util_converter::testing::StructMessage* mutable_struct_with_list_of_structs();
  void set_allocated_struct_with_list_of_structs(::proto_util_converter::testing::StructMessage* struct_with_list_of_structs);
  private:
  const ::proto_util_converter::testing::StructMessage& _internal_struct_with_list_of_structs() const;
  ::proto_util_converter::testing::StructMessage* _internal_mutable_struct_with_list_of_structs();
  public:
  void unsafe_arena_set_allocated_struct_with_list_of_structs(
      ::proto_util_converter::testing::StructMessage* struct_with_list_of_structs);
  ::proto_util_converter::testing::StructMessage* unsafe_arena_release_struct_with_list_of_structs();

  // .google.protobuf.Struct top_level_struct = 210;
  bool has_top_level_struct() const;
  private:
  bool _internal_has_top_level_struct() const;
  public:
  void clear_top_level_struct();
  const PROTOBUF_NAMESPACE_ID::Struct& top_level_struct() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_top_level_struct();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_top_level_struct();
  void set_allocated_top_level_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_top_level_struct() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_top_level_struct();
  public:
  void unsafe_arena_set_allocated_top_level_struct(
      PROTOBUF_NAMESPACE_ID::Struct* top_level_struct);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_top_level_struct();

  // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
  bool has_value_wrapper_simple() const;
  private:
  bool _internal_has_value_wrapper_simple() const;
  public:
  void clear_value_wrapper_simple();
  const ::proto_util_converter::testing::ValueMessage& value_wrapper_simple() const;
  ::proto_util_converter::testing::ValueMessage* release_value_wrapper_simple();
  ::proto_util_converter::testing::ValueMessage* mutable_value_wrapper_simple();
  void set_allocated_value_wrapper_simple(::proto_util_converter::testing::ValueMessage* value_wrapper_simple);
  private:
  const ::proto_util_converter::testing::ValueMessage& _internal_value_wrapper_simple() const;
  ::proto_util_converter::testing::ValueMessage* _internal_mutable_value_wrapper_simple();
  public:
  void unsafe_arena_set_allocated_value_wrapper_simple(
      ::proto_util_converter::testing::ValueMessage* value_wrapper_simple);
  ::proto_util_converter::testing::ValueMessage* unsafe_arena_release_value_wrapper_simple();

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
  bool has_value_wrapper_with_struct() const;
  private:
  bool _internal_has_value_wrapper_with_struct() const;
  public:
  void clear_value_wrapper_with_struct();
  const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_struct() const;
  ::proto_util_converter::testing::ValueMessage* release_value_wrapper_with_struct();
  ::proto_util_converter::testing::ValueMessage* mutable_value_wrapper_with_struct();
  void set_allocated_value_wrapper_with_struct(::proto_util_converter::testing::ValueMessage* value_wrapper_with_struct);
  private:
  const ::proto_util_converter::testing::ValueMessage& _internal_value_wrapper_with_struct() const;
  ::proto_util_converter::testing::ValueMessage* _internal_mutable_value_wrapper_with_struct();
  public:
  void unsafe_arena_set_allocated_value_wrapper_with_struct(
      ::proto_util_converter::testing::ValueMessage* value_wrapper_with_struct);
  ::proto_util_converter::testing::ValueMessage* unsafe_arena_release_value_wrapper_with_struct();

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
  bool has_value_wrapper_with_list() const;
  private:
  bool _internal_has_value_wrapper_with_list() const;
  public:
  void clear_value_wrapper_with_list();
  const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_list() const;
  ::proto_util_converter::testing::ValueMessage* release_value_wrapper_with_list();
  ::proto_util_converter::testing::ValueMessage* mutable_value_wrapper_with_list();
  void set_allocated_value_wrapper_with_list(::proto_util_converter::testing::ValueMessage* value_wrapper_with_list);
  private:
  const ::proto_util_converter::testing::ValueMessage& _internal_value_wrapper_with_list() const;
  ::proto_util_converter::testing::ValueMessage* _internal_mutable_value_wrapper_with_list();
  public:
  void unsafe_arena_set_allocated_value_wrapper_with_list(
      ::proto_util_converter::testing::ValueMessage* value_wrapper_with_list);
  ::proto_util_converter::testing::ValueMessage* unsafe_arena_release_value_wrapper_with_list();

  // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
  bool has_list_value_wrapper() const;
  private:
  bool _internal_has_list_value_wrapper() const;
  public:
  void clear_list_value_wrapper();
  const ::proto_util_converter::testing::ListValueMessage& list_value_wrapper() const;
  ::proto_util_converter::testing::ListValueMessage* release_list_value_wrapper();
  ::proto_util_converter::testing::ListValueMessage* mutable_list_value_wrapper();
  void set_allocated_list_value_wrapper(::proto_util_converter::testing::ListValueMessage* list_value_wrapper);
  private:
  const ::proto_util_converter::testing::ListValueMessage& _internal_list_value_wrapper() const;
  ::proto_util_converter::testing::ListValueMessage* _internal_mutable_list_value_wrapper();
  public:
  void unsafe_arena_set_allocated_list_value_wrapper(
      ::proto_util_converter::testing::ListValueMessage* list_value_wrapper);
  ::proto_util_converter::testing::ListValueMessage* unsafe_arena_release_list_value_wrapper();

  // .google.protobuf.Value top_level_value_simple = 216;
  bool has_top_level_value_simple() const;
  private:
  bool _internal_has_top_level_value_simple() const;
  public:
  void clear_top_level_value_simple();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_simple() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_simple();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_simple();
  void set_allocated_top_level_value_simple(PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_top_level_value_simple() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_top_level_value_simple();
  public:
  void unsafe_arena_set_allocated_top_level_value_simple(
      PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_top_level_value_simple();

  // .google.protobuf.Value top_level_value_with_struct = 217;
  bool has_top_level_value_with_struct() const;
  private:
  bool _internal_has_top_level_value_with_struct() const;
  public:
  void clear_top_level_value_with_struct();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_struct() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_struct();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_struct();
  void set_allocated_top_level_value_with_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_top_level_value_with_struct() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_top_level_value_with_struct();
  public:
  void unsafe_arena_set_allocated_top_level_value_with_struct(
      PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_top_level_value_with_struct();

  // .google.protobuf.Value top_level_value_with_list = 218;
  bool has_top_level_value_with_list() const;
  private:
  bool _internal_has_top_level_value_with_list() const;
  public:
  void clear_top_level_value_with_list();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_list();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_list();
  void set_allocated_top_level_value_with_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_top_level_value_with_list() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_top_level_value_with_list();
  public:
  void unsafe_arena_set_allocated_top_level_value_with_list(
      PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_top_level_value_with_list();

  // .google.protobuf.ListValue top_level_listvalue = 219;
  bool has_top_level_listvalue() const;
  private:
  bool _internal_has_top_level_listvalue() const;
  public:
  void clear_top_level_listvalue();
  const PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_top_level_listvalue();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_top_level_listvalue();
  void set_allocated_top_level_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue);
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_top_level_listvalue() const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_top_level_listvalue();
  public:
  void unsafe_arena_set_allocated_top_level_listvalue(
      PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue);
  PROTOBUF_NAMESPACE_ID::ListValue* unsafe_arena_release_top_level_listvalue();

  // .proto_util_converter.testing.AnyMessage empty_any = 301;
  bool has_empty_any() const;
  private:
  bool _internal_has_empty_any() const;
  public:
  void clear_empty_any();
  const ::proto_util_converter::testing::AnyMessage& empty_any() const;
  ::proto_util_converter::testing::AnyMessage* release_empty_any();
  ::proto_util_converter::testing::AnyMessage* mutable_empty_any();
  void set_allocated_empty_any(::proto_util_converter::testing::AnyMessage* empty_any);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_empty_any() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_empty_any();
  public:
  void unsafe_arena_set_allocated_empty_any(
      ::proto_util_converter::testing::AnyMessage* empty_any);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_empty_any();

  // .proto_util_converter.testing.AnyMessage type_only_any = 302;
  bool has_type_only_any() const;
  private:
  bool _internal_has_type_only_any() const;
  public:
  void clear_type_only_any();
  const ::proto_util_converter::testing::AnyMessage& type_only_any() const;
  ::proto_util_converter::testing::AnyMessage* release_type_only_any();
  ::proto_util_converter::testing::AnyMessage* mutable_type_only_any();
  void set_allocated_type_only_any(::proto_util_converter::testing::AnyMessage* type_only_any);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_type_only_any() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_type_only_any();
  public:
  void unsafe_arena_set_allocated_type_only_any(
      ::proto_util_converter::testing::AnyMessage* type_only_any);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_type_only_any();

  // .proto_util_converter.testing.AnyMessage recursive_any = 303;
  bool has_recursive_any() const;
  private:
  bool _internal_has_recursive_any() const;
  public:
  void clear_recursive_any();
  const ::proto_util_converter::testing::AnyMessage& recursive_any() const;
  ::proto_util_converter::testing::AnyMessage* release_recursive_any();
  ::proto_util_converter::testing::AnyMessage* mutable_recursive_any();
  void set_allocated_recursive_any(::proto_util_converter::testing::AnyMessage* recursive_any);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_recursive_any() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_recursive_any();
  public:
  void unsafe_arena_set_allocated_recursive_any(
      ::proto_util_converter::testing::AnyMessage* recursive_any);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_recursive_any();

  // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
  bool has_any_with_message_value() const;
  private:
  bool _internal_has_any_with_message_value() const;
  public:
  void clear_any_with_message_value();
  const ::proto_util_converter::testing::AnyMessage& any_with_message_value() const;
  ::proto_util_converter::testing::AnyMessage* release_any_with_message_value();
  ::proto_util_converter::testing::AnyMessage* mutable_any_with_message_value();
  void set_allocated_any_with_message_value(::proto_util_converter::testing::AnyMessage* any_with_message_value);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_any_with_message_value() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_any_with_message_value();
  public:
  void unsafe_arena_set_allocated_any_with_message_value(
      ::proto_util_converter::testing::AnyMessage* any_with_message_value);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_any_with_message_value();

  // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
  bool has_any_with_nested_message() const;
  private:
  bool _internal_has_any_with_nested_message() const;
  public:
  void clear_any_with_nested_message();
  const ::proto_util_converter::testing::AnyMessage& any_with_nested_message() const;
  ::proto_util_converter::testing::AnyMessage* release_any_with_nested_message();
  ::proto_util_converter::testing::AnyMessage* mutable_any_with_nested_message();
  void set_allocated_any_with_nested_message(::proto_util_converter::testing::AnyMessage* any_with_nested_message);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_any_with_nested_message() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_any_with_nested_message();
  public:
  void unsafe_arena_set_allocated_any_with_nested_message(
      ::proto_util_converter::testing::AnyMessage* any_with_nested_message);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_any_with_nested_message();

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
  bool has_any_with_message_containing_map() const;
  private:
  bool _internal_has_any_with_message_containing_map() const;
  public:
  void clear_any_with_message_containing_map();
  const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_map() const;
  ::proto_util_converter::testing::AnyMessage* release_any_with_message_containing_map();
  ::proto_util_converter::testing::AnyMessage* mutable_any_with_message_containing_map();
  void set_allocated_any_with_message_containing_map(::proto_util_converter::testing::AnyMessage* any_with_message_containing_map);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_any_with_message_containing_map() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_any_with_message_containing_map();
  public:
  void unsafe_arena_set_allocated_any_with_message_containing_map(
      ::proto_util_converter::testing::AnyMessage* any_with_message_containing_map);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_any_with_message_containing_map();

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
  bool has_any_with_message_containing_struct() const;
  private:
  bool _internal_has_any_with_message_containing_struct() const;
  public:
  void clear_any_with_message_containing_struct();
  const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_struct() const;
  ::proto_util_converter::testing::AnyMessage* release_any_with_message_containing_struct();
  ::proto_util_converter::testing::AnyMessage* mutable_any_with_message_containing_struct();
  void set_allocated_any_with_message_containing_struct(::proto_util_converter::testing::AnyMessage* any_with_message_containing_struct);
  private:
  const ::proto_util_converter::testing::AnyMessage& _internal_any_with_message_containing_struct() const;
  ::proto_util_converter::testing::AnyMessage* _internal_mutable_any_with_message_containing_struct();
  public:
  void unsafe_arena_set_allocated_any_with_message_containing_struct(
      ::proto_util_converter::testing::AnyMessage* any_with_message_containing_struct);
  ::proto_util_converter::testing::AnyMessage* unsafe_arena_release_any_with_message_containing_struct();

  // .google.protobuf.Any top_level_any = 308;
  bool has_top_level_any() const;
  private:
  bool _internal_has_top_level_any() const;
  public:
  void clear_top_level_any();
  const PROTOBUF_NAMESPACE_ID::Any& top_level_any() const;
  PROTOBUF_NAMESPACE_ID::Any* release_top_level_any();
  PROTOBUF_NAMESPACE_ID::Any* mutable_top_level_any();
  void set_allocated_top_level_any(PROTOBUF_NAMESPACE_ID::Any* top_level_any);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_top_level_any() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_top_level_any();
  public:
  void unsafe_arena_set_allocated_top_level_any(
      PROTOBUF_NAMESPACE_ID::Any* top_level_any);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_top_level_any();

  // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
  bool has_empty_map() const;
  private:
  bool _internal_has_empty_map() const;
  public:
  void clear_empty_map();
  const ::proto_util_converter::testing::StringtoIntMap& empty_map() const;
  ::proto_util_converter::testing::StringtoIntMap* release_empty_map();
  ::proto_util_converter::testing::StringtoIntMap* mutable_empty_map();
  void set_allocated_empty_map(::proto_util_converter::testing::StringtoIntMap* empty_map);
  private:
  const ::proto_util_converter::testing::StringtoIntMap& _internal_empty_map() const;
  ::proto_util_converter::testing::StringtoIntMap* _internal_mutable_empty_map();
  public:
  void unsafe_arena_set_allocated_empty_map(
      ::proto_util_converter::testing::StringtoIntMap* empty_map);
  ::proto_util_converter::testing::StringtoIntMap* unsafe_arena_release_empty_map();

  // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
  bool has_string_to_int() const;
  private:
  bool _internal_has_string_to_int() const;
  public:
  void clear_string_to_int();
  const ::proto_util_converter::testing::StringtoIntMap& string_to_int() const;
  ::proto_util_converter::testing::StringtoIntMap* release_string_to_int();
  ::proto_util_converter::testing::StringtoIntMap* mutable_string_to_int();
  void set_allocated_string_to_int(::proto_util_converter::testing::StringtoIntMap* string_to_int);
  private:
  const ::proto_util_converter::testing::StringtoIntMap& _internal_string_to_int() const;
  ::proto_util_converter::testing::StringtoIntMap* _internal_mutable_string_to_int();
  public:
  void unsafe_arena_set_allocated_string_to_int(
      ::proto_util_converter::testing::StringtoIntMap* string_to_int);
  ::proto_util_converter::testing::StringtoIntMap* unsafe_arena_release_string_to_int();

  // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
  bool has_int_to_string() const;
  private:
  bool _internal_has_int_to_string() const;
  public:
  void clear_int_to_string();
  const ::proto_util_converter::testing::IntToStringMap& int_to_string() const;
  ::proto_util_converter::testing::IntToStringMap* release_int_to_string();
  ::proto_util_converter::testing::IntToStringMap* mutable_int_to_string();
  void set_allocated_int_to_string(::proto_util_converter::testing::IntToStringMap* int_to_string);
  private:
  const ::proto_util_converter::testing::IntToStringMap& _internal_int_to_string() const;
  ::proto_util_converter::testing::IntToStringMap* _internal_mutable_int_to_string();
  public:
  void unsafe_arena_set_allocated_int_to_string(
      ::proto_util_converter::testing::IntToStringMap* int_to_string);
  ::proto_util_converter::testing::IntToStringMap* unsafe_arena_release_int_to_string();

  // .proto_util_converter.testing.MixedMap mixed1 = 404;
  bool has_mixed1() const;
  private:
  bool _internal_has_mixed1() const;
  public:
  void clear_mixed1();
  const ::proto_util_converter::testing::MixedMap& mixed1() const;
  ::proto_util_converter::testing::MixedMap* release_mixed1();
  ::proto_util_converter::testing::MixedMap* mutable_mixed1();
  void set_allocated_mixed1(::proto_util_converter::testing::MixedMap* mixed1);
  private:
  const ::proto_util_converter::testing::MixedMap& _internal_mixed1() const;
  ::proto_util_converter::testing::MixedMap* _internal_mutable_mixed1();
  public:
  void unsafe_arena_set_allocated_mixed1(
      ::proto_util_converter::testing::MixedMap* mixed1);
  ::proto_util_converter::testing::MixedMap* unsafe_arena_release_mixed1();

  // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
  bool has_mixed2() const;
  private:
  bool _internal_has_mixed2() const;
  public:
  void clear_mixed2();
  const ::proto_util_converter::testing::MixedMap2& mixed2() const;
  ::proto_util_converter::testing::MixedMap2* release_mixed2();
  ::proto_util_converter::testing::MixedMap2* mutable_mixed2();
  void set_allocated_mixed2(::proto_util_converter::testing::MixedMap2* mixed2);
  private:
  const ::proto_util_converter::testing::MixedMap2& _internal_mixed2() const;
  ::proto_util_converter::testing::MixedMap2* _internal_mutable_mixed2();
  public:
  void unsafe_arena_set_allocated_mixed2(
      ::proto_util_converter::testing::MixedMap2* mixed2);
  ::proto_util_converter::testing::MixedMap2* unsafe_arena_release_mixed2();

  // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
  bool has_empty_mixed2() const;
  private:
  bool _internal_has_empty_mixed2() const;
  public:
  void clear_empty_mixed2();
  const ::proto_util_converter::testing::MixedMap2& empty_mixed2() const;
  ::proto_util_converter::testing::MixedMap2* release_empty_mixed2();
  ::proto_util_converter::testing::MixedMap2* mutable_empty_mixed2();
  void set_allocated_empty_mixed2(::proto_util_converter::testing::MixedMap2* empty_mixed2);
  private:
  const ::proto_util_converter::testing::MixedMap2& _internal_empty_mixed2() const;
  ::proto_util_converter::testing::MixedMap2* _internal_mutable_empty_mixed2();
  public:
  void unsafe_arena_set_allocated_empty_mixed2(
      ::proto_util_converter::testing::MixedMap2* empty_mixed2);
  ::proto_util_converter::testing::MixedMap2* unsafe_arena_release_empty_mixed2();

  // .proto_util_converter.testing.MessageMap map_of_objects = 407;
  bool has_map_of_objects() const;
  private:
  bool _internal_has_map_of_objects() const;
  public:
  void clear_map_of_objects();
  const ::proto_util_converter::testing::MessageMap& map_of_objects() const;
  ::proto_util_converter::testing::MessageMap* release_map_of_objects();
  ::proto_util_converter::testing::MessageMap* mutable_map_of_objects();
  void set_allocated_map_of_objects(::proto_util_converter::testing::MessageMap* map_of_objects);
  private:
  const ::proto_util_converter::testing::MessageMap& _internal_map_of_objects() const;
  ::proto_util_converter::testing::MessageMap* _internal_mutable_map_of_objects();
  public:
  void unsafe_arena_set_allocated_map_of_objects(
      ::proto_util_converter::testing::MessageMap* map_of_objects);
  ::proto_util_converter::testing::MessageMap* unsafe_arena_release_map_of_objects();

  // .proto_util_converter.testing.MixedMap mixed_empty = 408;
  bool has_mixed_empty() const;
  private:
  bool _internal_has_mixed_empty() const;
  public:
  void clear_mixed_empty();
  const ::proto_util_converter::testing::MixedMap& mixed_empty() const;
  ::proto_util_converter::testing::MixedMap* release_mixed_empty();
  ::proto_util_converter::testing::MixedMap* mutable_mixed_empty();
  void set_allocated_mixed_empty(::proto_util_converter::testing::MixedMap* mixed_empty);
  private:
  const ::proto_util_converter::testing::MixedMap& _internal_mixed_empty() const;
  ::proto_util_converter::testing::MixedMap* _internal_mutable_mixed_empty();
  public:
  void unsafe_arena_set_allocated_mixed_empty(
      ::proto_util_converter::testing::MixedMap* mixed_empty);
  ::proto_util_converter::testing::MixedMap* unsafe_arena_release_mixed_empty();

  // .proto_util_converter.testing.MessageMap message_map_empty = 409;
  bool has_message_map_empty() const;
  private:
  bool _internal_has_message_map_empty() const;
  public:
  void clear_message_map_empty();
  const ::proto_util_converter::testing::MessageMap& message_map_empty() const;
  ::proto_util_converter::testing::MessageMap* release_message_map_empty();
  ::proto_util_converter::testing::MessageMap* mutable_message_map_empty();
  void set_allocated_message_map_empty(::proto_util_converter::testing::MessageMap* message_map_empty);
  private:
  const ::proto_util_converter::testing::MessageMap& _internal_message_map_empty() const;
  ::proto_util_converter::testing::MessageMap* _internal_mutable_message_map_empty();
  public:
  void unsafe_arena_set_allocated_message_map_empty(
      ::proto_util_converter::testing::MessageMap* message_map_empty);
  ::proto_util_converter::testing::MessageMap* unsafe_arena_release_message_map_empty();

  // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  const ::proto_util_converter::testing::DoubleValueMessage& double_value() const;
  ::proto_util_converter::testing::DoubleValueMessage* release_double_value();
  ::proto_util_converter::testing::DoubleValueMessage* mutable_double_value();
  void set_allocated_double_value(::proto_util_converter::testing::DoubleValueMessage* double_value);
  private:
  const ::proto_util_converter::testing::DoubleValueMessage& _internal_double_value() const;
  ::proto_util_converter::testing::DoubleValueMessage* _internal_mutable_double_value();
  public:
  void unsafe_arena_set_allocated_double_value(
      ::proto_util_converter::testing::DoubleValueMessage* double_value);
  ::proto_util_converter::testing::DoubleValueMessage* unsafe_arena_release_double_value();

  // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
  bool has_double_value_default() const;
  private:
  bool _internal_has_double_value_default() const;
  public:
  void clear_double_value_default();
  const ::proto_util_converter::testing::DoubleValueMessage& double_value_default() const;
  ::proto_util_converter::testing::DoubleValueMessage* release_double_value_default();
  ::proto_util_converter::testing::DoubleValueMessage* mutable_double_value_default();
  void set_allocated_double_value_default(::proto_util_converter::testing::DoubleValueMessage* double_value_default);
  private:
  const ::proto_util_converter::testing::DoubleValueMessage& _internal_double_value_default() const;
  ::proto_util_converter::testing::DoubleValueMessage* _internal_mutable_double_value_default();
  public:
  void unsafe_arena_set_allocated_double_value_default(
      ::proto_util_converter::testing::DoubleValueMessage* double_value_default);
  ::proto_util_converter::testing::DoubleValueMessage* unsafe_arena_release_double_value_default();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DefaultValueTestCases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_util_converter::testing::DoubleMessage* empty_double_;
  ::proto_util_converter::testing::DoubleMessage* double_with_default_value_;
  ::proto_util_converter::testing::DoubleMessage* double_with_nondefault_value_;
  ::proto_util_converter::testing::DoubleMessage* repeated_double_;
  ::proto_util_converter::testing::DoubleMessage* nested_message_;
  ::proto_util_converter::testing::DoubleMessage* repeated_nested_message_;
  ::proto_util_converter::testing::DoubleMessage* double_message_with_oneof_;
  ::proto_util_converter::testing::StructMessage* empty_struct_;
  ::proto_util_converter::testing::StructMessage* empty_struct2_;
  ::proto_util_converter::testing::StructMessage* struct_with_null_value_;
  ::proto_util_converter::testing::StructMessage* struct_with_values_;
  ::proto_util_converter::testing::StructMessage* struct_with_nested_struct_;
  ::proto_util_converter::testing::StructMessage* struct_with_nested_list_;
  ::proto_util_converter::testing::StructMessage* struct_with_list_of_nulls_;
  ::proto_util_converter::testing::StructMessage* struct_with_list_of_lists_;
  ::proto_util_converter::testing::StructMessage* struct_with_list_of_structs_;
  PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_;
  ::proto_util_converter::testing::ValueMessage* value_wrapper_simple_;
  ::proto_util_converter::testing::ValueMessage* value_wrapper_with_struct_;
  ::proto_util_converter::testing::ValueMessage* value_wrapper_with_list_;
  ::proto_util_converter::testing::ListValueMessage* list_value_wrapper_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list_;
  PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue_;
  ::proto_util_converter::testing::AnyMessage* empty_any_;
  ::proto_util_converter::testing::AnyMessage* type_only_any_;
  ::proto_util_converter::testing::AnyMessage* recursive_any_;
  ::proto_util_converter::testing::AnyMessage* any_with_message_value_;
  ::proto_util_converter::testing::AnyMessage* any_with_nested_message_;
  ::proto_util_converter::testing::AnyMessage* any_with_message_containing_map_;
  ::proto_util_converter::testing::AnyMessage* any_with_message_containing_struct_;
  PROTOBUF_NAMESPACE_ID::Any* top_level_any_;
  ::proto_util_converter::testing::StringtoIntMap* empty_map_;
  ::proto_util_converter::testing::StringtoIntMap* string_to_int_;
  ::proto_util_converter::testing::IntToStringMap* int_to_string_;
  ::proto_util_converter::testing::MixedMap* mixed1_;
  ::proto_util_converter::testing::MixedMap2* mixed2_;
  ::proto_util_converter::testing::MixedMap2* empty_mixed2_;
  ::proto_util_converter::testing::MessageMap* map_of_objects_;
  ::proto_util_converter::testing::MixedMap* mixed_empty_;
  ::proto_util_converter::testing::MessageMap* message_map_empty_;
  ::proto_util_converter::testing::DoubleValueMessage* double_value_;
  ::proto_util_converter::testing::DoubleValueMessage* double_value_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class DoubleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DoubleMessage) */ {
 public:
  inline DoubleMessage() : DoubleMessage(nullptr) {}
  virtual ~DoubleMessage();

  DoubleMessage(const DoubleMessage& from);
  DoubleMessage(DoubleMessage&& from) noexcept
    : DoubleMessage() {
    *this = ::std::move(from);
  }

  inline DoubleMessage& operator=(const DoubleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleMessage& operator=(DoubleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleMessage& default_instance();

  enum ValueCase {
    kStrValue = 112,
    kNumValue = 113,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleMessage*>(
               &_DoubleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoubleMessage& a, DoubleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleMessage* New() const final {
    return CreateMaybeMessage<DoubleMessage>(nullptr);
  }

  DoubleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleMessage& from);
  void MergeFrom(const DoubleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DoubleMessage";
  }
  protected:
  explicit DoubleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedDoubleFieldNumber = 2,
    kRepeatedNestedMessageFieldNumber = 4,
    kNestedMessageFieldNumber = 3,
    kDoubleWrapperFieldNumber = 100,
    kDoubleValueFieldNumber = 1,
    kStrValueFieldNumber = 112,
    kNumValueFieldNumber = 113,
  };
  // repeated double repeated_double = 2;
  int repeated_double_size() const;
  private:
  int _internal_repeated_double_size() const;
  public:
  void clear_repeated_double();
  private:
  double _internal_repeated_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_repeated_double() const;
  void _internal_add_repeated_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_repeated_double();
  public:
  double repeated_double(int index) const;
  void set_repeated_double(int index, double value);
  void add_repeated_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      repeated_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_repeated_double();

  // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
  int repeated_nested_message_size() const;
  private:
  int _internal_repeated_nested_message_size() const;
  public:
  void clear_repeated_nested_message();
  ::proto_util_converter::testing::DoubleMessage* mutable_repeated_nested_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::DoubleMessage >*
      mutable_repeated_nested_message();
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_repeated_nested_message(int index) const;
  ::proto_util_converter::testing::DoubleMessage* _internal_add_repeated_nested_message();
  public:
  const ::proto_util_converter::testing::DoubleMessage& repeated_nested_message(int index) const;
  ::proto_util_converter::testing::DoubleMessage* add_repeated_nested_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::DoubleMessage >&
      repeated_nested_message() const;

  // .proto_util_converter.testing.DoubleMessage nested_message = 3;
  bool has_nested_message() const;
  private:
  bool _internal_has_nested_message() const;
  public:
  void clear_nested_message();
  const ::proto_util_converter::testing::DoubleMessage& nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* release_nested_message();
  ::proto_util_converter::testing::DoubleMessage* mutable_nested_message();
  void set_allocated_nested_message(::proto_util_converter::testing::DoubleMessage* nested_message);
  private:
  const ::proto_util_converter::testing::DoubleMessage& _internal_nested_message() const;
  ::proto_util_converter::testing::DoubleMessage* _internal_mutable_nested_message();
  public:
  void unsafe_arena_set_allocated_nested_message(
      ::proto_util_converter::testing::DoubleMessage* nested_message);
  ::proto_util_converter::testing::DoubleMessage* unsafe_arena_release_nested_message();

  // .google.protobuf.DoubleValue double_wrapper = 100;
  bool has_double_wrapper() const;
  private:
  bool _internal_has_double_wrapper() const;
  public:
  void clear_double_wrapper();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& double_wrapper() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_double_wrapper();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_double_wrapper();
  void set_allocated_double_wrapper(PROTOBUF_NAMESPACE_ID::DoubleValue* double_wrapper);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_double_wrapper() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_double_wrapper();
  public:
  void unsafe_arena_set_allocated_double_wrapper(
      PROTOBUF_NAMESPACE_ID::DoubleValue* double_wrapper);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_double_wrapper();

  // double double_value = 1;
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string str_value = 112;
  private:
  bool _internal_has_str_value() const;
  public:
  void clear_str_value();
  const std::string& str_value() const;
  void set_str_value(const std::string& value);
  void set_str_value(std::string&& value);
  void set_str_value(const char* value);
  void set_str_value(const char* value, size_t size);
  std::string* mutable_str_value();
  std::string* release_str_value();
  void set_allocated_str_value(std::string* str_value);
  private:
  const std::string& _internal_str_value() const;
  void _internal_set_str_value(const std::string& value);
  std::string* _internal_mutable_str_value();
  public:

  // int64 num_value = 113;
  private:
  bool _internal_has_num_value() const;
  public:
  void clear_num_value();
  ::PROTOBUF_NAMESPACE_ID::int64 num_value() const;
  void set_num_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_value() const;
  void _internal_set_num_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DoubleMessage)
 private:
  class _Internal;
  void set_has_str_value();
  void set_has_num_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > repeated_double_;
  mutable std::atomic<int> _repeated_double_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::DoubleMessage > repeated_nested_message_;
  ::proto_util_converter::testing::DoubleMessage* nested_message_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* double_wrapper_;
  double double_value_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 num_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class StructMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StructMessage) */ {
 public:
  inline StructMessage() : StructMessage(nullptr) {}
  virtual ~StructMessage();

  StructMessage(const StructMessage& from);
  StructMessage(StructMessage&& from) noexcept
    : StructMessage() {
    *this = ::std::move(from);
  }

  inline StructMessage& operator=(const StructMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructMessage& operator=(StructMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructMessage* internal_default_instance() {
    return reinterpret_cast<const StructMessage*>(
               &_StructMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StructMessage& a, StructMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StructMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructMessage* New() const final {
    return CreateMaybeMessage<StructMessage>(nullptr);
  }

  StructMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructMessage& from);
  void MergeFrom(const StructMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StructMessage";
  }
  protected:
  explicit StructMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldNumber = 1,
  };
  // .google.protobuf.Struct struct = 1;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const PROTOBUF_NAMESPACE_ID::Struct& struct_() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_struct_();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_();
  void set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      PROTOBUF_NAMESPACE_ID::Struct* struct_);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_struct_();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StructMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Struct* struct__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class ValueMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.ValueMessage) */ {
 public:
  inline ValueMessage() : ValueMessage(nullptr) {}
  virtual ~ValueMessage();

  ValueMessage(const ValueMessage& from);
  ValueMessage(ValueMessage&& from) noexcept
    : ValueMessage() {
    *this = ::std::move(from);
  }

  inline ValueMessage& operator=(const ValueMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueMessage& operator=(ValueMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueMessage* internal_default_instance() {
    return reinterpret_cast<const ValueMessage*>(
               &_ValueMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValueMessage& a, ValueMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueMessage* New() const final {
    return CreateMaybeMessage<ValueMessage>(nullptr);
  }

  ValueMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueMessage& from);
  void MergeFrom(const ValueMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.ValueMessage";
  }
  protected:
  explicit ValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .google.protobuf.Value value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NAMESPACE_ID::Value* release_value();
  PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Value* value);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.ValueMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class ListValueMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.ListValueMessage) */ {
 public:
  inline ListValueMessage() : ListValueMessage(nullptr) {}
  virtual ~ListValueMessage();

  ListValueMessage(const ListValueMessage& from);
  ListValueMessage(ListValueMessage&& from) noexcept
    : ListValueMessage() {
    *this = ::std::move(from);
  }

  inline ListValueMessage& operator=(const ListValueMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValueMessage& operator=(ListValueMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValueMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListValueMessage* internal_default_instance() {
    return reinterpret_cast<const ListValueMessage*>(
               &_ListValueMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListValueMessage& a, ListValueMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValueMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValueMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValueMessage* New() const final {
    return CreateMaybeMessage<ListValueMessage>(nullptr);
  }

  ListValueMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValueMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValueMessage& from);
  void MergeFrom(const ListValueMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValueMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.ListValueMessage";
  }
  protected:
  explicit ListValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShoppingListFieldNumber = 1,
  };
  // .google.protobuf.ListValue shopping_list = 1;
  bool has_shopping_list() const;
  private:
  bool _internal_has_shopping_list() const;
  public:
  void clear_shopping_list();
  const PROTOBUF_NAMESPACE_ID::ListValue& shopping_list() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_shopping_list();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_shopping_list();
  void set_allocated_shopping_list(PROTOBUF_NAMESPACE_ID::ListValue* shopping_list);
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_shopping_list() const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_shopping_list();
  public:
  void unsafe_arena_set_allocated_shopping_list(
      PROTOBUF_NAMESPACE_ID::ListValue* shopping_list);
  PROTOBUF_NAMESPACE_ID::ListValue* unsafe_arena_release_shopping_list();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.ListValueMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::ListValue* shopping_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class RequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const final {
    return CreateMaybeMessage<RequestMessage>(nullptr);
  }

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.RequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class AnyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.AnyMessage) */ {
 public:
  inline AnyMessage() : AnyMessage(nullptr) {}
  virtual ~AnyMessage();

  AnyMessage(const AnyMessage& from);
  AnyMessage(AnyMessage&& from) noexcept
    : AnyMessage() {
    *this = ::std::move(from);
  }

  inline AnyMessage& operator=(const AnyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyMessage& operator=(AnyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyMessage* internal_default_instance() {
    return reinterpret_cast<const AnyMessage*>(
               &_AnyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnyMessage& a, AnyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyMessage* New() const final {
    return CreateMaybeMessage<AnyMessage>(nullptr);
  }

  AnyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyMessage& from);
  void MergeFrom(const AnyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.AnyMessage";
  }
  protected:
  explicit AnyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .google.protobuf.Any any = 1;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const PROTOBUF_NAMESPACE_ID::Any& any() const;
  PROTOBUF_NAMESPACE_ID::Any* release_any();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any();
  void set_allocated_any(PROTOBUF_NAMESPACE_ID::Any* any);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_any() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      PROTOBUF_NAMESPACE_ID::Any* any);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_any();

  // .proto_util_converter.testing.AnyData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::proto_util_converter::testing::AnyData& data() const;
  ::proto_util_converter::testing::AnyData* release_data();
  ::proto_util_converter::testing::AnyData* mutable_data();
  void set_allocated_data(::proto_util_converter::testing::AnyData* data);
  private:
  const ::proto_util_converter::testing::AnyData& _internal_data() const;
  ::proto_util_converter::testing::AnyData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::proto_util_converter::testing::AnyData* data);
  ::proto_util_converter::testing::AnyData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.AnyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* any_;
  ::proto_util_converter::testing::AnyData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class AnyData_MapDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnyData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnyData_MapDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AnyData_MapDataEntry_DoNotUse();
  explicit AnyData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnyData_MapDataEntry_DoNotUse& other);
  static const AnyData_MapDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnyData_MapDataEntry_DoNotUse*>(&_AnyData_MapDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.AnyData.MapDataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.AnyData.MapDataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class AnyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.AnyData) */ {
 public:
  inline AnyData() : AnyData(nullptr) {}
  virtual ~AnyData();

  AnyData(const AnyData& from);
  AnyData(AnyData&& from) noexcept
    : AnyData() {
    *this = ::std::move(from);
  }

  inline AnyData& operator=(const AnyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyData& operator=(AnyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyData* internal_default_instance() {
    return reinterpret_cast<const AnyData*>(
               &_AnyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnyData& a, AnyData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyData* New() const final {
    return CreateMaybeMessage<AnyData>(nullptr);
  }

  AnyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyData& from);
  void MergeFrom(const AnyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.AnyData";
  }
  protected:
  explicit AnyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 3,
    kMapDataFieldNumber = 7,
    kRepeatedDataFieldNumber = 9,
    kStrFieldNumber = 2,
    kNestedDataFieldNumber = 4,
    kStructDataFieldNumber = 8,
    kAttrFieldNumber = 1,
  };
  // repeated string msgs = 3;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  const std::string& msgs(int index) const;
  std::string* mutable_msgs(int index);
  void set_msgs(int index, const std::string& value);
  void set_msgs(int index, std::string&& value);
  void set_msgs(int index, const char* value);
  void set_msgs(int index, const char* value, size_t size);
  std::string* add_msgs();
  void add_msgs(const std::string& value);
  void add_msgs(std::string&& value);
  void add_msgs(const char* value);
  void add_msgs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msgs();
  private:
  const std::string& _internal_msgs(int index) const;
  std::string* _internal_add_msgs();
  public:

  // map<string, string> map_data = 7;
  int map_data_size() const;
  private:
  int _internal_map_data_size() const;
  public:
  void clear_map_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_map_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_data();

  // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
  int repeated_data_size() const;
  private:
  int _internal_repeated_data_size() const;
  public:
  void clear_repeated_data();
  ::proto_util_converter::testing::AnyData* mutable_repeated_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::AnyData >*
      mutable_repeated_data();
  private:
  const ::proto_util_converter::testing::AnyData& _internal_repeated_data(int index) const;
  ::proto_util_converter::testing::AnyData* _internal_add_repeated_data();
  public:
  const ::proto_util_converter::testing::AnyData& repeated_data(int index) const;
  ::proto_util_converter::testing::AnyData* add_repeated_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::AnyData >&
      repeated_data() const;

  // string str = 2;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // .proto_util_converter.testing.AnyData nested_data = 4;
  bool has_nested_data() const;
  private:
  bool _internal_has_nested_data() const;
  public:
  void clear_nested_data();
  const ::proto_util_converter::testing::AnyData& nested_data() const;
  ::proto_util_converter::testing::AnyData* release_nested_data();
  ::proto_util_converter::testing::AnyData* mutable_nested_data();
  void set_allocated_nested_data(::proto_util_converter::testing::AnyData* nested_data);
  private:
  const ::proto_util_converter::testing::AnyData& _internal_nested_data() const;
  ::proto_util_converter::testing::AnyData* _internal_mutable_nested_data();
  public:
  void unsafe_arena_set_allocated_nested_data(
      ::proto_util_converter::testing::AnyData* nested_data);
  ::proto_util_converter::testing::AnyData* unsafe_arena_release_nested_data();

  // .google.protobuf.Struct struct_data = 8;
  bool has_struct_data() const;
  private:
  bool _internal_has_struct_data() const;
  public:
  void clear_struct_data();
  const PROTOBUF_NAMESPACE_ID::Struct& struct_data() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_struct_data();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_data();
  void set_allocated_struct_data(PROTOBUF_NAMESPACE_ID::Struct* struct_data);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_data() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_data();
  public:
  void unsafe_arena_set_allocated_struct_data(
      PROTOBUF_NAMESPACE_ID::Struct* struct_data);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_struct_data();

  // int32 attr = 1;
  void clear_attr();
  ::PROTOBUF_NAMESPACE_ID::int32 attr() const;
  void set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attr() const;
  void _internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.AnyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msgs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnyData_MapDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > map_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::AnyData > repeated_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::proto_util_converter::testing::AnyData* nested_data_;
  PROTOBUF_NAMESPACE_ID::Struct* struct_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class StringtoIntMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringtoIntMap_MapEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringtoIntMap_MapEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  StringtoIntMap_MapEntry_DoNotUse();
  explicit StringtoIntMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringtoIntMap_MapEntry_DoNotUse& other);
  static const StringtoIntMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringtoIntMap_MapEntry_DoNotUse*>(&_StringtoIntMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.StringtoIntMap.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class StringtoIntMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StringtoIntMap) */ {
 public:
  inline StringtoIntMap() : StringtoIntMap(nullptr) {}
  virtual ~StringtoIntMap();

  StringtoIntMap(const StringtoIntMap& from);
  StringtoIntMap(StringtoIntMap&& from) noexcept
    : StringtoIntMap() {
    *this = ::std::move(from);
  }

  inline StringtoIntMap& operator=(const StringtoIntMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringtoIntMap& operator=(StringtoIntMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringtoIntMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringtoIntMap* internal_default_instance() {
    return reinterpret_cast<const StringtoIntMap*>(
               &_StringtoIntMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StringtoIntMap& a, StringtoIntMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringtoIntMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringtoIntMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringtoIntMap* New() const final {
    return CreateMaybeMessage<StringtoIntMap>(nullptr);
  }

  StringtoIntMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringtoIntMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringtoIntMap& from);
  void MergeFrom(const StringtoIntMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringtoIntMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StringtoIntMap";
  }
  protected:
  explicit StringtoIntMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, int32> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StringtoIntMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StringtoIntMap_MapEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class IntToStringMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntToStringMap_MapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntToStringMap_MapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  IntToStringMap_MapEntry_DoNotUse();
  explicit IntToStringMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IntToStringMap_MapEntry_DoNotUse& other);
  static const IntToStringMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IntToStringMap_MapEntry_DoNotUse*>(&_IntToStringMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.IntToStringMap.MapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class IntToStringMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.IntToStringMap) */ {
 public:
  inline IntToStringMap() : IntToStringMap(nullptr) {}
  virtual ~IntToStringMap();

  IntToStringMap(const IntToStringMap& from);
  IntToStringMap(IntToStringMap&& from) noexcept
    : IntToStringMap() {
    *this = ::std::move(from);
  }

  inline IntToStringMap& operator=(const IntToStringMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntToStringMap& operator=(IntToStringMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntToStringMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntToStringMap* internal_default_instance() {
    return reinterpret_cast<const IntToStringMap*>(
               &_IntToStringMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IntToStringMap& a, IntToStringMap& b) {
    a.Swap(&b);
  }
  inline void Swap(IntToStringMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntToStringMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntToStringMap* New() const final {
    return CreateMaybeMessage<IntToStringMap>(nullptr);
  }

  IntToStringMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntToStringMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntToStringMap& from);
  void MergeFrom(const IntToStringMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntToStringMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.IntToStringMap";
  }
  protected:
  explicit IntToStringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<int32, string> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.IntToStringMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IntToStringMap_MapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class MixedMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MixedMap_MapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MixedMap_MapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  MixedMap_MapEntry_DoNotUse();
  explicit MixedMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MixedMap_MapEntry_DoNotUse& other);
  static const MixedMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MixedMap_MapEntry_DoNotUse*>(&_MixedMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MixedMap.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class MixedMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MixedMap) */ {
 public:
  inline MixedMap() : MixedMap(nullptr) {}
  virtual ~MixedMap();

  MixedMap(const MixedMap& from);
  MixedMap(MixedMap&& from) noexcept
    : MixedMap() {
    *this = ::std::move(from);
  }

  inline MixedMap& operator=(const MixedMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixedMap& operator=(MixedMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MixedMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MixedMap* internal_default_instance() {
    return reinterpret_cast<const MixedMap*>(
               &_MixedMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MixedMap& a, MixedMap& b) {
    a.Swap(&b);
  }
  inline void Swap(MixedMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixedMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixedMap* New() const final {
    return CreateMaybeMessage<MixedMap>(nullptr);
  }

  MixedMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixedMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixedMap& from);
  void MergeFrom(const MixedMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixedMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MixedMap";
  }
  protected:
  explicit MixedMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kMsgFieldNumber = 1,
    kIntValueFieldNumber = 3,
  };
  // map<string, float> map = 2;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_map();

  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 int_value = 3;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MixedMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MixedMap_MapEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class MixedMap2_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MixedMap2_MapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MixedMap2_MapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  MixedMap2_MapEntry_DoNotUse();
  explicit MixedMap2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MixedMap2_MapEntry_DoNotUse& other);
  static const MixedMap2_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MixedMap2_MapEntry_DoNotUse*>(&_MixedMap2_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class MixedMap2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MixedMap2) */ {
 public:
  inline MixedMap2() : MixedMap2(nullptr) {}
  virtual ~MixedMap2();

  MixedMap2(const MixedMap2& from);
  MixedMap2(MixedMap2&& from) noexcept
    : MixedMap2() {
    *this = ::std::move(from);
  }

  inline MixedMap2& operator=(const MixedMap2& from) {
    CopyFrom(from);
    return *this;
  }
  inline MixedMap2& operator=(MixedMap2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MixedMap2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MixedMap2* internal_default_instance() {
    return reinterpret_cast<const MixedMap2*>(
               &_MixedMap2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MixedMap2& a, MixedMap2& b) {
    a.Swap(&b);
  }
  inline void Swap(MixedMap2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MixedMap2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MixedMap2* New() const final {
    return CreateMaybeMessage<MixedMap2>(nullptr);
  }

  MixedMap2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MixedMap2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MixedMap2& from);
  void MergeFrom(const MixedMap2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MixedMap2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MixedMap2";
  }
  protected:
  explicit MixedMap2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef MixedMap2_E E;
  static constexpr E E0 =
    MixedMap2_E_E0;
  static constexpr E E1 =
    MixedMap2_E_E1;
  static constexpr E E2 =
    MixedMap2_E_E2;
  static constexpr E E3 =
    MixedMap2_E_E3;
  static inline bool E_IsValid(int value) {
    return MixedMap2_E_IsValid(value);
  }
  static constexpr E E_MIN =
    MixedMap2_E_E_MIN;
  static constexpr E E_MAX =
    MixedMap2_E_E_MAX;
  static constexpr int E_ARRAYSIZE =
    MixedMap2_E_E_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E_descriptor() {
    return MixedMap2_E_descriptor();
  }
  template<typename T>
  static inline const std::string& E_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E_Name.");
    return MixedMap2_E_Name(enum_t_value);
  }
  static inline bool E_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      E* value) {
    return MixedMap2_E_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kMsgFieldNumber = 4,
    kEeFieldNumber = 2,
  };
  // map<int32, bool> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_map();

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .proto_util_converter.testing.MixedMap2.E ee = 2;
  void clear_ee();
  ::proto_util_converter::testing::MixedMap2_E ee() const;
  void set_ee(::proto_util_converter::testing::MixedMap2_E value);
  private:
  ::proto_util_converter::testing::MixedMap2_E _internal_ee() const;
  void _internal_set_ee(::proto_util_converter::testing::MixedMap2_E value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MixedMap2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MixedMap2_MapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int ee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class MessageMap_M PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MessageMap.M) */ {
 public:
  inline MessageMap_M() : MessageMap_M(nullptr) {}
  virtual ~MessageMap_M();

  MessageMap_M(const MessageMap_M& from);
  MessageMap_M(MessageMap_M&& from) noexcept
    : MessageMap_M() {
    *this = ::std::move(from);
  }

  inline MessageMap_M& operator=(const MessageMap_M& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageMap_M& operator=(MessageMap_M&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageMap_M& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageMap_M* internal_default_instance() {
    return reinterpret_cast<const MessageMap_M*>(
               &_MessageMap_M_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MessageMap_M& a, MessageMap_M& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageMap_M* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageMap_M* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageMap_M* New() const final {
    return CreateMaybeMessage<MessageMap_M>(nullptr);
  }

  MessageMap_M* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageMap_M>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageMap_M& from);
  void MergeFrom(const MessageMap_M& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageMap_M* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MessageMap.M";
  }
  protected:
  explicit MessageMap_M(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerTextFieldNumber = 2,
    kInnerIntFieldNumber = 1,
  };
  // string inner_text = 2;
  void clear_inner_text();
  const std::string& inner_text() const;
  void set_inner_text(const std::string& value);
  void set_inner_text(std::string&& value);
  void set_inner_text(const char* value);
  void set_inner_text(const char* value, size_t size);
  std::string* mutable_inner_text();
  std::string* release_inner_text();
  void set_allocated_inner_text(std::string* inner_text);
  private:
  const std::string& _internal_inner_text() const;
  void _internal_set_inner_text(const std::string& value);
  std::string* _internal_mutable_inner_text();
  public:

  // int32 inner_int = 1;
  void clear_inner_int();
  ::PROTOBUF_NAMESPACE_ID::int32 inner_int() const;
  void set_inner_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inner_int() const;
  void _internal_set_inner_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MessageMap.M)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_text_;
  ::PROTOBUF_NAMESPACE_ID::int32 inner_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class MessageMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageMap_MapEntry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MessageMap_M,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageMap_MapEntry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MessageMap_M,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MessageMap_MapEntry_DoNotUse();
  explicit MessageMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MessageMap_MapEntry_DoNotUse& other);
  static const MessageMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MessageMap_MapEntry_DoNotUse*>(&_MessageMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MessageMap.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class MessageMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MessageMap) */ {
 public:
  inline MessageMap() : MessageMap(nullptr) {}
  virtual ~MessageMap();

  MessageMap(const MessageMap& from);
  MessageMap(MessageMap&& from) noexcept
    : MessageMap() {
    *this = ::std::move(from);
  }

  inline MessageMap& operator=(const MessageMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageMap& operator=(MessageMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageMap* internal_default_instance() {
    return reinterpret_cast<const MessageMap*>(
               &_MessageMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MessageMap& a, MessageMap& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageMap* New() const final {
    return CreateMaybeMessage<MessageMap>(nullptr);
  }

  MessageMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageMap& from);
  void MergeFrom(const MessageMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MessageMap";
  }
  protected:
  explicit MessageMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageMap_M M;

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MessageMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MessageMap_MapEntry_DoNotUse,
      std::string, ::proto_util_converter::testing::MessageMap_M,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// -------------------------------------------------------------------

class DoubleValueMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DoubleValueMessage) */ {
 public:
  inline DoubleValueMessage() : DoubleValueMessage(nullptr) {}
  virtual ~DoubleValueMessage();

  DoubleValueMessage(const DoubleValueMessage& from);
  DoubleValueMessage(DoubleValueMessage&& from) noexcept
    : DoubleValueMessage() {
    *this = ::std::move(from);
  }

  inline DoubleValueMessage& operator=(const DoubleValueMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleValueMessage& operator=(DoubleValueMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleValueMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleValueMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleValueMessage*>(
               &_DoubleValueMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DoubleValueMessage& a, DoubleValueMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleValueMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleValueMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleValueMessage* New() const final {
    return CreateMaybeMessage<DoubleValueMessage>(nullptr);
  }

  DoubleValueMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleValueMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleValueMessage& from);
  void MergeFrom(const DoubleValueMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleValueMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DoubleValueMessage";
  }
  protected:
  explicit DoubleValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
  };
  // .google.protobuf.DoubleValue double = 1;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& double_() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_double_();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_double_();
  void set_allocated_double_(PROTOBUF_NAMESPACE_ID::DoubleValue* double_);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_double_() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_double_();
  public:
  void unsafe_arena_set_allocated_double_(
      PROTOBUF_NAMESPACE_ID::DoubleValue* double_);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_double_();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DoubleValueMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* double__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DefaultValueTestCases

// .proto_util_converter.testing.DoubleMessage empty_double = 1;
inline bool DefaultValueTestCases::_internal_has_empty_double() const {
  return this != internal_default_instance() && empty_double_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_double() const {
  return _internal_has_empty_double();
}
inline void DefaultValueTestCases::clear_empty_double() {
  if (GetArena() == nullptr && empty_double_ != nullptr) {
    delete empty_double_;
  }
  empty_double_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_empty_double() const {
  const ::proto_util_converter::testing::DoubleMessage* p = empty_double_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::empty_double() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_double)
  return _internal_empty_double();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_double(
    ::proto_util_converter::testing::DoubleMessage* empty_double) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_double_);
  }
  empty_double_ = empty_double;
  if (empty_double) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_double)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_empty_double() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = empty_double_;
  empty_double_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_empty_double() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_double)
  
  ::proto_util_converter::testing::DoubleMessage* temp = empty_double_;
  empty_double_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_empty_double() {
  
  if (empty_double_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    empty_double_ = p;
  }
  return empty_double_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_empty_double() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_double)
  return _internal_mutable_empty_double();
}
inline void DefaultValueTestCases::set_allocated_empty_double(::proto_util_converter::testing::DoubleMessage* empty_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_double_;
  }
  if (empty_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_double);
    if (message_arena != submessage_arena) {
      empty_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_double, submessage_arena);
    }
    
  } else {
    
  }
  empty_double_ = empty_double;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_double)
}

// .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
inline bool DefaultValueTestCases::_internal_has_double_with_default_value() const {
  return this != internal_default_instance() && double_with_default_value_ != nullptr;
}
inline bool DefaultValueTestCases::has_double_with_default_value() const {
  return _internal_has_double_with_default_value();
}
inline void DefaultValueTestCases::clear_double_with_default_value() {
  if (GetArena() == nullptr && double_with_default_value_ != nullptr) {
    delete double_with_default_value_;
  }
  double_with_default_value_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_double_with_default_value() const {
  const ::proto_util_converter::testing::DoubleMessage* p = double_with_default_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::double_with_default_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.double_with_default_value)
  return _internal_double_with_default_value();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_double_with_default_value(
    ::proto_util_converter::testing::DoubleMessage* double_with_default_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_with_default_value_);
  }
  double_with_default_value_ = double_with_default_value;
  if (double_with_default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_with_default_value)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_double_with_default_value() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_with_default_value_;
  double_with_default_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_double_with_default_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.double_with_default_value)
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_with_default_value_;
  double_with_default_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_double_with_default_value() {
  
  if (double_with_default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    double_with_default_value_ = p;
  }
  return double_with_default_value_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_double_with_default_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.double_with_default_value)
  return _internal_mutable_double_with_default_value();
}
inline void DefaultValueTestCases::set_allocated_double_with_default_value(::proto_util_converter::testing::DoubleMessage* double_with_default_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_with_default_value_;
  }
  if (double_with_default_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_with_default_value);
    if (message_arena != submessage_arena) {
      double_with_default_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_with_default_value, submessage_arena);
    }
    
  } else {
    
  }
  double_with_default_value_ = double_with_default_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_with_default_value)
}

// .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
inline bool DefaultValueTestCases::_internal_has_double_with_nondefault_value() const {
  return this != internal_default_instance() && double_with_nondefault_value_ != nullptr;
}
inline bool DefaultValueTestCases::has_double_with_nondefault_value() const {
  return _internal_has_double_with_nondefault_value();
}
inline void DefaultValueTestCases::clear_double_with_nondefault_value() {
  if (GetArena() == nullptr && double_with_nondefault_value_ != nullptr) {
    delete double_with_nondefault_value_;
  }
  double_with_nondefault_value_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_double_with_nondefault_value() const {
  const ::proto_util_converter::testing::DoubleMessage* p = double_with_nondefault_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::double_with_nondefault_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.double_with_nondefault_value)
  return _internal_double_with_nondefault_value();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_double_with_nondefault_value(
    ::proto_util_converter::testing::DoubleMessage* double_with_nondefault_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_with_nondefault_value_);
  }
  double_with_nondefault_value_ = double_with_nondefault_value;
  if (double_with_nondefault_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_with_nondefault_value)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_double_with_nondefault_value() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_with_nondefault_value_;
  double_with_nondefault_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_double_with_nondefault_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.double_with_nondefault_value)
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_with_nondefault_value_;
  double_with_nondefault_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_double_with_nondefault_value() {
  
  if (double_with_nondefault_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    double_with_nondefault_value_ = p;
  }
  return double_with_nondefault_value_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_double_with_nondefault_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.double_with_nondefault_value)
  return _internal_mutable_double_with_nondefault_value();
}
inline void DefaultValueTestCases::set_allocated_double_with_nondefault_value(::proto_util_converter::testing::DoubleMessage* double_with_nondefault_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_with_nondefault_value_;
  }
  if (double_with_nondefault_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_with_nondefault_value);
    if (message_arena != submessage_arena) {
      double_with_nondefault_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_with_nondefault_value, submessage_arena);
    }
    
  } else {
    
  }
  double_with_nondefault_value_ = double_with_nondefault_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_with_nondefault_value)
}

// .proto_util_converter.testing.DoubleMessage repeated_double = 4;
inline bool DefaultValueTestCases::_internal_has_repeated_double() const {
  return this != internal_default_instance() && repeated_double_ != nullptr;
}
inline bool DefaultValueTestCases::has_repeated_double() const {
  return _internal_has_repeated_double();
}
inline void DefaultValueTestCases::clear_repeated_double() {
  if (GetArena() == nullptr && repeated_double_ != nullptr) {
    delete repeated_double_;
  }
  repeated_double_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_repeated_double() const {
  const ::proto_util_converter::testing::DoubleMessage* p = repeated_double_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::repeated_double() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.repeated_double)
  return _internal_repeated_double();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_repeated_double(
    ::proto_util_converter::testing::DoubleMessage* repeated_double) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(repeated_double_);
  }
  repeated_double_ = repeated_double;
  if (repeated_double) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.repeated_double)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_repeated_double() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = repeated_double_;
  repeated_double_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_repeated_double() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.repeated_double)
  
  ::proto_util_converter::testing::DoubleMessage* temp = repeated_double_;
  repeated_double_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_repeated_double() {
  
  if (repeated_double_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    repeated_double_ = p;
  }
  return repeated_double_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.repeated_double)
  return _internal_mutable_repeated_double();
}
inline void DefaultValueTestCases::set_allocated_repeated_double(::proto_util_converter::testing::DoubleMessage* repeated_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete repeated_double_;
  }
  if (repeated_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(repeated_double);
    if (message_arena != submessage_arena) {
      repeated_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_double, submessage_arena);
    }
    
  } else {
    
  }
  repeated_double_ = repeated_double;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.repeated_double)
}

// .proto_util_converter.testing.DoubleMessage nested_message = 5;
inline bool DefaultValueTestCases::_internal_has_nested_message() const {
  return this != internal_default_instance() && nested_message_ != nullptr;
}
inline bool DefaultValueTestCases::has_nested_message() const {
  return _internal_has_nested_message();
}
inline void DefaultValueTestCases::clear_nested_message() {
  if (GetArena() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_nested_message() const {
  const ::proto_util_converter::testing::DoubleMessage* p = nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::nested_message() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.nested_message)
  return _internal_nested_message();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_nested_message(
    ::proto_util_converter::testing::DoubleMessage* nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nested_message_);
  }
  nested_message_ = nested_message;
  if (nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.nested_message)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_nested_message() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = nested_message_;
  nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_nested_message() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.nested_message)
  
  ::proto_util_converter::testing::DoubleMessage* temp = nested_message_;
  nested_message_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_nested_message() {
  
  if (nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    nested_message_ = p;
  }
  return nested_message_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_nested_message() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.nested_message)
  return _internal_mutable_nested_message();
}
inline void DefaultValueTestCases::set_allocated_nested_message(::proto_util_converter::testing::DoubleMessage* nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nested_message_;
  }
  if (nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_message);
    if (message_arena != submessage_arena) {
      nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_message, submessage_arena);
    }
    
  } else {
    
  }
  nested_message_ = nested_message;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.nested_message)
}

// .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
inline bool DefaultValueTestCases::_internal_has_repeated_nested_message() const {
  return this != internal_default_instance() && repeated_nested_message_ != nullptr;
}
inline bool DefaultValueTestCases::has_repeated_nested_message() const {
  return _internal_has_repeated_nested_message();
}
inline void DefaultValueTestCases::clear_repeated_nested_message() {
  if (GetArena() == nullptr && repeated_nested_message_ != nullptr) {
    delete repeated_nested_message_;
  }
  repeated_nested_message_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_repeated_nested_message() const {
  const ::proto_util_converter::testing::DoubleMessage* p = repeated_nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::repeated_nested_message() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.repeated_nested_message)
  return _internal_repeated_nested_message();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_repeated_nested_message(
    ::proto_util_converter::testing::DoubleMessage* repeated_nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(repeated_nested_message_);
  }
  repeated_nested_message_ = repeated_nested_message;
  if (repeated_nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.repeated_nested_message)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_repeated_nested_message() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = repeated_nested_message_;
  repeated_nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_repeated_nested_message() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.repeated_nested_message)
  
  ::proto_util_converter::testing::DoubleMessage* temp = repeated_nested_message_;
  repeated_nested_message_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_repeated_nested_message() {
  
  if (repeated_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    repeated_nested_message_ = p;
  }
  return repeated_nested_message_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.repeated_nested_message)
  return _internal_mutable_repeated_nested_message();
}
inline void DefaultValueTestCases::set_allocated_repeated_nested_message(::proto_util_converter::testing::DoubleMessage* repeated_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete repeated_nested_message_;
  }
  if (repeated_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(repeated_nested_message);
    if (message_arena != submessage_arena) {
      repeated_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_nested_message, submessage_arena);
    }
    
  } else {
    
  }
  repeated_nested_message_ = repeated_nested_message;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.repeated_nested_message)
}

// .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
inline bool DefaultValueTestCases::_internal_has_double_message_with_oneof() const {
  return this != internal_default_instance() && double_message_with_oneof_ != nullptr;
}
inline bool DefaultValueTestCases::has_double_message_with_oneof() const {
  return _internal_has_double_message_with_oneof();
}
inline void DefaultValueTestCases::clear_double_message_with_oneof() {
  if (GetArena() == nullptr && double_message_with_oneof_ != nullptr) {
    delete double_message_with_oneof_;
  }
  double_message_with_oneof_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::_internal_double_message_with_oneof() const {
  const ::proto_util_converter::testing::DoubleMessage* p = double_message_with_oneof_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DefaultValueTestCases::double_message_with_oneof() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.double_message_with_oneof)
  return _internal_double_message_with_oneof();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_double_message_with_oneof(
    ::proto_util_converter::testing::DoubleMessage* double_message_with_oneof) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_message_with_oneof_);
  }
  double_message_with_oneof_ = double_message_with_oneof;
  if (double_message_with_oneof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_message_with_oneof)
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::release_double_message_with_oneof() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_message_with_oneof_;
  double_message_with_oneof_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::unsafe_arena_release_double_message_with_oneof() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.double_message_with_oneof)
  
  ::proto_util_converter::testing::DoubleMessage* temp = double_message_with_oneof_;
  double_message_with_oneof_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::_internal_mutable_double_message_with_oneof() {
  
  if (double_message_with_oneof_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    double_message_with_oneof_ = p;
  }
  return double_message_with_oneof_;
}
inline ::proto_util_converter::testing::DoubleMessage* DefaultValueTestCases::mutable_double_message_with_oneof() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.double_message_with_oneof)
  return _internal_mutable_double_message_with_oneof();
}
inline void DefaultValueTestCases::set_allocated_double_message_with_oneof(::proto_util_converter::testing::DoubleMessage* double_message_with_oneof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_message_with_oneof_;
  }
  if (double_message_with_oneof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_message_with_oneof);
    if (message_arena != submessage_arena) {
      double_message_with_oneof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_message_with_oneof, submessage_arena);
    }
    
  } else {
    
  }
  double_message_with_oneof_ = double_message_with_oneof;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_message_with_oneof)
}

// .proto_util_converter.testing.StructMessage empty_struct = 201;
inline bool DefaultValueTestCases::_internal_has_empty_struct() const {
  return this != internal_default_instance() && empty_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_struct() const {
  return _internal_has_empty_struct();
}
inline void DefaultValueTestCases::clear_empty_struct() {
  if (GetArena() == nullptr && empty_struct_ != nullptr) {
    delete empty_struct_;
  }
  empty_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_empty_struct() const {
  const ::proto_util_converter::testing::StructMessage* p = empty_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::empty_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_struct)
  return _internal_empty_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_struct(
    ::proto_util_converter::testing::StructMessage* empty_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_struct_);
  }
  empty_struct_ = empty_struct;
  if (empty_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_struct)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_empty_struct() {
  
  ::proto_util_converter::testing::StructMessage* temp = empty_struct_;
  empty_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_struct)
  
  ::proto_util_converter::testing::StructMessage* temp = empty_struct_;
  empty_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_empty_struct() {
  
  if (empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    empty_struct_ = p;
  }
  return empty_struct_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_empty_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_struct)
  return _internal_mutable_empty_struct();
}
inline void DefaultValueTestCases::set_allocated_empty_struct(::proto_util_converter::testing::StructMessage* empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_struct_;
  }
  if (empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_struct);
    if (message_arena != submessage_arena) {
      empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  empty_struct_ = empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_struct)
}

// .proto_util_converter.testing.StructMessage empty_struct2 = 202;
inline bool DefaultValueTestCases::_internal_has_empty_struct2() const {
  return this != internal_default_instance() && empty_struct2_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_struct2() const {
  return _internal_has_empty_struct2();
}
inline void DefaultValueTestCases::clear_empty_struct2() {
  if (GetArena() == nullptr && empty_struct2_ != nullptr) {
    delete empty_struct2_;
  }
  empty_struct2_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_empty_struct2() const {
  const ::proto_util_converter::testing::StructMessage* p = empty_struct2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::empty_struct2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_struct2)
  return _internal_empty_struct2();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_struct2(
    ::proto_util_converter::testing::StructMessage* empty_struct2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_struct2_);
  }
  empty_struct2_ = empty_struct2;
  if (empty_struct2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_struct2)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_empty_struct2() {
  
  ::proto_util_converter::testing::StructMessage* temp = empty_struct2_;
  empty_struct2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_empty_struct2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_struct2)
  
  ::proto_util_converter::testing::StructMessage* temp = empty_struct2_;
  empty_struct2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_empty_struct2() {
  
  if (empty_struct2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    empty_struct2_ = p;
  }
  return empty_struct2_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_empty_struct2() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_struct2)
  return _internal_mutable_empty_struct2();
}
inline void DefaultValueTestCases::set_allocated_empty_struct2(::proto_util_converter::testing::StructMessage* empty_struct2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_struct2_;
  }
  if (empty_struct2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_struct2);
    if (message_arena != submessage_arena) {
      empty_struct2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_struct2, submessage_arena);
    }
    
  } else {
    
  }
  empty_struct2_ = empty_struct2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_struct2)
}

// .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
inline bool DefaultValueTestCases::_internal_has_struct_with_null_value() const {
  return this != internal_default_instance() && struct_with_null_value_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_null_value() const {
  return _internal_has_struct_with_null_value();
}
inline void DefaultValueTestCases::clear_struct_with_null_value() {
  if (GetArena() == nullptr && struct_with_null_value_ != nullptr) {
    delete struct_with_null_value_;
  }
  struct_with_null_value_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_null_value() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_null_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_null_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_null_value)
  return _internal_struct_with_null_value();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_null_value(
    ::proto_util_converter::testing::StructMessage* struct_with_null_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_null_value_);
  }
  struct_with_null_value_ = struct_with_null_value;
  if (struct_with_null_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_null_value)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_null_value() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_null_value_;
  struct_with_null_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_null_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_null_value)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_null_value_;
  struct_with_null_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_null_value() {
  
  if (struct_with_null_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_null_value_ = p;
  }
  return struct_with_null_value_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_null_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_null_value)
  return _internal_mutable_struct_with_null_value();
}
inline void DefaultValueTestCases::set_allocated_struct_with_null_value(::proto_util_converter::testing::StructMessage* struct_with_null_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_null_value_;
  }
  if (struct_with_null_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_null_value);
    if (message_arena != submessage_arena) {
      struct_with_null_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_null_value, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_null_value_ = struct_with_null_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_null_value)
}

// .proto_util_converter.testing.StructMessage struct_with_values = 204;
inline bool DefaultValueTestCases::_internal_has_struct_with_values() const {
  return this != internal_default_instance() && struct_with_values_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_values() const {
  return _internal_has_struct_with_values();
}
inline void DefaultValueTestCases::clear_struct_with_values() {
  if (GetArena() == nullptr && struct_with_values_ != nullptr) {
    delete struct_with_values_;
  }
  struct_with_values_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_values() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_values() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_values)
  return _internal_struct_with_values();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_values(
    ::proto_util_converter::testing::StructMessage* struct_with_values) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_values_);
  }
  struct_with_values_ = struct_with_values;
  if (struct_with_values) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_values)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_values() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_values_;
  struct_with_values_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_values() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_values)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_values_;
  struct_with_values_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_values() {
  
  if (struct_with_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_values_ = p;
  }
  return struct_with_values_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_values() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_values)
  return _internal_mutable_struct_with_values();
}
inline void DefaultValueTestCases::set_allocated_struct_with_values(::proto_util_converter::testing::StructMessage* struct_with_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_values_;
  }
  if (struct_with_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_values);
    if (message_arena != submessage_arena) {
      struct_with_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_values, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_values_ = struct_with_values;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_values)
}

// .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
inline bool DefaultValueTestCases::_internal_has_struct_with_nested_struct() const {
  return this != internal_default_instance() && struct_with_nested_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_nested_struct() const {
  return _internal_has_struct_with_nested_struct();
}
inline void DefaultValueTestCases::clear_struct_with_nested_struct() {
  if (GetArena() == nullptr && struct_with_nested_struct_ != nullptr) {
    delete struct_with_nested_struct_;
  }
  struct_with_nested_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_nested_struct() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_nested_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_nested_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_struct)
  return _internal_struct_with_nested_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_nested_struct(
    ::proto_util_converter::testing::StructMessage* struct_with_nested_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_nested_struct_);
  }
  struct_with_nested_struct_ = struct_with_nested_struct;
  if (struct_with_nested_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_struct)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_nested_struct() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_nested_struct_;
  struct_with_nested_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_nested_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_struct)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_nested_struct_;
  struct_with_nested_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_nested_struct() {
  
  if (struct_with_nested_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_nested_struct_ = p;
  }
  return struct_with_nested_struct_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_nested_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_struct)
  return _internal_mutable_struct_with_nested_struct();
}
inline void DefaultValueTestCases::set_allocated_struct_with_nested_struct(::proto_util_converter::testing::StructMessage* struct_with_nested_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_nested_struct_;
  }
  if (struct_with_nested_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_nested_struct);
    if (message_arena != submessage_arena) {
      struct_with_nested_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_nested_struct, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_nested_struct_ = struct_with_nested_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_struct)
}

// .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
inline bool DefaultValueTestCases::_internal_has_struct_with_nested_list() const {
  return this != internal_default_instance() && struct_with_nested_list_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_nested_list() const {
  return _internal_has_struct_with_nested_list();
}
inline void DefaultValueTestCases::clear_struct_with_nested_list() {
  if (GetArena() == nullptr && struct_with_nested_list_ != nullptr) {
    delete struct_with_nested_list_;
  }
  struct_with_nested_list_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_nested_list() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_nested_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_nested_list() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_list)
  return _internal_struct_with_nested_list();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_nested_list(
    ::proto_util_converter::testing::StructMessage* struct_with_nested_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_nested_list_);
  }
  struct_with_nested_list_ = struct_with_nested_list;
  if (struct_with_nested_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_list)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_nested_list() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_nested_list_;
  struct_with_nested_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_nested_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_list)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_nested_list_;
  struct_with_nested_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_nested_list() {
  
  if (struct_with_nested_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_nested_list_ = p;
  }
  return struct_with_nested_list_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_nested_list() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_list)
  return _internal_mutable_struct_with_nested_list();
}
inline void DefaultValueTestCases::set_allocated_struct_with_nested_list(::proto_util_converter::testing::StructMessage* struct_with_nested_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_nested_list_;
  }
  if (struct_with_nested_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_nested_list);
    if (message_arena != submessage_arena) {
      struct_with_nested_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_nested_list, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_nested_list_ = struct_with_nested_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_nested_list)
}

// .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
inline bool DefaultValueTestCases::_internal_has_struct_with_list_of_nulls() const {
  return this != internal_default_instance() && struct_with_list_of_nulls_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_list_of_nulls() const {
  return _internal_has_struct_with_list_of_nulls();
}
inline void DefaultValueTestCases::clear_struct_with_list_of_nulls() {
  if (GetArena() == nullptr && struct_with_list_of_nulls_ != nullptr) {
    delete struct_with_list_of_nulls_;
  }
  struct_with_list_of_nulls_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_list_of_nulls() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_list_of_nulls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_list_of_nulls() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_nulls)
  return _internal_struct_with_list_of_nulls();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_list_of_nulls(
    ::proto_util_converter::testing::StructMessage* struct_with_list_of_nulls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_list_of_nulls_);
  }
  struct_with_list_of_nulls_ = struct_with_list_of_nulls;
  if (struct_with_list_of_nulls) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_nulls)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_list_of_nulls() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_nulls_;
  struct_with_list_of_nulls_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_list_of_nulls() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_nulls)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_nulls_;
  struct_with_list_of_nulls_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_list_of_nulls() {
  
  if (struct_with_list_of_nulls_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_list_of_nulls_ = p;
  }
  return struct_with_list_of_nulls_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_list_of_nulls() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_nulls)
  return _internal_mutable_struct_with_list_of_nulls();
}
inline void DefaultValueTestCases::set_allocated_struct_with_list_of_nulls(::proto_util_converter::testing::StructMessage* struct_with_list_of_nulls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_list_of_nulls_;
  }
  if (struct_with_list_of_nulls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_list_of_nulls);
    if (message_arena != submessage_arena) {
      struct_with_list_of_nulls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_nulls, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_nulls_ = struct_with_list_of_nulls;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_nulls)
}

// .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
inline bool DefaultValueTestCases::_internal_has_struct_with_list_of_lists() const {
  return this != internal_default_instance() && struct_with_list_of_lists_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_list_of_lists() const {
  return _internal_has_struct_with_list_of_lists();
}
inline void DefaultValueTestCases::clear_struct_with_list_of_lists() {
  if (GetArena() == nullptr && struct_with_list_of_lists_ != nullptr) {
    delete struct_with_list_of_lists_;
  }
  struct_with_list_of_lists_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_list_of_lists() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_list_of_lists_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_list_of_lists() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_lists)
  return _internal_struct_with_list_of_lists();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_list_of_lists(
    ::proto_util_converter::testing::StructMessage* struct_with_list_of_lists) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_list_of_lists_);
  }
  struct_with_list_of_lists_ = struct_with_list_of_lists;
  if (struct_with_list_of_lists) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_lists)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_list_of_lists() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_lists_;
  struct_with_list_of_lists_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_list_of_lists() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_lists)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_lists_;
  struct_with_list_of_lists_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_list_of_lists() {
  
  if (struct_with_list_of_lists_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_list_of_lists_ = p;
  }
  return struct_with_list_of_lists_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_list_of_lists() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_lists)
  return _internal_mutable_struct_with_list_of_lists();
}
inline void DefaultValueTestCases::set_allocated_struct_with_list_of_lists(::proto_util_converter::testing::StructMessage* struct_with_list_of_lists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_list_of_lists_;
  }
  if (struct_with_list_of_lists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_list_of_lists);
    if (message_arena != submessage_arena) {
      struct_with_list_of_lists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_lists, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_lists_ = struct_with_list_of_lists;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_lists)
}

// .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
inline bool DefaultValueTestCases::_internal_has_struct_with_list_of_structs() const {
  return this != internal_default_instance() && struct_with_list_of_structs_ != nullptr;
}
inline bool DefaultValueTestCases::has_struct_with_list_of_structs() const {
  return _internal_has_struct_with_list_of_structs();
}
inline void DefaultValueTestCases::clear_struct_with_list_of_structs() {
  if (GetArena() == nullptr && struct_with_list_of_structs_ != nullptr) {
    delete struct_with_list_of_structs_;
  }
  struct_with_list_of_structs_ = nullptr;
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::_internal_struct_with_list_of_structs() const {
  const ::proto_util_converter::testing::StructMessage* p = struct_with_list_of_structs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructMessage*>(
      &::proto_util_converter::testing::_StructMessage_default_instance_);
}
inline const ::proto_util_converter::testing::StructMessage& DefaultValueTestCases::struct_with_list_of_structs() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_structs)
  return _internal_struct_with_list_of_structs();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_struct_with_list_of_structs(
    ::proto_util_converter::testing::StructMessage* struct_with_list_of_structs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_with_list_of_structs_);
  }
  struct_with_list_of_structs_ = struct_with_list_of_structs;
  if (struct_with_list_of_structs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_structs)
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::release_struct_with_list_of_structs() {
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_structs_;
  struct_with_list_of_structs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::unsafe_arena_release_struct_with_list_of_structs() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_structs)
  
  ::proto_util_converter::testing::StructMessage* temp = struct_with_list_of_structs_;
  struct_with_list_of_structs_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::_internal_mutable_struct_with_list_of_structs() {
  
  if (struct_with_list_of_structs_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructMessage>(GetArena());
    struct_with_list_of_structs_ = p;
  }
  return struct_with_list_of_structs_;
}
inline ::proto_util_converter::testing::StructMessage* DefaultValueTestCases::mutable_struct_with_list_of_structs() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_structs)
  return _internal_mutable_struct_with_list_of_structs();
}
inline void DefaultValueTestCases::set_allocated_struct_with_list_of_structs(::proto_util_converter::testing::StructMessage* struct_with_list_of_structs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_with_list_of_structs_;
  }
  if (struct_with_list_of_structs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_with_list_of_structs);
    if (message_arena != submessage_arena) {
      struct_with_list_of_structs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_structs, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_structs_ = struct_with_list_of_structs;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.struct_with_list_of_structs)
}

// .google.protobuf.Struct top_level_struct = 210;
inline bool DefaultValueTestCases::_internal_has_top_level_struct() const {
  return this != internal_default_instance() && top_level_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_struct() const {
  return _internal_has_top_level_struct();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DefaultValueTestCases::_internal_top_level_struct() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = top_level_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& DefaultValueTestCases::top_level_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_struct)
  return _internal_top_level_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_struct(
    PROTOBUF_NAMESPACE_ID::Struct* top_level_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_);
  }
  top_level_struct_ = top_level_struct;
  if (top_level_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_struct)
}
inline PROTOBUF_NAMESPACE_ID::Struct* DefaultValueTestCases::release_top_level_struct() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = top_level_struct_;
  top_level_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DefaultValueTestCases::unsafe_arena_release_top_level_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_struct)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = top_level_struct_;
  top_level_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DefaultValueTestCases::_internal_mutable_top_level_struct() {
  
  if (top_level_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    top_level_struct_ = p;
  }
  return top_level_struct_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* DefaultValueTestCases::mutable_top_level_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_struct)
  return _internal_mutable_top_level_struct();
}
inline void DefaultValueTestCases::set_allocated_top_level_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_);
  }
  if (top_level_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_struct_ = top_level_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_struct)
}

// .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
inline bool DefaultValueTestCases::_internal_has_value_wrapper_simple() const {
  return this != internal_default_instance() && value_wrapper_simple_ != nullptr;
}
inline bool DefaultValueTestCases::has_value_wrapper_simple() const {
  return _internal_has_value_wrapper_simple();
}
inline void DefaultValueTestCases::clear_value_wrapper_simple() {
  if (GetArena() == nullptr && value_wrapper_simple_ != nullptr) {
    delete value_wrapper_simple_;
  }
  value_wrapper_simple_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::_internal_value_wrapper_simple() const {
  const ::proto_util_converter::testing::ValueMessage* p = value_wrapper_simple_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueMessage*>(
      &::proto_util_converter::testing::_ValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::value_wrapper_simple() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_simple)
  return _internal_value_wrapper_simple();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_value_wrapper_simple(
    ::proto_util_converter::testing::ValueMessage* value_wrapper_simple) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_wrapper_simple_);
  }
  value_wrapper_simple_ = value_wrapper_simple;
  if (value_wrapper_simple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_simple)
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::release_value_wrapper_simple() {
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_simple_;
  value_wrapper_simple_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::unsafe_arena_release_value_wrapper_simple() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_simple)
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_simple_;
  value_wrapper_simple_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::_internal_mutable_value_wrapper_simple() {
  
  if (value_wrapper_simple_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueMessage>(GetArena());
    value_wrapper_simple_ = p;
  }
  return value_wrapper_simple_;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::mutable_value_wrapper_simple() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_simple)
  return _internal_mutable_value_wrapper_simple();
}
inline void DefaultValueTestCases::set_allocated_value_wrapper_simple(::proto_util_converter::testing::ValueMessage* value_wrapper_simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_wrapper_simple_;
  }
  if (value_wrapper_simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_wrapper_simple);
    if (message_arena != submessage_arena) {
      value_wrapper_simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_simple, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_simple_ = value_wrapper_simple;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_simple)
}

// .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
inline bool DefaultValueTestCases::_internal_has_value_wrapper_with_struct() const {
  return this != internal_default_instance() && value_wrapper_with_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_value_wrapper_with_struct() const {
  return _internal_has_value_wrapper_with_struct();
}
inline void DefaultValueTestCases::clear_value_wrapper_with_struct() {
  if (GetArena() == nullptr && value_wrapper_with_struct_ != nullptr) {
    delete value_wrapper_with_struct_;
  }
  value_wrapper_with_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::_internal_value_wrapper_with_struct() const {
  const ::proto_util_converter::testing::ValueMessage* p = value_wrapper_with_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueMessage*>(
      &::proto_util_converter::testing::_ValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::value_wrapper_with_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_struct)
  return _internal_value_wrapper_with_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_value_wrapper_with_struct(
    ::proto_util_converter::testing::ValueMessage* value_wrapper_with_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_wrapper_with_struct_);
  }
  value_wrapper_with_struct_ = value_wrapper_with_struct;
  if (value_wrapper_with_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_struct)
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::release_value_wrapper_with_struct() {
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_with_struct_;
  value_wrapper_with_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::unsafe_arena_release_value_wrapper_with_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_struct)
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_with_struct_;
  value_wrapper_with_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::_internal_mutable_value_wrapper_with_struct() {
  
  if (value_wrapper_with_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueMessage>(GetArena());
    value_wrapper_with_struct_ = p;
  }
  return value_wrapper_with_struct_;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::mutable_value_wrapper_with_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_struct)
  return _internal_mutable_value_wrapper_with_struct();
}
inline void DefaultValueTestCases::set_allocated_value_wrapper_with_struct(::proto_util_converter::testing::ValueMessage* value_wrapper_with_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_wrapper_with_struct_;
  }
  if (value_wrapper_with_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_wrapper_with_struct);
    if (message_arena != submessage_arena) {
      value_wrapper_with_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_struct, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_struct_ = value_wrapper_with_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_struct)
}

// .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
inline bool DefaultValueTestCases::_internal_has_value_wrapper_with_list() const {
  return this != internal_default_instance() && value_wrapper_with_list_ != nullptr;
}
inline bool DefaultValueTestCases::has_value_wrapper_with_list() const {
  return _internal_has_value_wrapper_with_list();
}
inline void DefaultValueTestCases::clear_value_wrapper_with_list() {
  if (GetArena() == nullptr && value_wrapper_with_list_ != nullptr) {
    delete value_wrapper_with_list_;
  }
  value_wrapper_with_list_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::_internal_value_wrapper_with_list() const {
  const ::proto_util_converter::testing::ValueMessage* p = value_wrapper_with_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueMessage*>(
      &::proto_util_converter::testing::_ValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::ValueMessage& DefaultValueTestCases::value_wrapper_with_list() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_list)
  return _internal_value_wrapper_with_list();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_value_wrapper_with_list(
    ::proto_util_converter::testing::ValueMessage* value_wrapper_with_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_wrapper_with_list_);
  }
  value_wrapper_with_list_ = value_wrapper_with_list;
  if (value_wrapper_with_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_list)
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::release_value_wrapper_with_list() {
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_with_list_;
  value_wrapper_with_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::unsafe_arena_release_value_wrapper_with_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_list)
  
  ::proto_util_converter::testing::ValueMessage* temp = value_wrapper_with_list_;
  value_wrapper_with_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::_internal_mutable_value_wrapper_with_list() {
  
  if (value_wrapper_with_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueMessage>(GetArena());
    value_wrapper_with_list_ = p;
  }
  return value_wrapper_with_list_;
}
inline ::proto_util_converter::testing::ValueMessage* DefaultValueTestCases::mutable_value_wrapper_with_list() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_list)
  return _internal_mutable_value_wrapper_with_list();
}
inline void DefaultValueTestCases::set_allocated_value_wrapper_with_list(::proto_util_converter::testing::ValueMessage* value_wrapper_with_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_wrapper_with_list_;
  }
  if (value_wrapper_with_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_wrapper_with_list);
    if (message_arena != submessage_arena) {
      value_wrapper_with_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_list, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_list_ = value_wrapper_with_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.value_wrapper_with_list)
}

// .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
inline bool DefaultValueTestCases::_internal_has_list_value_wrapper() const {
  return this != internal_default_instance() && list_value_wrapper_ != nullptr;
}
inline bool DefaultValueTestCases::has_list_value_wrapper() const {
  return _internal_has_list_value_wrapper();
}
inline void DefaultValueTestCases::clear_list_value_wrapper() {
  if (GetArena() == nullptr && list_value_wrapper_ != nullptr) {
    delete list_value_wrapper_;
  }
  list_value_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::ListValueMessage& DefaultValueTestCases::_internal_list_value_wrapper() const {
  const ::proto_util_converter::testing::ListValueMessage* p = list_value_wrapper_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ListValueMessage*>(
      &::proto_util_converter::testing::_ListValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::ListValueMessage& DefaultValueTestCases::list_value_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.list_value_wrapper)
  return _internal_list_value_wrapper();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_list_value_wrapper(
    ::proto_util_converter::testing::ListValueMessage* list_value_wrapper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_value_wrapper_);
  }
  list_value_wrapper_ = list_value_wrapper;
  if (list_value_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.list_value_wrapper)
}
inline ::proto_util_converter::testing::ListValueMessage* DefaultValueTestCases::release_list_value_wrapper() {
  
  ::proto_util_converter::testing::ListValueMessage* temp = list_value_wrapper_;
  list_value_wrapper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::ListValueMessage* DefaultValueTestCases::unsafe_arena_release_list_value_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.list_value_wrapper)
  
  ::proto_util_converter::testing::ListValueMessage* temp = list_value_wrapper_;
  list_value_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ListValueMessage* DefaultValueTestCases::_internal_mutable_list_value_wrapper() {
  
  if (list_value_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ListValueMessage>(GetArena());
    list_value_wrapper_ = p;
  }
  return list_value_wrapper_;
}
inline ::proto_util_converter::testing::ListValueMessage* DefaultValueTestCases::mutable_list_value_wrapper() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.list_value_wrapper)
  return _internal_mutable_list_value_wrapper();
}
inline void DefaultValueTestCases::set_allocated_list_value_wrapper(::proto_util_converter::testing::ListValueMessage* list_value_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_value_wrapper_;
  }
  if (list_value_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_value_wrapper);
    if (message_arena != submessage_arena) {
      list_value_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  list_value_wrapper_ = list_value_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.list_value_wrapper)
}

// .google.protobuf.Value top_level_value_simple = 216;
inline bool DefaultValueTestCases::_internal_has_top_level_value_simple() const {
  return this != internal_default_instance() && top_level_value_simple_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_value_simple() const {
  return _internal_has_top_level_value_simple();
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::_internal_top_level_value_simple() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_simple_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::top_level_value_simple() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_value_simple)
  return _internal_top_level_value_simple();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_value_simple(
    PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_simple_);
  }
  top_level_value_simple_ = top_level_value_simple;
  if (top_level_value_simple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_simple)
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::release_top_level_value_simple() {
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_simple_;
  top_level_value_simple_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::unsafe_arena_release_top_level_value_simple() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_value_simple)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_simple_;
  top_level_value_simple_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::_internal_mutable_top_level_value_simple() {
  
  if (top_level_value_simple_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    top_level_value_simple_ = p;
  }
  return top_level_value_simple_;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::mutable_top_level_value_simple() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_value_simple)
  return _internal_mutable_top_level_value_simple();
}
inline void DefaultValueTestCases::set_allocated_top_level_value_simple(PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_simple_);
  }
  if (top_level_value_simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_simple)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_simple, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_simple_ = top_level_value_simple;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_simple)
}

// .google.protobuf.Value top_level_value_with_struct = 217;
inline bool DefaultValueTestCases::_internal_has_top_level_value_with_struct() const {
  return this != internal_default_instance() && top_level_value_with_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_value_with_struct() const {
  return _internal_has_top_level_value_with_struct();
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::_internal_top_level_value_with_struct() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::top_level_value_with_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_struct)
  return _internal_top_level_value_with_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_value_with_struct(
    PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_struct_);
  }
  top_level_value_with_struct_ = top_level_value_with_struct;
  if (top_level_value_with_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_struct)
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::release_top_level_value_with_struct() {
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_struct_;
  top_level_value_with_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::unsafe_arena_release_top_level_value_with_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_struct)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_struct_;
  top_level_value_with_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::_internal_mutable_top_level_value_with_struct() {
  
  if (top_level_value_with_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    top_level_value_with_struct_ = p;
  }
  return top_level_value_with_struct_;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::mutable_top_level_value_with_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_struct)
  return _internal_mutable_top_level_value_with_struct();
}
inline void DefaultValueTestCases::set_allocated_top_level_value_with_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_struct_);
  }
  if (top_level_value_with_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_struct_ = top_level_value_with_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_struct)
}

// .google.protobuf.Value top_level_value_with_list = 218;
inline bool DefaultValueTestCases::_internal_has_top_level_value_with_list() const {
  return this != internal_default_instance() && top_level_value_with_list_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_value_with_list() const {
  return _internal_has_top_level_value_with_list();
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::_internal_top_level_value_with_list() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_list_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& DefaultValueTestCases::top_level_value_with_list() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_list)
  return _internal_top_level_value_with_list();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_value_with_list(
    PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list_);
  }
  top_level_value_with_list_ = top_level_value_with_list;
  if (top_level_value_with_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_list)
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::release_top_level_value_with_list() {
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_list_;
  top_level_value_with_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::unsafe_arena_release_top_level_value_with_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_list)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_list_;
  top_level_value_with_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::_internal_mutable_top_level_value_with_list() {
  
  if (top_level_value_with_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    top_level_value_with_list_ = p;
  }
  return top_level_value_with_list_;
}
inline PROTOBUF_NAMESPACE_ID::Value* DefaultValueTestCases::mutable_top_level_value_with_list() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_list)
  return _internal_mutable_top_level_value_with_list();
}
inline void DefaultValueTestCases::set_allocated_top_level_value_with_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list_);
  }
  if (top_level_value_with_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_list, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_list_ = top_level_value_with_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_value_with_list)
}

// .google.protobuf.ListValue top_level_listvalue = 219;
inline bool DefaultValueTestCases::_internal_has_top_level_listvalue() const {
  return this != internal_default_instance() && top_level_listvalue_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_listvalue() const {
  return _internal_has_top_level_listvalue();
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& DefaultValueTestCases::_internal_top_level_listvalue() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = top_level_listvalue_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& DefaultValueTestCases::top_level_listvalue() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_listvalue)
  return _internal_top_level_listvalue();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_listvalue(
    PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue_);
  }
  top_level_listvalue_ = top_level_listvalue;
  if (top_level_listvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_listvalue)
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultValueTestCases::release_top_level_listvalue() {
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = top_level_listvalue_;
  top_level_listvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultValueTestCases::unsafe_arena_release_top_level_listvalue() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_listvalue)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = top_level_listvalue_;
  top_level_listvalue_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultValueTestCases::_internal_mutable_top_level_listvalue() {
  
  if (top_level_listvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArena());
    top_level_listvalue_ = p;
  }
  return top_level_listvalue_;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultValueTestCases::mutable_top_level_listvalue() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_listvalue)
  return _internal_mutable_top_level_listvalue();
}
inline void DefaultValueTestCases::set_allocated_top_level_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue_);
  }
  if (top_level_listvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_listvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_listvalue, submessage_arena);
    }
    
  } else {
    
  }
  top_level_listvalue_ = top_level_listvalue;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_listvalue)
}

// .proto_util_converter.testing.AnyMessage empty_any = 301;
inline bool DefaultValueTestCases::_internal_has_empty_any() const {
  return this != internal_default_instance() && empty_any_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_any() const {
  return _internal_has_empty_any();
}
inline void DefaultValueTestCases::clear_empty_any() {
  if (GetArena() == nullptr && empty_any_ != nullptr) {
    delete empty_any_;
  }
  empty_any_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_empty_any() const {
  const ::proto_util_converter::testing::AnyMessage* p = empty_any_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::empty_any() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_any)
  return _internal_empty_any();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_any(
    ::proto_util_converter::testing::AnyMessage* empty_any) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_any_);
  }
  empty_any_ = empty_any;
  if (empty_any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_any)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_empty_any() {
  
  ::proto_util_converter::testing::AnyMessage* temp = empty_any_;
  empty_any_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_empty_any() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_any)
  
  ::proto_util_converter::testing::AnyMessage* temp = empty_any_;
  empty_any_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_empty_any() {
  
  if (empty_any_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    empty_any_ = p;
  }
  return empty_any_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_empty_any() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_any)
  return _internal_mutable_empty_any();
}
inline void DefaultValueTestCases::set_allocated_empty_any(::proto_util_converter::testing::AnyMessage* empty_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_any_;
  }
  if (empty_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_any);
    if (message_arena != submessage_arena) {
      empty_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_any, submessage_arena);
    }
    
  } else {
    
  }
  empty_any_ = empty_any;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_any)
}

// .proto_util_converter.testing.AnyMessage type_only_any = 302;
inline bool DefaultValueTestCases::_internal_has_type_only_any() const {
  return this != internal_default_instance() && type_only_any_ != nullptr;
}
inline bool DefaultValueTestCases::has_type_only_any() const {
  return _internal_has_type_only_any();
}
inline void DefaultValueTestCases::clear_type_only_any() {
  if (GetArena() == nullptr && type_only_any_ != nullptr) {
    delete type_only_any_;
  }
  type_only_any_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_type_only_any() const {
  const ::proto_util_converter::testing::AnyMessage* p = type_only_any_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::type_only_any() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.type_only_any)
  return _internal_type_only_any();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_type_only_any(
    ::proto_util_converter::testing::AnyMessage* type_only_any) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_only_any_);
  }
  type_only_any_ = type_only_any;
  if (type_only_any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.type_only_any)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_type_only_any() {
  
  ::proto_util_converter::testing::AnyMessage* temp = type_only_any_;
  type_only_any_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_type_only_any() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.type_only_any)
  
  ::proto_util_converter::testing::AnyMessage* temp = type_only_any_;
  type_only_any_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_type_only_any() {
  
  if (type_only_any_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    type_only_any_ = p;
  }
  return type_only_any_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_type_only_any() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.type_only_any)
  return _internal_mutable_type_only_any();
}
inline void DefaultValueTestCases::set_allocated_type_only_any(::proto_util_converter::testing::AnyMessage* type_only_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_only_any_;
  }
  if (type_only_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type_only_any);
    if (message_arena != submessage_arena) {
      type_only_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_only_any, submessage_arena);
    }
    
  } else {
    
  }
  type_only_any_ = type_only_any;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.type_only_any)
}

// .proto_util_converter.testing.AnyMessage recursive_any = 303;
inline bool DefaultValueTestCases::_internal_has_recursive_any() const {
  return this != internal_default_instance() && recursive_any_ != nullptr;
}
inline bool DefaultValueTestCases::has_recursive_any() const {
  return _internal_has_recursive_any();
}
inline void DefaultValueTestCases::clear_recursive_any() {
  if (GetArena() == nullptr && recursive_any_ != nullptr) {
    delete recursive_any_;
  }
  recursive_any_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_recursive_any() const {
  const ::proto_util_converter::testing::AnyMessage* p = recursive_any_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::recursive_any() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.recursive_any)
  return _internal_recursive_any();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_recursive_any(
    ::proto_util_converter::testing::AnyMessage* recursive_any) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recursive_any_);
  }
  recursive_any_ = recursive_any;
  if (recursive_any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.recursive_any)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_recursive_any() {
  
  ::proto_util_converter::testing::AnyMessage* temp = recursive_any_;
  recursive_any_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_recursive_any() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.recursive_any)
  
  ::proto_util_converter::testing::AnyMessage* temp = recursive_any_;
  recursive_any_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_recursive_any() {
  
  if (recursive_any_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    recursive_any_ = p;
  }
  return recursive_any_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_recursive_any() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.recursive_any)
  return _internal_mutable_recursive_any();
}
inline void DefaultValueTestCases::set_allocated_recursive_any(::proto_util_converter::testing::AnyMessage* recursive_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recursive_any_;
  }
  if (recursive_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recursive_any);
    if (message_arena != submessage_arena) {
      recursive_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recursive_any, submessage_arena);
    }
    
  } else {
    
  }
  recursive_any_ = recursive_any;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.recursive_any)
}

// .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
inline bool DefaultValueTestCases::_internal_has_any_with_message_value() const {
  return this != internal_default_instance() && any_with_message_value_ != nullptr;
}
inline bool DefaultValueTestCases::has_any_with_message_value() const {
  return _internal_has_any_with_message_value();
}
inline void DefaultValueTestCases::clear_any_with_message_value() {
  if (GetArena() == nullptr && any_with_message_value_ != nullptr) {
    delete any_with_message_value_;
  }
  any_with_message_value_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_any_with_message_value() const {
  const ::proto_util_converter::testing::AnyMessage* p = any_with_message_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::any_with_message_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.any_with_message_value)
  return _internal_any_with_message_value();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_any_with_message_value(
    ::proto_util_converter::testing::AnyMessage* any_with_message_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_with_message_value_);
  }
  any_with_message_value_ = any_with_message_value;
  if (any_with_message_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_value)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_any_with_message_value() {
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_value_;
  any_with_message_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_any_with_message_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.any_with_message_value)
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_value_;
  any_with_message_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_any_with_message_value() {
  
  if (any_with_message_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    any_with_message_value_ = p;
  }
  return any_with_message_value_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_any_with_message_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.any_with_message_value)
  return _internal_mutable_any_with_message_value();
}
inline void DefaultValueTestCases::set_allocated_any_with_message_value(::proto_util_converter::testing::AnyMessage* any_with_message_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete any_with_message_value_;
  }
  if (any_with_message_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(any_with_message_value);
    if (message_arena != submessage_arena) {
      any_with_message_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_with_message_value, submessage_arena);
    }
    
  } else {
    
  }
  any_with_message_value_ = any_with_message_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_value)
}

// .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
inline bool DefaultValueTestCases::_internal_has_any_with_nested_message() const {
  return this != internal_default_instance() && any_with_nested_message_ != nullptr;
}
inline bool DefaultValueTestCases::has_any_with_nested_message() const {
  return _internal_has_any_with_nested_message();
}
inline void DefaultValueTestCases::clear_any_with_nested_message() {
  if (GetArena() == nullptr && any_with_nested_message_ != nullptr) {
    delete any_with_nested_message_;
  }
  any_with_nested_message_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_any_with_nested_message() const {
  const ::proto_util_converter::testing::AnyMessage* p = any_with_nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::any_with_nested_message() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.any_with_nested_message)
  return _internal_any_with_nested_message();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_any_with_nested_message(
    ::proto_util_converter::testing::AnyMessage* any_with_nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_with_nested_message_);
  }
  any_with_nested_message_ = any_with_nested_message;
  if (any_with_nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_nested_message)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_any_with_nested_message() {
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_nested_message_;
  any_with_nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_any_with_nested_message() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.any_with_nested_message)
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_nested_message_;
  any_with_nested_message_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_any_with_nested_message() {
  
  if (any_with_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    any_with_nested_message_ = p;
  }
  return any_with_nested_message_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_any_with_nested_message() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.any_with_nested_message)
  return _internal_mutable_any_with_nested_message();
}
inline void DefaultValueTestCases::set_allocated_any_with_nested_message(::proto_util_converter::testing::AnyMessage* any_with_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete any_with_nested_message_;
  }
  if (any_with_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(any_with_nested_message);
    if (message_arena != submessage_arena) {
      any_with_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_with_nested_message, submessage_arena);
    }
    
  } else {
    
  }
  any_with_nested_message_ = any_with_nested_message;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_nested_message)
}

// .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
inline bool DefaultValueTestCases::_internal_has_any_with_message_containing_map() const {
  return this != internal_default_instance() && any_with_message_containing_map_ != nullptr;
}
inline bool DefaultValueTestCases::has_any_with_message_containing_map() const {
  return _internal_has_any_with_message_containing_map();
}
inline void DefaultValueTestCases::clear_any_with_message_containing_map() {
  if (GetArena() == nullptr && any_with_message_containing_map_ != nullptr) {
    delete any_with_message_containing_map_;
  }
  any_with_message_containing_map_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_any_with_message_containing_map() const {
  const ::proto_util_converter::testing::AnyMessage* p = any_with_message_containing_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::any_with_message_containing_map() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_map)
  return _internal_any_with_message_containing_map();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_any_with_message_containing_map(
    ::proto_util_converter::testing::AnyMessage* any_with_message_containing_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_with_message_containing_map_);
  }
  any_with_message_containing_map_ = any_with_message_containing_map;
  if (any_with_message_containing_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_map)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_any_with_message_containing_map() {
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_containing_map_;
  any_with_message_containing_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_any_with_message_containing_map() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_map)
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_containing_map_;
  any_with_message_containing_map_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_any_with_message_containing_map() {
  
  if (any_with_message_containing_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    any_with_message_containing_map_ = p;
  }
  return any_with_message_containing_map_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_any_with_message_containing_map() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_map)
  return _internal_mutable_any_with_message_containing_map();
}
inline void DefaultValueTestCases::set_allocated_any_with_message_containing_map(::proto_util_converter::testing::AnyMessage* any_with_message_containing_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete any_with_message_containing_map_;
  }
  if (any_with_message_containing_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(any_with_message_containing_map);
    if (message_arena != submessage_arena) {
      any_with_message_containing_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_with_message_containing_map, submessage_arena);
    }
    
  } else {
    
  }
  any_with_message_containing_map_ = any_with_message_containing_map;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_map)
}

// .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
inline bool DefaultValueTestCases::_internal_has_any_with_message_containing_struct() const {
  return this != internal_default_instance() && any_with_message_containing_struct_ != nullptr;
}
inline bool DefaultValueTestCases::has_any_with_message_containing_struct() const {
  return _internal_has_any_with_message_containing_struct();
}
inline void DefaultValueTestCases::clear_any_with_message_containing_struct() {
  if (GetArena() == nullptr && any_with_message_containing_struct_ != nullptr) {
    delete any_with_message_containing_struct_;
  }
  any_with_message_containing_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::_internal_any_with_message_containing_struct() const {
  const ::proto_util_converter::testing::AnyMessage* p = any_with_message_containing_struct_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyMessage*>(
      &::proto_util_converter::testing::_AnyMessage_default_instance_);
}
inline const ::proto_util_converter::testing::AnyMessage& DefaultValueTestCases::any_with_message_containing_struct() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_struct)
  return _internal_any_with_message_containing_struct();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_any_with_message_containing_struct(
    ::proto_util_converter::testing::AnyMessage* any_with_message_containing_struct) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_with_message_containing_struct_);
  }
  any_with_message_containing_struct_ = any_with_message_containing_struct;
  if (any_with_message_containing_struct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_struct)
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::release_any_with_message_containing_struct() {
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_containing_struct_;
  any_with_message_containing_struct_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::unsafe_arena_release_any_with_message_containing_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_struct)
  
  ::proto_util_converter::testing::AnyMessage* temp = any_with_message_containing_struct_;
  any_with_message_containing_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::_internal_mutable_any_with_message_containing_struct() {
  
  if (any_with_message_containing_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyMessage>(GetArena());
    any_with_message_containing_struct_ = p;
  }
  return any_with_message_containing_struct_;
}
inline ::proto_util_converter::testing::AnyMessage* DefaultValueTestCases::mutable_any_with_message_containing_struct() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_struct)
  return _internal_mutable_any_with_message_containing_struct();
}
inline void DefaultValueTestCases::set_allocated_any_with_message_containing_struct(::proto_util_converter::testing::AnyMessage* any_with_message_containing_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete any_with_message_containing_struct_;
  }
  if (any_with_message_containing_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(any_with_message_containing_struct);
    if (message_arena != submessage_arena) {
      any_with_message_containing_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_with_message_containing_struct, submessage_arena);
    }
    
  } else {
    
  }
  any_with_message_containing_struct_ = any_with_message_containing_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.any_with_message_containing_struct)
}

// .google.protobuf.Any top_level_any = 308;
inline bool DefaultValueTestCases::_internal_has_top_level_any() const {
  return this != internal_default_instance() && top_level_any_ != nullptr;
}
inline bool DefaultValueTestCases::has_top_level_any() const {
  return _internal_has_top_level_any();
}
inline const PROTOBUF_NAMESPACE_ID::Any& DefaultValueTestCases::_internal_top_level_any() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = top_level_any_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& DefaultValueTestCases::top_level_any() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.top_level_any)
  return _internal_top_level_any();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_top_level_any(
    PROTOBUF_NAMESPACE_ID::Any* top_level_any) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_any_);
  }
  top_level_any_ = top_level_any;
  if (top_level_any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_any)
}
inline PROTOBUF_NAMESPACE_ID::Any* DefaultValueTestCases::release_top_level_any() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = top_level_any_;
  top_level_any_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DefaultValueTestCases::unsafe_arena_release_top_level_any() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.top_level_any)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = top_level_any_;
  top_level_any_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DefaultValueTestCases::_internal_mutable_top_level_any() {
  
  if (top_level_any_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    top_level_any_ = p;
  }
  return top_level_any_;
}
inline PROTOBUF_NAMESPACE_ID::Any* DefaultValueTestCases::mutable_top_level_any() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.top_level_any)
  return _internal_mutable_top_level_any();
}
inline void DefaultValueTestCases::set_allocated_top_level_any(PROTOBUF_NAMESPACE_ID::Any* top_level_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_any_);
  }
  if (top_level_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_any)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_any, submessage_arena);
    }
    
  } else {
    
  }
  top_level_any_ = top_level_any;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.top_level_any)
}

// .proto_util_converter.testing.StringtoIntMap empty_map = 401;
inline bool DefaultValueTestCases::_internal_has_empty_map() const {
  return this != internal_default_instance() && empty_map_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_map() const {
  return _internal_has_empty_map();
}
inline void DefaultValueTestCases::clear_empty_map() {
  if (GetArena() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoIntMap& DefaultValueTestCases::_internal_empty_map() const {
  const ::proto_util_converter::testing::StringtoIntMap* p = empty_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StringtoIntMap*>(
      &::proto_util_converter::testing::_StringtoIntMap_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoIntMap& DefaultValueTestCases::empty_map() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_map)
  return _internal_empty_map();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_map(
    ::proto_util_converter::testing::StringtoIntMap* empty_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_map_);
  }
  empty_map_ = empty_map;
  if (empty_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_map)
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::release_empty_map() {
  
  ::proto_util_converter::testing::StringtoIntMap* temp = empty_map_;
  empty_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::unsafe_arena_release_empty_map() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_map)
  
  ::proto_util_converter::testing::StringtoIntMap* temp = empty_map_;
  empty_map_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::_internal_mutable_empty_map() {
  
  if (empty_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoIntMap>(GetArena());
    empty_map_ = p;
  }
  return empty_map_;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::mutable_empty_map() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_map)
  return _internal_mutable_empty_map();
}
inline void DefaultValueTestCases::set_allocated_empty_map(::proto_util_converter::testing::StringtoIntMap* empty_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_map_;
  }
  if (empty_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_map);
    if (message_arena != submessage_arena) {
      empty_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_map, submessage_arena);
    }
    
  } else {
    
  }
  empty_map_ = empty_map;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_map)
}

// .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
inline bool DefaultValueTestCases::_internal_has_string_to_int() const {
  return this != internal_default_instance() && string_to_int_ != nullptr;
}
inline bool DefaultValueTestCases::has_string_to_int() const {
  return _internal_has_string_to_int();
}
inline void DefaultValueTestCases::clear_string_to_int() {
  if (GetArena() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoIntMap& DefaultValueTestCases::_internal_string_to_int() const {
  const ::proto_util_converter::testing::StringtoIntMap* p = string_to_int_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StringtoIntMap*>(
      &::proto_util_converter::testing::_StringtoIntMap_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoIntMap& DefaultValueTestCases::string_to_int() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.string_to_int)
  return _internal_string_to_int();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_string_to_int(
    ::proto_util_converter::testing::StringtoIntMap* string_to_int) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_to_int_);
  }
  string_to_int_ = string_to_int;
  if (string_to_int) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.string_to_int)
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::release_string_to_int() {
  
  ::proto_util_converter::testing::StringtoIntMap* temp = string_to_int_;
  string_to_int_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::unsafe_arena_release_string_to_int() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.string_to_int)
  
  ::proto_util_converter::testing::StringtoIntMap* temp = string_to_int_;
  string_to_int_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::_internal_mutable_string_to_int() {
  
  if (string_to_int_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoIntMap>(GetArena());
    string_to_int_ = p;
  }
  return string_to_int_;
}
inline ::proto_util_converter::testing::StringtoIntMap* DefaultValueTestCases::mutable_string_to_int() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.string_to_int)
  return _internal_mutable_string_to_int();
}
inline void DefaultValueTestCases::set_allocated_string_to_int(::proto_util_converter::testing::StringtoIntMap* string_to_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete string_to_int_;
  }
  if (string_to_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_to_int);
    if (message_arena != submessage_arena) {
      string_to_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_to_int, submessage_arena);
    }
    
  } else {
    
  }
  string_to_int_ = string_to_int;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.string_to_int)
}

// .proto_util_converter.testing.IntToStringMap int_to_string = 403;
inline bool DefaultValueTestCases::_internal_has_int_to_string() const {
  return this != internal_default_instance() && int_to_string_ != nullptr;
}
inline bool DefaultValueTestCases::has_int_to_string() const {
  return _internal_has_int_to_string();
}
inline void DefaultValueTestCases::clear_int_to_string() {
  if (GetArena() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
}
inline const ::proto_util_converter::testing::IntToStringMap& DefaultValueTestCases::_internal_int_to_string() const {
  const ::proto_util_converter::testing::IntToStringMap* p = int_to_string_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::IntToStringMap*>(
      &::proto_util_converter::testing::_IntToStringMap_default_instance_);
}
inline const ::proto_util_converter::testing::IntToStringMap& DefaultValueTestCases::int_to_string() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.int_to_string)
  return _internal_int_to_string();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_int_to_string(
    ::proto_util_converter::testing::IntToStringMap* int_to_string) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int_to_string_);
  }
  int_to_string_ = int_to_string;
  if (int_to_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.int_to_string)
}
inline ::proto_util_converter::testing::IntToStringMap* DefaultValueTestCases::release_int_to_string() {
  
  ::proto_util_converter::testing::IntToStringMap* temp = int_to_string_;
  int_to_string_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::IntToStringMap* DefaultValueTestCases::unsafe_arena_release_int_to_string() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.int_to_string)
  
  ::proto_util_converter::testing::IntToStringMap* temp = int_to_string_;
  int_to_string_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::IntToStringMap* DefaultValueTestCases::_internal_mutable_int_to_string() {
  
  if (int_to_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::IntToStringMap>(GetArena());
    int_to_string_ = p;
  }
  return int_to_string_;
}
inline ::proto_util_converter::testing::IntToStringMap* DefaultValueTestCases::mutable_int_to_string() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.int_to_string)
  return _internal_mutable_int_to_string();
}
inline void DefaultValueTestCases::set_allocated_int_to_string(::proto_util_converter::testing::IntToStringMap* int_to_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete int_to_string_;
  }
  if (int_to_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_to_string);
    if (message_arena != submessage_arena) {
      int_to_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_to_string, submessage_arena);
    }
    
  } else {
    
  }
  int_to_string_ = int_to_string;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.int_to_string)
}

// .proto_util_converter.testing.MixedMap mixed1 = 404;
inline bool DefaultValueTestCases::_internal_has_mixed1() const {
  return this != internal_default_instance() && mixed1_ != nullptr;
}
inline bool DefaultValueTestCases::has_mixed1() const {
  return _internal_has_mixed1();
}
inline void DefaultValueTestCases::clear_mixed1() {
  if (GetArena() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
}
inline const ::proto_util_converter::testing::MixedMap& DefaultValueTestCases::_internal_mixed1() const {
  const ::proto_util_converter::testing::MixedMap* p = mixed1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MixedMap*>(
      &::proto_util_converter::testing::_MixedMap_default_instance_);
}
inline const ::proto_util_converter::testing::MixedMap& DefaultValueTestCases::mixed1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.mixed1)
  return _internal_mixed1();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_mixed1(
    ::proto_util_converter::testing::MixedMap* mixed1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixed1_);
  }
  mixed1_ = mixed1;
  if (mixed1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed1)
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::release_mixed1() {
  
  ::proto_util_converter::testing::MixedMap* temp = mixed1_;
  mixed1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::unsafe_arena_release_mixed1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.mixed1)
  
  ::proto_util_converter::testing::MixedMap* temp = mixed1_;
  mixed1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::_internal_mutable_mixed1() {
  
  if (mixed1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MixedMap>(GetArena());
    mixed1_ = p;
  }
  return mixed1_;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::mutable_mixed1() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.mixed1)
  return _internal_mutable_mixed1();
}
inline void DefaultValueTestCases::set_allocated_mixed1(::proto_util_converter::testing::MixedMap* mixed1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mixed1_;
  }
  if (mixed1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mixed1);
    if (message_arena != submessage_arena) {
      mixed1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixed1, submessage_arena);
    }
    
  } else {
    
  }
  mixed1_ = mixed1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed1)
}

// .proto_util_converter.testing.MixedMap2 mixed2 = 405;
inline bool DefaultValueTestCases::_internal_has_mixed2() const {
  return this != internal_default_instance() && mixed2_ != nullptr;
}
inline bool DefaultValueTestCases::has_mixed2() const {
  return _internal_has_mixed2();
}
inline void DefaultValueTestCases::clear_mixed2() {
  if (GetArena() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
}
inline const ::proto_util_converter::testing::MixedMap2& DefaultValueTestCases::_internal_mixed2() const {
  const ::proto_util_converter::testing::MixedMap2* p = mixed2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MixedMap2*>(
      &::proto_util_converter::testing::_MixedMap2_default_instance_);
}
inline const ::proto_util_converter::testing::MixedMap2& DefaultValueTestCases::mixed2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.mixed2)
  return _internal_mixed2();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_mixed2(
    ::proto_util_converter::testing::MixedMap2* mixed2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixed2_);
  }
  mixed2_ = mixed2;
  if (mixed2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed2)
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::release_mixed2() {
  
  ::proto_util_converter::testing::MixedMap2* temp = mixed2_;
  mixed2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::unsafe_arena_release_mixed2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.mixed2)
  
  ::proto_util_converter::testing::MixedMap2* temp = mixed2_;
  mixed2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::_internal_mutable_mixed2() {
  
  if (mixed2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MixedMap2>(GetArena());
    mixed2_ = p;
  }
  return mixed2_;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::mutable_mixed2() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.mixed2)
  return _internal_mutable_mixed2();
}
inline void DefaultValueTestCases::set_allocated_mixed2(::proto_util_converter::testing::MixedMap2* mixed2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mixed2_;
  }
  if (mixed2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mixed2);
    if (message_arena != submessage_arena) {
      mixed2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixed2, submessage_arena);
    }
    
  } else {
    
  }
  mixed2_ = mixed2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed2)
}

// .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
inline bool DefaultValueTestCases::_internal_has_empty_mixed2() const {
  return this != internal_default_instance() && empty_mixed2_ != nullptr;
}
inline bool DefaultValueTestCases::has_empty_mixed2() const {
  return _internal_has_empty_mixed2();
}
inline void DefaultValueTestCases::clear_empty_mixed2() {
  if (GetArena() == nullptr && empty_mixed2_ != nullptr) {
    delete empty_mixed2_;
  }
  empty_mixed2_ = nullptr;
}
inline const ::proto_util_converter::testing::MixedMap2& DefaultValueTestCases::_internal_empty_mixed2() const {
  const ::proto_util_converter::testing::MixedMap2* p = empty_mixed2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MixedMap2*>(
      &::proto_util_converter::testing::_MixedMap2_default_instance_);
}
inline const ::proto_util_converter::testing::MixedMap2& DefaultValueTestCases::empty_mixed2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.empty_mixed2)
  return _internal_empty_mixed2();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_empty_mixed2(
    ::proto_util_converter::testing::MixedMap2* empty_mixed2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_mixed2_);
  }
  empty_mixed2_ = empty_mixed2;
  if (empty_mixed2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_mixed2)
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::release_empty_mixed2() {
  
  ::proto_util_converter::testing::MixedMap2* temp = empty_mixed2_;
  empty_mixed2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::unsafe_arena_release_empty_mixed2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.empty_mixed2)
  
  ::proto_util_converter::testing::MixedMap2* temp = empty_mixed2_;
  empty_mixed2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::_internal_mutable_empty_mixed2() {
  
  if (empty_mixed2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MixedMap2>(GetArena());
    empty_mixed2_ = p;
  }
  return empty_mixed2_;
}
inline ::proto_util_converter::testing::MixedMap2* DefaultValueTestCases::mutable_empty_mixed2() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.empty_mixed2)
  return _internal_mutable_empty_mixed2();
}
inline void DefaultValueTestCases::set_allocated_empty_mixed2(::proto_util_converter::testing::MixedMap2* empty_mixed2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_mixed2_;
  }
  if (empty_mixed2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_mixed2);
    if (message_arena != submessage_arena) {
      empty_mixed2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_mixed2, submessage_arena);
    }
    
  } else {
    
  }
  empty_mixed2_ = empty_mixed2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.empty_mixed2)
}

// .proto_util_converter.testing.MessageMap map_of_objects = 407;
inline bool DefaultValueTestCases::_internal_has_map_of_objects() const {
  return this != internal_default_instance() && map_of_objects_ != nullptr;
}
inline bool DefaultValueTestCases::has_map_of_objects() const {
  return _internal_has_map_of_objects();
}
inline void DefaultValueTestCases::clear_map_of_objects() {
  if (GetArena() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
}
inline const ::proto_util_converter::testing::MessageMap& DefaultValueTestCases::_internal_map_of_objects() const {
  const ::proto_util_converter::testing::MessageMap* p = map_of_objects_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MessageMap*>(
      &::proto_util_converter::testing::_MessageMap_default_instance_);
}
inline const ::proto_util_converter::testing::MessageMap& DefaultValueTestCases::map_of_objects() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.map_of_objects)
  return _internal_map_of_objects();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_map_of_objects(
    ::proto_util_converter::testing::MessageMap* map_of_objects) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_of_objects_);
  }
  map_of_objects_ = map_of_objects;
  if (map_of_objects) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.map_of_objects)
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::release_map_of_objects() {
  
  ::proto_util_converter::testing::MessageMap* temp = map_of_objects_;
  map_of_objects_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::unsafe_arena_release_map_of_objects() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.map_of_objects)
  
  ::proto_util_converter::testing::MessageMap* temp = map_of_objects_;
  map_of_objects_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::_internal_mutable_map_of_objects() {
  
  if (map_of_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MessageMap>(GetArena());
    map_of_objects_ = p;
  }
  return map_of_objects_;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::mutable_map_of_objects() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.map_of_objects)
  return _internal_mutable_map_of_objects();
}
inline void DefaultValueTestCases::set_allocated_map_of_objects(::proto_util_converter::testing::MessageMap* map_of_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_of_objects_;
  }
  if (map_of_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_of_objects);
    if (message_arena != submessage_arena) {
      map_of_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_of_objects, submessage_arena);
    }
    
  } else {
    
  }
  map_of_objects_ = map_of_objects;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.map_of_objects)
}

// .proto_util_converter.testing.MixedMap mixed_empty = 408;
inline bool DefaultValueTestCases::_internal_has_mixed_empty() const {
  return this != internal_default_instance() && mixed_empty_ != nullptr;
}
inline bool DefaultValueTestCases::has_mixed_empty() const {
  return _internal_has_mixed_empty();
}
inline void DefaultValueTestCases::clear_mixed_empty() {
  if (GetArena() == nullptr && mixed_empty_ != nullptr) {
    delete mixed_empty_;
  }
  mixed_empty_ = nullptr;
}
inline const ::proto_util_converter::testing::MixedMap& DefaultValueTestCases::_internal_mixed_empty() const {
  const ::proto_util_converter::testing::MixedMap* p = mixed_empty_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MixedMap*>(
      &::proto_util_converter::testing::_MixedMap_default_instance_);
}
inline const ::proto_util_converter::testing::MixedMap& DefaultValueTestCases::mixed_empty() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.mixed_empty)
  return _internal_mixed_empty();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_mixed_empty(
    ::proto_util_converter::testing::MixedMap* mixed_empty) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixed_empty_);
  }
  mixed_empty_ = mixed_empty;
  if (mixed_empty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed_empty)
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::release_mixed_empty() {
  
  ::proto_util_converter::testing::MixedMap* temp = mixed_empty_;
  mixed_empty_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::unsafe_arena_release_mixed_empty() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.mixed_empty)
  
  ::proto_util_converter::testing::MixedMap* temp = mixed_empty_;
  mixed_empty_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::_internal_mutable_mixed_empty() {
  
  if (mixed_empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MixedMap>(GetArena());
    mixed_empty_ = p;
  }
  return mixed_empty_;
}
inline ::proto_util_converter::testing::MixedMap* DefaultValueTestCases::mutable_mixed_empty() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.mixed_empty)
  return _internal_mutable_mixed_empty();
}
inline void DefaultValueTestCases::set_allocated_mixed_empty(::proto_util_converter::testing::MixedMap* mixed_empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mixed_empty_;
  }
  if (mixed_empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mixed_empty);
    if (message_arena != submessage_arena) {
      mixed_empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixed_empty, submessage_arena);
    }
    
  } else {
    
  }
  mixed_empty_ = mixed_empty;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.mixed_empty)
}

// .proto_util_converter.testing.MessageMap message_map_empty = 409;
inline bool DefaultValueTestCases::_internal_has_message_map_empty() const {
  return this != internal_default_instance() && message_map_empty_ != nullptr;
}
inline bool DefaultValueTestCases::has_message_map_empty() const {
  return _internal_has_message_map_empty();
}
inline void DefaultValueTestCases::clear_message_map_empty() {
  if (GetArena() == nullptr && message_map_empty_ != nullptr) {
    delete message_map_empty_;
  }
  message_map_empty_ = nullptr;
}
inline const ::proto_util_converter::testing::MessageMap& DefaultValueTestCases::_internal_message_map_empty() const {
  const ::proto_util_converter::testing::MessageMap* p = message_map_empty_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MessageMap*>(
      &::proto_util_converter::testing::_MessageMap_default_instance_);
}
inline const ::proto_util_converter::testing::MessageMap& DefaultValueTestCases::message_map_empty() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.message_map_empty)
  return _internal_message_map_empty();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_message_map_empty(
    ::proto_util_converter::testing::MessageMap* message_map_empty) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_map_empty_);
  }
  message_map_empty_ = message_map_empty;
  if (message_map_empty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.message_map_empty)
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::release_message_map_empty() {
  
  ::proto_util_converter::testing::MessageMap* temp = message_map_empty_;
  message_map_empty_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::unsafe_arena_release_message_map_empty() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.message_map_empty)
  
  ::proto_util_converter::testing::MessageMap* temp = message_map_empty_;
  message_map_empty_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::_internal_mutable_message_map_empty() {
  
  if (message_map_empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MessageMap>(GetArena());
    message_map_empty_ = p;
  }
  return message_map_empty_;
}
inline ::proto_util_converter::testing::MessageMap* DefaultValueTestCases::mutable_message_map_empty() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.message_map_empty)
  return _internal_mutable_message_map_empty();
}
inline void DefaultValueTestCases::set_allocated_message_map_empty(::proto_util_converter::testing::MessageMap* message_map_empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_map_empty_;
  }
  if (message_map_empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_map_empty);
    if (message_arena != submessage_arena) {
      message_map_empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_map_empty, submessage_arena);
    }
    
  } else {
    
  }
  message_map_empty_ = message_map_empty;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.message_map_empty)
}

// .proto_util_converter.testing.DoubleValueMessage double_value = 501;
inline bool DefaultValueTestCases::_internal_has_double_value() const {
  return this != internal_default_instance() && double_value_ != nullptr;
}
inline bool DefaultValueTestCases::has_double_value() const {
  return _internal_has_double_value();
}
inline void DefaultValueTestCases::clear_double_value() {
  if (GetArena() == nullptr && double_value_ != nullptr) {
    delete double_value_;
  }
  double_value_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleValueMessage& DefaultValueTestCases::_internal_double_value() const {
  const ::proto_util_converter::testing::DoubleValueMessage* p = double_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleValueMessage*>(
      &::proto_util_converter::testing::_DoubleValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleValueMessage& DefaultValueTestCases::double_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.double_value)
  return _internal_double_value();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_double_value(
    ::proto_util_converter::testing::DoubleValueMessage* double_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_value_);
  }
  double_value_ = double_value;
  if (double_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_value)
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::release_double_value() {
  
  ::proto_util_converter::testing::DoubleValueMessage* temp = double_value_;
  double_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::unsafe_arena_release_double_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.double_value)
  
  ::proto_util_converter::testing::DoubleValueMessage* temp = double_value_;
  double_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::_internal_mutable_double_value() {
  
  if (double_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleValueMessage>(GetArena());
    double_value_ = p;
  }
  return double_value_;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.double_value)
  return _internal_mutable_double_value();
}
inline void DefaultValueTestCases::set_allocated_double_value(::proto_util_converter::testing::DoubleValueMessage* double_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_value_;
  }
  if (double_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_value);
    if (message_arena != submessage_arena) {
      double_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_value, submessage_arena);
    }
    
  } else {
    
  }
  double_value_ = double_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_value)
}

// .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
inline bool DefaultValueTestCases::_internal_has_double_value_default() const {
  return this != internal_default_instance() && double_value_default_ != nullptr;
}
inline bool DefaultValueTestCases::has_double_value_default() const {
  return _internal_has_double_value_default();
}
inline void DefaultValueTestCases::clear_double_value_default() {
  if (GetArena() == nullptr && double_value_default_ != nullptr) {
    delete double_value_default_;
  }
  double_value_default_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleValueMessage& DefaultValueTestCases::_internal_double_value_default() const {
  const ::proto_util_converter::testing::DoubleValueMessage* p = double_value_default_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleValueMessage*>(
      &::proto_util_converter::testing::_DoubleValueMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleValueMessage& DefaultValueTestCases::double_value_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DefaultValueTestCases.double_value_default)
  return _internal_double_value_default();
}
inline void DefaultValueTestCases::unsafe_arena_set_allocated_double_value_default(
    ::proto_util_converter::testing::DoubleValueMessage* double_value_default) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_value_default_);
  }
  double_value_default_ = double_value_default;
  if (double_value_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_value_default)
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::release_double_value_default() {
  
  ::proto_util_converter::testing::DoubleValueMessage* temp = double_value_default_;
  double_value_default_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::unsafe_arena_release_double_value_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DefaultValueTestCases.double_value_default)
  
  ::proto_util_converter::testing::DoubleValueMessage* temp = double_value_default_;
  double_value_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::_internal_mutable_double_value_default() {
  
  if (double_value_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleValueMessage>(GetArena());
    double_value_default_ = p;
  }
  return double_value_default_;
}
inline ::proto_util_converter::testing::DoubleValueMessage* DefaultValueTestCases::mutable_double_value_default() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DefaultValueTestCases.double_value_default)
  return _internal_mutable_double_value_default();
}
inline void DefaultValueTestCases::set_allocated_double_value_default(::proto_util_converter::testing::DoubleValueMessage* double_value_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete double_value_default_;
  }
  if (double_value_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_value_default);
    if (message_arena != submessage_arena) {
      double_value_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_value_default, submessage_arena);
    }
    
  } else {
    
  }
  double_value_default_ = double_value_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DefaultValueTestCases.double_value_default)
}

// -------------------------------------------------------------------

// DoubleMessage

// double double_value = 1;
inline void DoubleMessage::clear_double_value() {
  double_value_ = 0;
}
inline double DoubleMessage::_internal_double_value() const {
  return double_value_;
}
inline double DoubleMessage::double_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.double_value)
  return _internal_double_value();
}
inline void DoubleMessage::_internal_set_double_value(double value) {
  
  double_value_ = value;
}
inline void DoubleMessage::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.DoubleMessage.double_value)
}

// repeated double repeated_double = 2;
inline int DoubleMessage::_internal_repeated_double_size() const {
  return repeated_double_.size();
}
inline int DoubleMessage::repeated_double_size() const {
  return _internal_repeated_double_size();
}
inline void DoubleMessage::clear_repeated_double() {
  repeated_double_.Clear();
}
inline double DoubleMessage::_internal_repeated_double(int index) const {
  return repeated_double_.Get(index);
}
inline double DoubleMessage::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.repeated_double)
  return _internal_repeated_double(index);
}
inline void DoubleMessage::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.DoubleMessage.repeated_double)
}
inline void DoubleMessage::_internal_add_repeated_double(double value) {
  repeated_double_.Add(value);
}
inline void DoubleMessage::add_repeated_double(double value) {
  _internal_add_repeated_double(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.DoubleMessage.repeated_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleMessage::_internal_repeated_double() const {
  return repeated_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleMessage::repeated_double() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.DoubleMessage.repeated_double)
  return _internal_repeated_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleMessage::_internal_mutable_repeated_double() {
  return &repeated_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleMessage::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.DoubleMessage.repeated_double)
  return _internal_mutable_repeated_double();
}

// .proto_util_converter.testing.DoubleMessage nested_message = 3;
inline bool DoubleMessage::_internal_has_nested_message() const {
  return this != internal_default_instance() && nested_message_ != nullptr;
}
inline bool DoubleMessage::has_nested_message() const {
  return _internal_has_nested_message();
}
inline void DoubleMessage::clear_nested_message() {
  if (GetArena() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleMessage& DoubleMessage::_internal_nested_message() const {
  const ::proto_util_converter::testing::DoubleMessage* p = nested_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DoubleMessage*>(
      &::proto_util_converter::testing::_DoubleMessage_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleMessage& DoubleMessage::nested_message() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.nested_message)
  return _internal_nested_message();
}
inline void DoubleMessage::unsafe_arena_set_allocated_nested_message(
    ::proto_util_converter::testing::DoubleMessage* nested_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nested_message_);
  }
  nested_message_ = nested_message;
  if (nested_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DoubleMessage.nested_message)
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::release_nested_message() {
  
  ::proto_util_converter::testing::DoubleMessage* temp = nested_message_;
  nested_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::unsafe_arena_release_nested_message() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DoubleMessage.nested_message)
  
  ::proto_util_converter::testing::DoubleMessage* temp = nested_message_;
  nested_message_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::_internal_mutable_nested_message() {
  
  if (nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleMessage>(GetArena());
    nested_message_ = p;
  }
  return nested_message_;
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::mutable_nested_message() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleMessage.nested_message)
  return _internal_mutable_nested_message();
}
inline void DoubleMessage::set_allocated_nested_message(::proto_util_converter::testing::DoubleMessage* nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nested_message_;
  }
  if (nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_message);
    if (message_arena != submessage_arena) {
      nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_message, submessage_arena);
    }
    
  } else {
    
  }
  nested_message_ = nested_message;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DoubleMessage.nested_message)
}

// repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
inline int DoubleMessage::_internal_repeated_nested_message_size() const {
  return repeated_nested_message_.size();
}
inline int DoubleMessage::repeated_nested_message_size() const {
  return _internal_repeated_nested_message_size();
}
inline void DoubleMessage::clear_repeated_nested_message() {
  repeated_nested_message_.Clear();
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::mutable_repeated_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleMessage.repeated_nested_message)
  return repeated_nested_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::DoubleMessage >*
DoubleMessage::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.DoubleMessage.repeated_nested_message)
  return &repeated_nested_message_;
}
inline const ::proto_util_converter::testing::DoubleMessage& DoubleMessage::_internal_repeated_nested_message(int index) const {
  return repeated_nested_message_.Get(index);
}
inline const ::proto_util_converter::testing::DoubleMessage& DoubleMessage::repeated_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.repeated_nested_message)
  return _internal_repeated_nested_message(index);
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::_internal_add_repeated_nested_message() {
  return repeated_nested_message_.Add();
}
inline ::proto_util_converter::testing::DoubleMessage* DoubleMessage::add_repeated_nested_message() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.DoubleMessage.repeated_nested_message)
  return _internal_add_repeated_nested_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::DoubleMessage >&
DoubleMessage::repeated_nested_message() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.DoubleMessage.repeated_nested_message)
  return repeated_nested_message_;
}

// .google.protobuf.DoubleValue double_wrapper = 100;
inline bool DoubleMessage::_internal_has_double_wrapper() const {
  return this != internal_default_instance() && double_wrapper_ != nullptr;
}
inline bool DoubleMessage::has_double_wrapper() const {
  return _internal_has_double_wrapper();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleMessage::_internal_double_wrapper() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = double_wrapper_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleMessage::double_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.double_wrapper)
  return _internal_double_wrapper();
}
inline void DoubleMessage::unsafe_arena_set_allocated_double_wrapper(
    PROTOBUF_NAMESPACE_ID::DoubleValue* double_wrapper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_wrapper_);
  }
  double_wrapper_ = double_wrapper;
  if (double_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DoubleMessage.double_wrapper)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleMessage::release_double_wrapper() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double_wrapper_;
  double_wrapper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleMessage::unsafe_arena_release_double_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DoubleMessage.double_wrapper)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double_wrapper_;
  double_wrapper_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleMessage::_internal_mutable_double_wrapper() {
  
  if (double_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    double_wrapper_ = p;
  }
  return double_wrapper_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleMessage::mutable_double_wrapper() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleMessage.double_wrapper)
  return _internal_mutable_double_wrapper();
}
inline void DoubleMessage::set_allocated_double_wrapper(PROTOBUF_NAMESPACE_ID::DoubleValue* double_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_wrapper_);
  }
  if (double_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_wrapper)->GetArena();
    if (message_arena != submessage_arena) {
      double_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  double_wrapper_ = double_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DoubleMessage.double_wrapper)
}

// string str_value = 112;
inline bool DoubleMessage::_internal_has_str_value() const {
  return value_case() == kStrValue;
}
inline void DoubleMessage::set_has_str_value() {
  _oneof_case_[0] = kStrValue;
}
inline void DoubleMessage::clear_str_value() {
  if (_internal_has_str_value()) {
    value_.str_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& DoubleMessage::str_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.str_value)
  return _internal_str_value();
}
inline void DoubleMessage::set_str_value(const std::string& value) {
  _internal_set_str_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.DoubleMessage.str_value)
}
inline std::string* DoubleMessage::mutable_str_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleMessage.str_value)
  return _internal_mutable_str_value();
}
inline const std::string& DoubleMessage::_internal_str_value() const {
  if (_internal_has_str_value()) {
    return value_.str_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DoubleMessage::_internal_set_str_value(const std::string& value) {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DoubleMessage::set_str_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.DoubleMessage.str_value)
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.DoubleMessage.str_value)
}
inline void DoubleMessage::set_str_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.DoubleMessage.str_value)
}
inline void DoubleMessage::set_str_value(const char* value,
                             size_t size) {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.DoubleMessage.str_value)
}
inline std::string* DoubleMessage::_internal_mutable_str_value() {
  if (!_internal_has_str_value()) {
    clear_value();
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.str_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DoubleMessage::release_str_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DoubleMessage.str_value)
  if (_internal_has_str_value()) {
    clear_has_value();
    return value_.str_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DoubleMessage::set_allocated_str_value(std::string* str_value) {
  if (has_value()) {
    clear_value();
  }
  if (str_value != nullptr) {
    set_has_str_value();
    value_.str_value_.UnsafeSetDefault(str_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(str_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DoubleMessage.str_value)
}

// int64 num_value = 113;
inline bool DoubleMessage::_internal_has_num_value() const {
  return value_case() == kNumValue;
}
inline void DoubleMessage::set_has_num_value() {
  _oneof_case_[0] = kNumValue;
}
inline void DoubleMessage::clear_num_value() {
  if (_internal_has_num_value()) {
    value_.num_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DoubleMessage::_internal_num_value() const {
  if (_internal_has_num_value()) {
    return value_.num_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void DoubleMessage::_internal_set_num_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_num_value()) {
    clear_value();
    set_has_num_value();
  }
  value_.num_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DoubleMessage::num_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleMessage.num_value)
  return _internal_num_value();
}
inline void DoubleMessage::set_num_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.DoubleMessage.num_value)
}

inline bool DoubleMessage::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DoubleMessage::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline DoubleMessage::ValueCase DoubleMessage::value_case() const {
  return DoubleMessage::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StructMessage

// .google.protobuf.Struct struct = 1;
inline bool StructMessage::_internal_has_struct_() const {
  return this != internal_default_instance() && struct__ != nullptr;
}
inline bool StructMessage::has_struct_() const {
  return _internal_has_struct_();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructMessage::_internal_struct_() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = struct__;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructMessage::struct_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructMessage.struct)
  return _internal_struct_();
}
inline void StructMessage::unsafe_arena_set_allocated_struct_(
    PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct__);
  }
  struct__ = struct_;
  if (struct_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.StructMessage.struct)
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructMessage::release_struct_() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = struct__;
  struct__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructMessage::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructMessage.struct)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = struct__;
  struct__ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructMessage::_internal_mutable_struct_() {
  
  if (struct__ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    struct__ = p;
  }
  return struct__;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructMessage::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructMessage.struct)
  return _internal_mutable_struct_();
}
inline void StructMessage::set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct__);
  }
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_)->GetArena();
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    
  } else {
    
  }
  struct__ = struct_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructMessage.struct)
}

// -------------------------------------------------------------------

// ValueMessage

// .google.protobuf.Value value = 1;
inline bool ValueMessage::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ValueMessage::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Value& ValueMessage::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& ValueMessage::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.ValueMessage.value)
  return _internal_value();
}
inline void ValueMessage::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.ValueMessage.value)
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueMessage::release_value() {
  
  PROTOBUF_NAMESPACE_ID::Value* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueMessage::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.ValueMessage.value)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueMessage::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueMessage::mutable_value() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.ValueMessage.value)
  return _internal_mutable_value();
}
inline void ValueMessage::set_allocated_value(PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.ValueMessage.value)
}

// -------------------------------------------------------------------

// ListValueMessage

// .google.protobuf.ListValue shopping_list = 1;
inline bool ListValueMessage::_internal_has_shopping_list() const {
  return this != internal_default_instance() && shopping_list_ != nullptr;
}
inline bool ListValueMessage::has_shopping_list() const {
  return _internal_has_shopping_list();
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& ListValueMessage::_internal_shopping_list() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = shopping_list_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& ListValueMessage::shopping_list() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.ListValueMessage.shopping_list)
  return _internal_shopping_list();
}
inline void ListValueMessage::unsafe_arena_set_allocated_shopping_list(
    PROTOBUF_NAMESPACE_ID::ListValue* shopping_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_list_);
  }
  shopping_list_ = shopping_list;
  if (shopping_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.ListValueMessage.shopping_list)
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueMessage::release_shopping_list() {
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = shopping_list_;
  shopping_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueMessage::unsafe_arena_release_shopping_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.ListValueMessage.shopping_list)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = shopping_list_;
  shopping_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueMessage::_internal_mutable_shopping_list() {
  
  if (shopping_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArena());
    shopping_list_ = p;
  }
  return shopping_list_;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueMessage::mutable_shopping_list() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.ListValueMessage.shopping_list)
  return _internal_mutable_shopping_list();
}
inline void ListValueMessage::set_allocated_shopping_list(PROTOBUF_NAMESPACE_ID::ListValue* shopping_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_list_);
  }
  if (shopping_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_list)->GetArena();
    if (message_arena != submessage_arena) {
      shopping_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shopping_list, submessage_arena);
    }
    
  } else {
    
  }
  shopping_list_ = shopping_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.ListValueMessage.shopping_list)
}

// -------------------------------------------------------------------

// RequestMessage

// string content = 1;
inline void RequestMessage::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestMessage::content() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.RequestMessage.content)
  return _internal_content();
}
inline void RequestMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.RequestMessage.content)
}
inline std::string* RequestMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.RequestMessage.content)
  return _internal_mutable_content();
}
inline const std::string& RequestMessage::_internal_content() const {
  return content_.Get();
}
inline void RequestMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestMessage::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.RequestMessage.content)
}
inline void RequestMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.RequestMessage.content)
}
inline void RequestMessage::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.RequestMessage.content)
}
inline std::string* RequestMessage::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestMessage::release_content() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.RequestMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.RequestMessage.content)
}

// -------------------------------------------------------------------

// AnyMessage

// .google.protobuf.Any any = 1;
inline bool AnyMessage::_internal_has_any() const {
  return this != internal_default_instance() && any_ != nullptr;
}
inline bool AnyMessage::has_any() const {
  return _internal_has_any();
}
inline const PROTOBUF_NAMESPACE_ID::Any& AnyMessage::_internal_any() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = any_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& AnyMessage::any() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyMessage.any)
  return _internal_any();
}
inline void AnyMessage::unsafe_arena_set_allocated_any(
    PROTOBUF_NAMESPACE_ID::Any* any) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_);
  }
  any_ = any;
  if (any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.AnyMessage.any)
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::release_any() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = any_;
  any_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.AnyMessage.any)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = any_;
  any_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::_internal_mutable_any() {
  
  if (any_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    any_ = p;
  }
  return any_;
}
inline PROTOBUF_NAMESPACE_ID::Any* AnyMessage::mutable_any() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyMessage.any)
  return _internal_mutable_any();
}
inline void AnyMessage::set_allocated_any(PROTOBUF_NAMESPACE_ID::Any* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_);
  }
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    
  } else {
    
  }
  any_ = any;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.AnyMessage.any)
}

// .proto_util_converter.testing.AnyData data = 2;
inline bool AnyMessage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AnyMessage::has_data() const {
  return _internal_has_data();
}
inline void AnyMessage::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyData& AnyMessage::_internal_data() const {
  const ::proto_util_converter::testing::AnyData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyData*>(
      &::proto_util_converter::testing::_AnyData_default_instance_);
}
inline const ::proto_util_converter::testing::AnyData& AnyMessage::data() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyMessage.data)
  return _internal_data();
}
inline void AnyMessage::unsafe_arena_set_allocated_data(
    ::proto_util_converter::testing::AnyData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.AnyMessage.data)
}
inline ::proto_util_converter::testing::AnyData* AnyMessage::release_data() {
  
  ::proto_util_converter::testing::AnyData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyData* AnyMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.AnyMessage.data)
  
  ::proto_util_converter::testing::AnyData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyData* AnyMessage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::proto_util_converter::testing::AnyData* AnyMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyMessage.data)
  return _internal_mutable_data();
}
inline void AnyMessage::set_allocated_data(::proto_util_converter::testing::AnyData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.AnyMessage.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnyData

// int32 attr = 1;
inline void AnyData::clear_attr() {
  attr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnyData::_internal_attr() const {
  return attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnyData::attr() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.attr)
  return _internal_attr();
}
inline void AnyData::_internal_set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attr_ = value;
}
inline void AnyData::set_attr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.AnyData.attr)
}

// string str = 2;
inline void AnyData::clear_str() {
  str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnyData::str() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.str)
  return _internal_str();
}
inline void AnyData::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.AnyData.str)
}
inline std::string* AnyData::mutable_str() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyData.str)
  return _internal_mutable_str();
}
inline const std::string& AnyData::_internal_str() const {
  return str_.Get();
}
inline void AnyData::_internal_set_str(const std::string& value) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnyData::set_str(std::string&& value) {
  
  str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.AnyData.str)
}
inline void AnyData::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.AnyData.str)
}
inline void AnyData::set_str(const char* value,
    size_t size) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.AnyData.str)
}
inline std::string* AnyData::_internal_mutable_str() {
  
  return str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnyData::release_str() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.AnyData.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnyData::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.AnyData.str)
}

// repeated string msgs = 3;
inline int AnyData::_internal_msgs_size() const {
  return msgs_.size();
}
inline int AnyData::msgs_size() const {
  return _internal_msgs_size();
}
inline void AnyData::clear_msgs() {
  msgs_.Clear();
}
inline std::string* AnyData::add_msgs() {
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.AnyData.msgs)
  return _internal_add_msgs();
}
inline const std::string& AnyData::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const std::string& AnyData::msgs(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.msgs)
  return _internal_msgs(index);
}
inline std::string* AnyData::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyData.msgs)
  return msgs_.Mutable(index);
}
inline void AnyData::set_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.AnyData.msgs)
  msgs_.Mutable(index)->assign(value);
}
inline void AnyData::set_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.AnyData.msgs)
  msgs_.Mutable(index)->assign(std::move(value));
}
inline void AnyData::set_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.AnyData.msgs)
}
inline void AnyData::set_msgs(int index, const char* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.AnyData.msgs)
}
inline std::string* AnyData::_internal_add_msgs() {
  return msgs_.Add();
}
inline void AnyData::add_msgs(const std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.AnyData.msgs)
}
inline void AnyData::add_msgs(std::string&& value) {
  msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.AnyData.msgs)
}
inline void AnyData::add_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.AnyData.msgs)
}
inline void AnyData::add_msgs(const char* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.AnyData.msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnyData::msgs() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.AnyData.msgs)
  return msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnyData::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.AnyData.msgs)
  return &msgs_;
}

// .proto_util_converter.testing.AnyData nested_data = 4;
inline bool AnyData::_internal_has_nested_data() const {
  return this != internal_default_instance() && nested_data_ != nullptr;
}
inline bool AnyData::has_nested_data() const {
  return _internal_has_nested_data();
}
inline void AnyData::clear_nested_data() {
  if (GetArena() == nullptr && nested_data_ != nullptr) {
    delete nested_data_;
  }
  nested_data_ = nullptr;
}
inline const ::proto_util_converter::testing::AnyData& AnyData::_internal_nested_data() const {
  const ::proto_util_converter::testing::AnyData* p = nested_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::AnyData*>(
      &::proto_util_converter::testing::_AnyData_default_instance_);
}
inline const ::proto_util_converter::testing::AnyData& AnyData::nested_data() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.nested_data)
  return _internal_nested_data();
}
inline void AnyData::unsafe_arena_set_allocated_nested_data(
    ::proto_util_converter::testing::AnyData* nested_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nested_data_);
  }
  nested_data_ = nested_data;
  if (nested_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.AnyData.nested_data)
}
inline ::proto_util_converter::testing::AnyData* AnyData::release_nested_data() {
  
  ::proto_util_converter::testing::AnyData* temp = nested_data_;
  nested_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::AnyData* AnyData::unsafe_arena_release_nested_data() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.AnyData.nested_data)
  
  ::proto_util_converter::testing::AnyData* temp = nested_data_;
  nested_data_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyData* AnyData::_internal_mutable_nested_data() {
  
  if (nested_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyData>(GetArena());
    nested_data_ = p;
  }
  return nested_data_;
}
inline ::proto_util_converter::testing::AnyData* AnyData::mutable_nested_data() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyData.nested_data)
  return _internal_mutable_nested_data();
}
inline void AnyData::set_allocated_nested_data(::proto_util_converter::testing::AnyData* nested_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nested_data_;
  }
  if (nested_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_data);
    if (message_arena != submessage_arena) {
      nested_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_data, submessage_arena);
    }
    
  } else {
    
  }
  nested_data_ = nested_data;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.AnyData.nested_data)
}

// map<string, string> map_data = 7;
inline int AnyData::_internal_map_data_size() const {
  return map_data_.size();
}
inline int AnyData::map_data_size() const {
  return _internal_map_data_size();
}
inline void AnyData::clear_map_data() {
  map_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnyData::_internal_map_data() const {
  return map_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AnyData::map_data() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.AnyData.map_data)
  return _internal_map_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnyData::_internal_mutable_map_data() {
  return map_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AnyData::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.AnyData.map_data)
  return _internal_mutable_map_data();
}

// .google.protobuf.Struct struct_data = 8;
inline bool AnyData::_internal_has_struct_data() const {
  return this != internal_default_instance() && struct_data_ != nullptr;
}
inline bool AnyData::has_struct_data() const {
  return _internal_has_struct_data();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& AnyData::_internal_struct_data() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = struct_data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& AnyData::struct_data() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.struct_data)
  return _internal_struct_data();
}
inline void AnyData::unsafe_arena_set_allocated_struct_data(
    PROTOBUF_NAMESPACE_ID::Struct* struct_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_data_);
  }
  struct_data_ = struct_data;
  if (struct_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.AnyData.struct_data)
}
inline PROTOBUF_NAMESPACE_ID::Struct* AnyData::release_struct_data() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = struct_data_;
  struct_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AnyData::unsafe_arena_release_struct_data() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.AnyData.struct_data)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = struct_data_;
  struct_data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AnyData::_internal_mutable_struct_data() {
  
  if (struct_data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    struct_data_ = p;
  }
  return struct_data_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AnyData::mutable_struct_data() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyData.struct_data)
  return _internal_mutable_struct_data();
}
inline void AnyData::set_allocated_struct_data(PROTOBUF_NAMESPACE_ID::Struct* struct_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_data_);
  }
  if (struct_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_data)->GetArena();
    if (message_arena != submessage_arena) {
      struct_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_data, submessage_arena);
    }
    
  } else {
    
  }
  struct_data_ = struct_data;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.AnyData.struct_data)
}

// repeated .proto_util_converter.testing.AnyData repeated_data = 9;
inline int AnyData::_internal_repeated_data_size() const {
  return repeated_data_.size();
}
inline int AnyData::repeated_data_size() const {
  return _internal_repeated_data_size();
}
inline void AnyData::clear_repeated_data() {
  repeated_data_.Clear();
}
inline ::proto_util_converter::testing::AnyData* AnyData::mutable_repeated_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.AnyData.repeated_data)
  return repeated_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::AnyData >*
AnyData::mutable_repeated_data() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.AnyData.repeated_data)
  return &repeated_data_;
}
inline const ::proto_util_converter::testing::AnyData& AnyData::_internal_repeated_data(int index) const {
  return repeated_data_.Get(index);
}
inline const ::proto_util_converter::testing::AnyData& AnyData::repeated_data(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.AnyData.repeated_data)
  return _internal_repeated_data(index);
}
inline ::proto_util_converter::testing::AnyData* AnyData::_internal_add_repeated_data() {
  return repeated_data_.Add();
}
inline ::proto_util_converter::testing::AnyData* AnyData::add_repeated_data() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.AnyData.repeated_data)
  return _internal_add_repeated_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::AnyData >&
AnyData::repeated_data() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.AnyData.repeated_data)
  return repeated_data_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StringtoIntMap

// map<string, int32> map = 1;
inline int StringtoIntMap::_internal_map_size() const {
  return map_.size();
}
inline int StringtoIntMap::map_size() const {
  return _internal_map_size();
}
inline void StringtoIntMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
StringtoIntMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
StringtoIntMap::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.StringtoIntMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
StringtoIntMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
StringtoIntMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.StringtoIntMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IntToStringMap

// map<int32, string> map = 1;
inline int IntToStringMap::_internal_map_size() const {
  return map_.size();
}
inline int IntToStringMap::map_size() const {
  return _internal_map_size();
}
inline void IntToStringMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
IntToStringMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
IntToStringMap::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.IntToStringMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
IntToStringMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
IntToStringMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.IntToStringMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MixedMap

// string msg = 1;
inline void MixedMap::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MixedMap::msg() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MixedMap.msg)
  return _internal_msg();
}
inline void MixedMap::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MixedMap.msg)
}
inline std::string* MixedMap::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MixedMap.msg)
  return _internal_mutable_msg();
}
inline const std::string& MixedMap::_internal_msg() const {
  return msg_.Get();
}
inline void MixedMap::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MixedMap::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.MixedMap.msg)
}
inline void MixedMap::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.MixedMap.msg)
}
inline void MixedMap::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.MixedMap.msg)
}
inline std::string* MixedMap::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MixedMap::release_msg() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MixedMap.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MixedMap::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MixedMap.msg)
}

// map<string, float> map = 2;
inline int MixedMap::_internal_map_size() const {
  return map_.size();
}
inline int MixedMap::map_size() const {
  return _internal_map_size();
}
inline void MixedMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
MixedMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
MixedMap::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MixedMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
MixedMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
MixedMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MixedMap.map)
  return _internal_mutable_map();
}

// int32 int_value = 3;
inline void MixedMap::clear_int_value() {
  int_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MixedMap::_internal_int_value() const {
  return int_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MixedMap::int_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MixedMap.int_value)
  return _internal_int_value();
}
inline void MixedMap::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int_value_ = value;
}
inline void MixedMap::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MixedMap.int_value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MixedMap2

// map<int32, bool> map = 1;
inline int MixedMap2::_internal_map_size() const {
  return map_.size();
}
inline int MixedMap2::map_size() const {
  return _internal_map_size();
}
inline void MixedMap2::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
MixedMap2::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
MixedMap2::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MixedMap2.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
MixedMap2::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
MixedMap2::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MixedMap2.map)
  return _internal_mutable_map();
}

// .proto_util_converter.testing.MixedMap2.E ee = 2;
inline void MixedMap2::clear_ee() {
  ee_ = 0;
}
inline ::proto_util_converter::testing::MixedMap2_E MixedMap2::_internal_ee() const {
  return static_cast< ::proto_util_converter::testing::MixedMap2_E >(ee_);
}
inline ::proto_util_converter::testing::MixedMap2_E MixedMap2::ee() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MixedMap2.ee)
  return _internal_ee();
}
inline void MixedMap2::_internal_set_ee(::proto_util_converter::testing::MixedMap2_E value) {
  
  ee_ = value;
}
inline void MixedMap2::set_ee(::proto_util_converter::testing::MixedMap2_E value) {
  _internal_set_ee(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MixedMap2.ee)
}

// string msg = 4;
inline void MixedMap2::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MixedMap2::msg() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MixedMap2.msg)
  return _internal_msg();
}
inline void MixedMap2::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MixedMap2.msg)
}
inline std::string* MixedMap2::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MixedMap2.msg)
  return _internal_mutable_msg();
}
inline const std::string& MixedMap2::_internal_msg() const {
  return msg_.Get();
}
inline void MixedMap2::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MixedMap2::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.MixedMap2.msg)
}
inline void MixedMap2::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.MixedMap2.msg)
}
inline void MixedMap2::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.MixedMap2.msg)
}
inline std::string* MixedMap2::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MixedMap2::release_msg() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MixedMap2.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MixedMap2::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MixedMap2.msg)
}

// -------------------------------------------------------------------

// MessageMap_M

// int32 inner_int = 1;
inline void MessageMap_M::clear_inner_int() {
  inner_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageMap_M::_internal_inner_int() const {
  return inner_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageMap_M::inner_int() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MessageMap.M.inner_int)
  return _internal_inner_int();
}
inline void MessageMap_M::_internal_set_inner_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inner_int_ = value;
}
inline void MessageMap_M::set_inner_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inner_int(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MessageMap.M.inner_int)
}

// string inner_text = 2;
inline void MessageMap_M::clear_inner_text() {
  inner_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MessageMap_M::inner_text() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MessageMap.M.inner_text)
  return _internal_inner_text();
}
inline void MessageMap_M::set_inner_text(const std::string& value) {
  _internal_set_inner_text(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MessageMap.M.inner_text)
}
inline std::string* MessageMap_M::mutable_inner_text() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MessageMap.M.inner_text)
  return _internal_mutable_inner_text();
}
inline const std::string& MessageMap_M::_internal_inner_text() const {
  return inner_text_.Get();
}
inline void MessageMap_M::_internal_set_inner_text(const std::string& value) {
  
  inner_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageMap_M::set_inner_text(std::string&& value) {
  
  inner_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.MessageMap.M.inner_text)
}
inline void MessageMap_M::set_inner_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.MessageMap.M.inner_text)
}
inline void MessageMap_M::set_inner_text(const char* value,
    size_t size) {
  
  inner_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.MessageMap.M.inner_text)
}
inline std::string* MessageMap_M::_internal_mutable_inner_text() {
  
  return inner_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageMap_M::release_inner_text() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MessageMap.M.inner_text)
  return inner_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageMap_M::set_allocated_inner_text(std::string* inner_text) {
  if (inner_text != nullptr) {
    
  } else {
    
  }
  inner_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MessageMap.M.inner_text)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MessageMap

// map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
inline int MessageMap::_internal_map_size() const {
  return map_.size();
}
inline int MessageMap::map_size() const {
  return _internal_map_size();
}
inline void MessageMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >&
MessageMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >&
MessageMap::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MessageMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >*
MessageMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >*
MessageMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MessageMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// DoubleValueMessage

// .google.protobuf.DoubleValue double = 1;
inline bool DoubleValueMessage::_internal_has_double_() const {
  return this != internal_default_instance() && double__ != nullptr;
}
inline bool DoubleValueMessage::has_double_() const {
  return _internal_has_double_();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleValueMessage::_internal_double_() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = double__;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleValueMessage::double_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleValueMessage.double)
  return _internal_double_();
}
inline void DoubleValueMessage::unsafe_arena_set_allocated_double_(
    PROTOBUF_NAMESPACE_ID::DoubleValue* double_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double__);
  }
  double__ = double_;
  if (double_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DoubleValueMessage.double)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleValueMessage::release_double_() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double__;
  double__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleValueMessage::unsafe_arena_release_double_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DoubleValueMessage.double)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double__;
  double__ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleValueMessage::_internal_mutable_double_() {
  
  if (double__ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    double__ = p;
  }
  return double__;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleValueMessage::mutable_double_() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleValueMessage.double)
  return _internal_mutable_double_();
}
inline void DoubleValueMessage::set_allocated_double_(PROTOBUF_NAMESPACE_ID::DoubleValue* double_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double__);
  }
  if (double_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_)->GetArena();
    if (message_arena != submessage_arena) {
      double_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_, submessage_arena);
    }
    
  } else {
    
  }
  double__ = double_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DoubleValueMessage.double)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_util_converter::testing::MixedMap2_E> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_util_converter::testing::MixedMap2_E>() {
  return ::proto_util_converter::testing::MixedMap2_E_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto
