// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/field_mask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
namespace proto_util_converter {
namespace testing {
class FieldMaskTest;
class FieldMaskTestDefaultTypeInternal;
extern FieldMaskTestDefaultTypeInternal _FieldMaskTest_default_instance_;
class FieldMaskTestCases;
class FieldMaskTestCasesDefaultTypeInternal;
extern FieldMaskTestCasesDefaultTypeInternal _FieldMaskTestCases_default_instance_;
class FieldMaskWrapper;
class FieldMaskWrapperDefaultTypeInternal;
extern FieldMaskWrapperDefaultTypeInternal _FieldMaskWrapper_default_instance_;
class NestedFieldMask;
class NestedFieldMaskDefaultTypeInternal;
extern NestedFieldMaskDefaultTypeInternal _NestedFieldMask_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::FieldMaskTest* Arena::CreateMaybeMessage<::proto_util_converter::testing::FieldMaskTest>(Arena*);
template<> ::proto_util_converter::testing::FieldMaskTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::FieldMaskTestCases>(Arena*);
template<> ::proto_util_converter::testing::FieldMaskWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(Arena*);
template<> ::proto_util_converter::testing::NestedFieldMask* Arena::CreateMaybeMessage<::proto_util_converter::testing::NestedFieldMask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

// ===================================================================

class NestedFieldMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.NestedFieldMask) */ {
 public:
  inline NestedFieldMask() : NestedFieldMask(nullptr) {}
  virtual ~NestedFieldMask();

  NestedFieldMask(const NestedFieldMask& from);
  NestedFieldMask(NestedFieldMask&& from) noexcept
    : NestedFieldMask() {
    *this = ::std::move(from);
  }

  inline NestedFieldMask& operator=(const NestedFieldMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedFieldMask& operator=(NestedFieldMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NestedFieldMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NestedFieldMask* internal_default_instance() {
    return reinterpret_cast<const NestedFieldMask*>(
               &_NestedFieldMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NestedFieldMask& a, NestedFieldMask& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedFieldMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedFieldMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NestedFieldMask* New() const final {
    return CreateMaybeMessage<NestedFieldMask>(nullptr);
  }

  NestedFieldMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NestedFieldMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NestedFieldMask& from);
  void MergeFrom(const NestedFieldMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedFieldMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.NestedFieldMask";
  }
  protected:
  explicit NestedFieldMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedMaskFieldNumber = 3,
    kDataFieldNumber = 1,
    kSingleMaskFieldNumber = 2,
  };
  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  int repeated_mask_size() const;
  private:
  int _internal_repeated_mask_size() const;
  public:
  void clear_repeated_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_repeated_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >*
      mutable_repeated_mask();
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_repeated_mask(int index) const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_add_repeated_mask();
  public:
  const PROTOBUF_NAMESPACE_ID::FieldMask& repeated_mask(int index) const;
  PROTOBUF_NAMESPACE_ID::FieldMask* add_repeated_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >&
      repeated_mask() const;

  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .google.protobuf.FieldMask single_mask = 2;
  bool has_single_mask() const;
  private:
  bool _internal_has_single_mask() const;
  public:
  void clear_single_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& single_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_single_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_single_mask();
  void set_allocated_single_mask(PROTOBUF_NAMESPACE_ID::FieldMask* single_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_single_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_single_mask();
  public:
  void unsafe_arena_set_allocated_single_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* single_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_single_mask();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.NestedFieldMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask > repeated_mask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  PROTOBUF_NAMESPACE_ID::FieldMask* single_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
};
// -------------------------------------------------------------------

class FieldMaskTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.FieldMaskTest) */ {
 public:
  inline FieldMaskTest() : FieldMaskTest(nullptr) {}
  virtual ~FieldMaskTest();

  FieldMaskTest(const FieldMaskTest& from);
  FieldMaskTest(FieldMaskTest&& from) noexcept
    : FieldMaskTest() {
    *this = ::std::move(from);
  }

  inline FieldMaskTest& operator=(const FieldMaskTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMaskTest& operator=(FieldMaskTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMaskTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMaskTest* internal_default_instance() {
    return reinterpret_cast<const FieldMaskTest*>(
               &_FieldMaskTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldMaskTest& a, FieldMaskTest& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMaskTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMaskTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMaskTest* New() const final {
    return CreateMaybeMessage<FieldMaskTest>(nullptr);
  }

  FieldMaskTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMaskTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMaskTest& from);
  void MergeFrom(const FieldMaskTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMaskTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.FieldMaskTest";
  }
  protected:
  explicit FieldMaskTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedMaskFieldNumber = 3,
    kNestedMaskFieldNumber = 4,
    kIdFieldNumber = 1,
    kSingleMaskFieldNumber = 2,
  };
  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  int repeated_mask_size() const;
  private:
  int _internal_repeated_mask_size() const;
  public:
  void clear_repeated_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_repeated_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >*
      mutable_repeated_mask();
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_repeated_mask(int index) const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_add_repeated_mask();
  public:
  const PROTOBUF_NAMESPACE_ID::FieldMask& repeated_mask(int index) const;
  PROTOBUF_NAMESPACE_ID::FieldMask* add_repeated_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >&
      repeated_mask() const;

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  int nested_mask_size() const;
  private:
  int _internal_nested_mask_size() const;
  public:
  void clear_nested_mask();
  ::proto_util_converter::testing::NestedFieldMask* mutable_nested_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::NestedFieldMask >*
      mutable_nested_mask();
  private:
  const ::proto_util_converter::testing::NestedFieldMask& _internal_nested_mask(int index) const;
  ::proto_util_converter::testing::NestedFieldMask* _internal_add_nested_mask();
  public:
  const ::proto_util_converter::testing::NestedFieldMask& nested_mask(int index) const;
  ::proto_util_converter::testing::NestedFieldMask* add_nested_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::NestedFieldMask >&
      nested_mask() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.FieldMask single_mask = 2;
  bool has_single_mask() const;
  private:
  bool _internal_has_single_mask() const;
  public:
  void clear_single_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& single_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_single_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_single_mask();
  void set_allocated_single_mask(PROTOBUF_NAMESPACE_ID::FieldMask* single_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_single_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_single_mask();
  public:
  void unsafe_arena_set_allocated_single_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* single_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_single_mask();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.FieldMaskTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask > repeated_mask_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::NestedFieldMask > nested_mask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::FieldMask* single_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
};
// -------------------------------------------------------------------

class FieldMaskTestCases PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.FieldMaskTestCases) */ {
 public:
  inline FieldMaskTestCases() : FieldMaskTestCases(nullptr) {}
  virtual ~FieldMaskTestCases();

  FieldMaskTestCases(const FieldMaskTestCases& from);
  FieldMaskTestCases(FieldMaskTestCases&& from) noexcept
    : FieldMaskTestCases() {
    *this = ::std::move(from);
  }

  inline FieldMaskTestCases& operator=(const FieldMaskTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMaskTestCases& operator=(FieldMaskTestCases&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMaskTestCases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMaskTestCases* internal_default_instance() {
    return reinterpret_cast<const FieldMaskTestCases*>(
               &_FieldMaskTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldMaskTestCases& a, FieldMaskTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMaskTestCases* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMaskTestCases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMaskTestCases* New() const final {
    return CreateMaybeMessage<FieldMaskTestCases>(nullptr);
  }

  FieldMaskTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMaskTestCases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMaskTestCases& from);
  void MergeFrom(const FieldMaskTestCases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMaskTestCases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.FieldMaskTestCases";
  }
  protected:
  explicit FieldMaskTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleMaskFieldNumber = 1,
    kMultipleMaskFieldNumber = 2,
    kSnakeCamelFieldNumber = 3,
    kEmptyFieldFieldNumber = 4,
    kApiaryFormat1FieldNumber = 5,
    kApiaryFormat2FieldNumber = 6,
    kApiaryFormat3FieldNumber = 7,
    kMapKey1FieldNumber = 8,
    kMapKey2FieldNumber = 9,
    kMapKey3FieldNumber = 10,
    kMapKey4FieldNumber = 11,
    kMapKey5FieldNumber = 12,
  };
  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  bool has_single_mask() const;
  private:
  bool _internal_has_single_mask() const;
  public:
  void clear_single_mask();
  const ::proto_util_converter::testing::FieldMaskWrapper& single_mask() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_single_mask();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_single_mask();
  void set_allocated_single_mask(::proto_util_converter::testing::FieldMaskWrapper* single_mask);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_single_mask() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_single_mask();
  public:
  void unsafe_arena_set_allocated_single_mask(
      ::proto_util_converter::testing::FieldMaskWrapper* single_mask);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_single_mask();

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  bool has_multiple_mask() const;
  private:
  bool _internal_has_multiple_mask() const;
  public:
  void clear_multiple_mask();
  const ::proto_util_converter::testing::FieldMaskWrapper& multiple_mask() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_multiple_mask();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_multiple_mask();
  void set_allocated_multiple_mask(::proto_util_converter::testing::FieldMaskWrapper* multiple_mask);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_multiple_mask() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_multiple_mask();
  public:
  void unsafe_arena_set_allocated_multiple_mask(
      ::proto_util_converter::testing::FieldMaskWrapper* multiple_mask);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_multiple_mask();

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  bool has_snake_camel() const;
  private:
  bool _internal_has_snake_camel() const;
  public:
  void clear_snake_camel();
  const ::proto_util_converter::testing::FieldMaskWrapper& snake_camel() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_snake_camel();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_snake_camel();
  void set_allocated_snake_camel(::proto_util_converter::testing::FieldMaskWrapper* snake_camel);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_snake_camel() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_snake_camel();
  public:
  void unsafe_arena_set_allocated_snake_camel(
      ::proto_util_converter::testing::FieldMaskWrapper* snake_camel);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_snake_camel();

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  bool has_empty_field() const;
  private:
  bool _internal_has_empty_field() const;
  public:
  void clear_empty_field();
  const ::proto_util_converter::testing::FieldMaskWrapper& empty_field() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_empty_field();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_empty_field();
  void set_allocated_empty_field(::proto_util_converter::testing::FieldMaskWrapper* empty_field);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_empty_field() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_empty_field();
  public:
  void unsafe_arena_set_allocated_empty_field(
      ::proto_util_converter::testing::FieldMaskWrapper* empty_field);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_empty_field();

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  bool has_apiary_format1() const;
  private:
  bool _internal_has_apiary_format1() const;
  public:
  void clear_apiary_format1();
  const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format1() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_apiary_format1();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_apiary_format1();
  void set_allocated_apiary_format1(::proto_util_converter::testing::FieldMaskWrapper* apiary_format1);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_apiary_format1() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_apiary_format1();
  public:
  void unsafe_arena_set_allocated_apiary_format1(
      ::proto_util_converter::testing::FieldMaskWrapper* apiary_format1);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_apiary_format1();

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  bool has_apiary_format2() const;
  private:
  bool _internal_has_apiary_format2() const;
  public:
  void clear_apiary_format2();
  const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format2() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_apiary_format2();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_apiary_format2();
  void set_allocated_apiary_format2(::proto_util_converter::testing::FieldMaskWrapper* apiary_format2);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_apiary_format2() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_apiary_format2();
  public:
  void unsafe_arena_set_allocated_apiary_format2(
      ::proto_util_converter::testing::FieldMaskWrapper* apiary_format2);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_apiary_format2();

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  bool has_apiary_format3() const;
  private:
  bool _internal_has_apiary_format3() const;
  public:
  void clear_apiary_format3();
  const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format3() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_apiary_format3();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_apiary_format3();
  void set_allocated_apiary_format3(::proto_util_converter::testing::FieldMaskWrapper* apiary_format3);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_apiary_format3() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_apiary_format3();
  public:
  void unsafe_arena_set_allocated_apiary_format3(
      ::proto_util_converter::testing::FieldMaskWrapper* apiary_format3);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_apiary_format3();

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  bool has_map_key1() const;
  private:
  bool _internal_has_map_key1() const;
  public:
  void clear_map_key1();
  const ::proto_util_converter::testing::FieldMaskWrapper& map_key1() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_map_key1();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_map_key1();
  void set_allocated_map_key1(::proto_util_converter::testing::FieldMaskWrapper* map_key1);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_map_key1() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_map_key1();
  public:
  void unsafe_arena_set_allocated_map_key1(
      ::proto_util_converter::testing::FieldMaskWrapper* map_key1);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_map_key1();

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  bool has_map_key2() const;
  private:
  bool _internal_has_map_key2() const;
  public:
  void clear_map_key2();
  const ::proto_util_converter::testing::FieldMaskWrapper& map_key2() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_map_key2();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_map_key2();
  void set_allocated_map_key2(::proto_util_converter::testing::FieldMaskWrapper* map_key2);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_map_key2() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_map_key2();
  public:
  void unsafe_arena_set_allocated_map_key2(
      ::proto_util_converter::testing::FieldMaskWrapper* map_key2);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_map_key2();

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  bool has_map_key3() const;
  private:
  bool _internal_has_map_key3() const;
  public:
  void clear_map_key3();
  const ::proto_util_converter::testing::FieldMaskWrapper& map_key3() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_map_key3();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_map_key3();
  void set_allocated_map_key3(::proto_util_converter::testing::FieldMaskWrapper* map_key3);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_map_key3() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_map_key3();
  public:
  void unsafe_arena_set_allocated_map_key3(
      ::proto_util_converter::testing::FieldMaskWrapper* map_key3);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_map_key3();

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  bool has_map_key4() const;
  private:
  bool _internal_has_map_key4() const;
  public:
  void clear_map_key4();
  const ::proto_util_converter::testing::FieldMaskWrapper& map_key4() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_map_key4();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_map_key4();
  void set_allocated_map_key4(::proto_util_converter::testing::FieldMaskWrapper* map_key4);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_map_key4() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_map_key4();
  public:
  void unsafe_arena_set_allocated_map_key4(
      ::proto_util_converter::testing::FieldMaskWrapper* map_key4);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_map_key4();

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  bool has_map_key5() const;
  private:
  bool _internal_has_map_key5() const;
  public:
  void clear_map_key5();
  const ::proto_util_converter::testing::FieldMaskWrapper& map_key5() const;
  ::proto_util_converter::testing::FieldMaskWrapper* release_map_key5();
  ::proto_util_converter::testing::FieldMaskWrapper* mutable_map_key5();
  void set_allocated_map_key5(::proto_util_converter::testing::FieldMaskWrapper* map_key5);
  private:
  const ::proto_util_converter::testing::FieldMaskWrapper& _internal_map_key5() const;
  ::proto_util_converter::testing::FieldMaskWrapper* _internal_mutable_map_key5();
  public:
  void unsafe_arena_set_allocated_map_key5(
      ::proto_util_converter::testing::FieldMaskWrapper* map_key5);
  ::proto_util_converter::testing::FieldMaskWrapper* unsafe_arena_release_map_key5();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.FieldMaskTestCases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_util_converter::testing::FieldMaskWrapper* single_mask_;
  ::proto_util_converter::testing::FieldMaskWrapper* multiple_mask_;
  ::proto_util_converter::testing::FieldMaskWrapper* snake_camel_;
  ::proto_util_converter::testing::FieldMaskWrapper* empty_field_;
  ::proto_util_converter::testing::FieldMaskWrapper* apiary_format1_;
  ::proto_util_converter::testing::FieldMaskWrapper* apiary_format2_;
  ::proto_util_converter::testing::FieldMaskWrapper* apiary_format3_;
  ::proto_util_converter::testing::FieldMaskWrapper* map_key1_;
  ::proto_util_converter::testing::FieldMaskWrapper* map_key2_;
  ::proto_util_converter::testing::FieldMaskWrapper* map_key3_;
  ::proto_util_converter::testing::FieldMaskWrapper* map_key4_;
  ::proto_util_converter::testing::FieldMaskWrapper* map_key5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
};
// -------------------------------------------------------------------

class FieldMaskWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.FieldMaskWrapper) */ {
 public:
  inline FieldMaskWrapper() : FieldMaskWrapper(nullptr) {}
  virtual ~FieldMaskWrapper();

  FieldMaskWrapper(const FieldMaskWrapper& from);
  FieldMaskWrapper(FieldMaskWrapper&& from) noexcept
    : FieldMaskWrapper() {
    *this = ::std::move(from);
  }

  inline FieldMaskWrapper& operator=(const FieldMaskWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMaskWrapper& operator=(FieldMaskWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMaskWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMaskWrapper* internal_default_instance() {
    return reinterpret_cast<const FieldMaskWrapper*>(
               &_FieldMaskWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FieldMaskWrapper& a, FieldMaskWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMaskWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMaskWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMaskWrapper* New() const final {
    return CreateMaybeMessage<FieldMaskWrapper>(nullptr);
  }

  FieldMaskWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMaskWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMaskWrapper& from);
  void MergeFrom(const FieldMaskWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMaskWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.FieldMaskWrapper";
  }
  protected:
  explicit FieldMaskWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
  };
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.FieldMaskWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NestedFieldMask

// string data = 1;
inline void NestedFieldMask::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NestedFieldMask::data() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.NestedFieldMask.data)
  return _internal_data();
}
inline void NestedFieldMask::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.NestedFieldMask.data)
}
inline std::string* NestedFieldMask::mutable_data() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.NestedFieldMask.data)
  return _internal_mutable_data();
}
inline const std::string& NestedFieldMask::_internal_data() const {
  return data_.Get();
}
inline void NestedFieldMask::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NestedFieldMask::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.NestedFieldMask.data)
}
inline void NestedFieldMask::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.NestedFieldMask.data)
}
inline void NestedFieldMask::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.NestedFieldMask.data)
}
inline std::string* NestedFieldMask::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NestedFieldMask::release_data() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.NestedFieldMask.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NestedFieldMask::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.NestedFieldMask.data)
}

// .google.protobuf.FieldMask single_mask = 2;
inline bool NestedFieldMask::_internal_has_single_mask() const {
  return this != internal_default_instance() && single_mask_ != nullptr;
}
inline bool NestedFieldMask::has_single_mask() const {
  return _internal_has_single_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& NestedFieldMask::_internal_single_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = single_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& NestedFieldMask::single_mask() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.NestedFieldMask.single_mask)
  return _internal_single_mask();
}
inline void NestedFieldMask::unsafe_arena_set_allocated_single_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* single_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask_);
  }
  single_mask_ = single_mask;
  if (single_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.NestedFieldMask.single_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::release_single_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = single_mask_;
  single_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::unsafe_arena_release_single_mask() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.NestedFieldMask.single_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = single_mask_;
  single_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::_internal_mutable_single_mask() {
  
  if (single_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    single_mask_ = p;
  }
  return single_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::mutable_single_mask() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.NestedFieldMask.single_mask)
  return _internal_mutable_single_mask();
}
inline void NestedFieldMask::set_allocated_single_mask(PROTOBUF_NAMESPACE_ID::FieldMask* single_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask_);
  }
  if (single_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask)->GetArena();
    if (message_arena != submessage_arena) {
      single_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_mask, submessage_arena);
    }
    
  } else {
    
  }
  single_mask_ = single_mask;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.NestedFieldMask.single_mask)
}

// repeated .google.protobuf.FieldMask repeated_mask = 3;
inline int NestedFieldMask::_internal_repeated_mask_size() const {
  return repeated_mask_.size();
}
inline int NestedFieldMask::repeated_mask_size() const {
  return _internal_repeated_mask_size();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::mutable_repeated_mask(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.NestedFieldMask.repeated_mask)
  return repeated_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >*
NestedFieldMask::mutable_repeated_mask() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.NestedFieldMask.repeated_mask)
  return &repeated_mask_;
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& NestedFieldMask::_internal_repeated_mask(int index) const {
  return repeated_mask_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& NestedFieldMask::repeated_mask(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.NestedFieldMask.repeated_mask)
  return _internal_repeated_mask(index);
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::_internal_add_repeated_mask() {
  return repeated_mask_.Add();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* NestedFieldMask::add_repeated_mask() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.NestedFieldMask.repeated_mask)
  return _internal_add_repeated_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >&
NestedFieldMask::repeated_mask() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.NestedFieldMask.repeated_mask)
  return repeated_mask_;
}

// -------------------------------------------------------------------

// FieldMaskTest

// string id = 1;
inline void FieldMaskTest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldMaskTest::id() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTest.id)
  return _internal_id();
}
inline void FieldMaskTest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.FieldMaskTest.id)
}
inline std::string* FieldMaskTest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTest.id)
  return _internal_mutable_id();
}
inline const std::string& FieldMaskTest::_internal_id() const {
  return id_.Get();
}
inline void FieldMaskTest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldMaskTest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.FieldMaskTest.id)
}
inline void FieldMaskTest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.FieldMaskTest.id)
}
inline void FieldMaskTest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.FieldMaskTest.id)
}
inline std::string* FieldMaskTest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldMaskTest::release_id() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldMaskTest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTest.id)
}

// .google.protobuf.FieldMask single_mask = 2;
inline bool FieldMaskTest::_internal_has_single_mask() const {
  return this != internal_default_instance() && single_mask_ != nullptr;
}
inline bool FieldMaskTest::has_single_mask() const {
  return _internal_has_single_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskTest::_internal_single_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = single_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskTest::single_mask() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTest.single_mask)
  return _internal_single_mask();
}
inline void FieldMaskTest::unsafe_arena_set_allocated_single_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* single_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask_);
  }
  single_mask_ = single_mask;
  if (single_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTest.single_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::release_single_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = single_mask_;
  single_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::unsafe_arena_release_single_mask() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTest.single_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = single_mask_;
  single_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::_internal_mutable_single_mask() {
  
  if (single_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    single_mask_ = p;
  }
  return single_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::mutable_single_mask() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTest.single_mask)
  return _internal_mutable_single_mask();
}
inline void FieldMaskTest::set_allocated_single_mask(PROTOBUF_NAMESPACE_ID::FieldMask* single_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask_);
  }
  if (single_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask)->GetArena();
    if (message_arena != submessage_arena) {
      single_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_mask, submessage_arena);
    }
    
  } else {
    
  }
  single_mask_ = single_mask;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTest.single_mask)
}

// repeated .google.protobuf.FieldMask repeated_mask = 3;
inline int FieldMaskTest::_internal_repeated_mask_size() const {
  return repeated_mask_.size();
}
inline int FieldMaskTest::repeated_mask_size() const {
  return _internal_repeated_mask_size();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::mutable_repeated_mask(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTest.repeated_mask)
  return repeated_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >*
FieldMaskTest::mutable_repeated_mask() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.FieldMaskTest.repeated_mask)
  return &repeated_mask_;
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskTest::_internal_repeated_mask(int index) const {
  return repeated_mask_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskTest::repeated_mask(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTest.repeated_mask)
  return _internal_repeated_mask(index);
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::_internal_add_repeated_mask() {
  return repeated_mask_.Add();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskTest::add_repeated_mask() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.FieldMaskTest.repeated_mask)
  return _internal_add_repeated_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FieldMask >&
FieldMaskTest::repeated_mask() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.FieldMaskTest.repeated_mask)
  return repeated_mask_;
}

// repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
inline int FieldMaskTest::_internal_nested_mask_size() const {
  return nested_mask_.size();
}
inline int FieldMaskTest::nested_mask_size() const {
  return _internal_nested_mask_size();
}
inline void FieldMaskTest::clear_nested_mask() {
  nested_mask_.Clear();
}
inline ::proto_util_converter::testing::NestedFieldMask* FieldMaskTest::mutable_nested_mask(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTest.nested_mask)
  return nested_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::NestedFieldMask >*
FieldMaskTest::mutable_nested_mask() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.FieldMaskTest.nested_mask)
  return &nested_mask_;
}
inline const ::proto_util_converter::testing::NestedFieldMask& FieldMaskTest::_internal_nested_mask(int index) const {
  return nested_mask_.Get(index);
}
inline const ::proto_util_converter::testing::NestedFieldMask& FieldMaskTest::nested_mask(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTest.nested_mask)
  return _internal_nested_mask(index);
}
inline ::proto_util_converter::testing::NestedFieldMask* FieldMaskTest::_internal_add_nested_mask() {
  return nested_mask_.Add();
}
inline ::proto_util_converter::testing::NestedFieldMask* FieldMaskTest::add_nested_mask() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.FieldMaskTest.nested_mask)
  return _internal_add_nested_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::NestedFieldMask >&
FieldMaskTest::nested_mask() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.FieldMaskTest.nested_mask)
  return nested_mask_;
}

// -------------------------------------------------------------------

// FieldMaskTestCases

// .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
inline bool FieldMaskTestCases::_internal_has_single_mask() const {
  return this != internal_default_instance() && single_mask_ != nullptr;
}
inline bool FieldMaskTestCases::has_single_mask() const {
  return _internal_has_single_mask();
}
inline void FieldMaskTestCases::clear_single_mask() {
  if (GetArena() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_single_mask() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = single_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::single_mask() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.single_mask)
  return _internal_single_mask();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_single_mask(
    ::proto_util_converter::testing::FieldMaskWrapper* single_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_mask_);
  }
  single_mask_ = single_mask;
  if (single_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.single_mask)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_single_mask() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = single_mask_;
  single_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_single_mask() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.single_mask)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = single_mask_;
  single_mask_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_single_mask() {
  
  if (single_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    single_mask_ = p;
  }
  return single_mask_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_single_mask() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.single_mask)
  return _internal_mutable_single_mask();
}
inline void FieldMaskTestCases::set_allocated_single_mask(::proto_util_converter::testing::FieldMaskWrapper* single_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete single_mask_;
  }
  if (single_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(single_mask);
    if (message_arena != submessage_arena) {
      single_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_mask, submessage_arena);
    }
    
  } else {
    
  }
  single_mask_ = single_mask;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.single_mask)
}

// .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
inline bool FieldMaskTestCases::_internal_has_multiple_mask() const {
  return this != internal_default_instance() && multiple_mask_ != nullptr;
}
inline bool FieldMaskTestCases::has_multiple_mask() const {
  return _internal_has_multiple_mask();
}
inline void FieldMaskTestCases::clear_multiple_mask() {
  if (GetArena() == nullptr && multiple_mask_ != nullptr) {
    delete multiple_mask_;
  }
  multiple_mask_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_multiple_mask() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = multiple_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::multiple_mask() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.multiple_mask)
  return _internal_multiple_mask();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_multiple_mask(
    ::proto_util_converter::testing::FieldMaskWrapper* multiple_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiple_mask_);
  }
  multiple_mask_ = multiple_mask;
  if (multiple_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.multiple_mask)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_multiple_mask() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = multiple_mask_;
  multiple_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_multiple_mask() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.multiple_mask)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = multiple_mask_;
  multiple_mask_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_multiple_mask() {
  
  if (multiple_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    multiple_mask_ = p;
  }
  return multiple_mask_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_multiple_mask() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.multiple_mask)
  return _internal_mutable_multiple_mask();
}
inline void FieldMaskTestCases::set_allocated_multiple_mask(::proto_util_converter::testing::FieldMaskWrapper* multiple_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multiple_mask_;
  }
  if (multiple_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiple_mask);
    if (message_arena != submessage_arena) {
      multiple_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_mask, submessage_arena);
    }
    
  } else {
    
  }
  multiple_mask_ = multiple_mask;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.multiple_mask)
}

// .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
inline bool FieldMaskTestCases::_internal_has_snake_camel() const {
  return this != internal_default_instance() && snake_camel_ != nullptr;
}
inline bool FieldMaskTestCases::has_snake_camel() const {
  return _internal_has_snake_camel();
}
inline void FieldMaskTestCases::clear_snake_camel() {
  if (GetArena() == nullptr && snake_camel_ != nullptr) {
    delete snake_camel_;
  }
  snake_camel_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_snake_camel() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = snake_camel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::snake_camel() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.snake_camel)
  return _internal_snake_camel();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_snake_camel(
    ::proto_util_converter::testing::FieldMaskWrapper* snake_camel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snake_camel_);
  }
  snake_camel_ = snake_camel;
  if (snake_camel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.snake_camel)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_snake_camel() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = snake_camel_;
  snake_camel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_snake_camel() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.snake_camel)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = snake_camel_;
  snake_camel_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_snake_camel() {
  
  if (snake_camel_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    snake_camel_ = p;
  }
  return snake_camel_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_snake_camel() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.snake_camel)
  return _internal_mutable_snake_camel();
}
inline void FieldMaskTestCases::set_allocated_snake_camel(::proto_util_converter::testing::FieldMaskWrapper* snake_camel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snake_camel_;
  }
  if (snake_camel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snake_camel);
    if (message_arena != submessage_arena) {
      snake_camel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snake_camel, submessage_arena);
    }
    
  } else {
    
  }
  snake_camel_ = snake_camel;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.snake_camel)
}

// .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
inline bool FieldMaskTestCases::_internal_has_empty_field() const {
  return this != internal_default_instance() && empty_field_ != nullptr;
}
inline bool FieldMaskTestCases::has_empty_field() const {
  return _internal_has_empty_field();
}
inline void FieldMaskTestCases::clear_empty_field() {
  if (GetArena() == nullptr && empty_field_ != nullptr) {
    delete empty_field_;
  }
  empty_field_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_empty_field() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = empty_field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::empty_field() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.empty_field)
  return _internal_empty_field();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_empty_field(
    ::proto_util_converter::testing::FieldMaskWrapper* empty_field) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_field_);
  }
  empty_field_ = empty_field;
  if (empty_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.empty_field)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_empty_field() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = empty_field_;
  empty_field_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_empty_field() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.empty_field)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = empty_field_;
  empty_field_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_empty_field() {
  
  if (empty_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    empty_field_ = p;
  }
  return empty_field_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_empty_field() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.empty_field)
  return _internal_mutable_empty_field();
}
inline void FieldMaskTestCases::set_allocated_empty_field(::proto_util_converter::testing::FieldMaskWrapper* empty_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete empty_field_;
  }
  if (empty_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(empty_field);
    if (message_arena != submessage_arena) {
      empty_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_field, submessage_arena);
    }
    
  } else {
    
  }
  empty_field_ = empty_field;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.empty_field)
}

// .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
inline bool FieldMaskTestCases::_internal_has_apiary_format1() const {
  return this != internal_default_instance() && apiary_format1_ != nullptr;
}
inline bool FieldMaskTestCases::has_apiary_format1() const {
  return _internal_has_apiary_format1();
}
inline void FieldMaskTestCases::clear_apiary_format1() {
  if (GetArena() == nullptr && apiary_format1_ != nullptr) {
    delete apiary_format1_;
  }
  apiary_format1_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_apiary_format1() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = apiary_format1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::apiary_format1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.apiary_format1)
  return _internal_apiary_format1();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_apiary_format1(
    ::proto_util_converter::testing::FieldMaskWrapper* apiary_format1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apiary_format1_);
  }
  apiary_format1_ = apiary_format1;
  if (apiary_format1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format1)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_apiary_format1() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format1_;
  apiary_format1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_apiary_format1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.apiary_format1)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format1_;
  apiary_format1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_apiary_format1() {
  
  if (apiary_format1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    apiary_format1_ = p;
  }
  return apiary_format1_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_apiary_format1() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.apiary_format1)
  return _internal_mutable_apiary_format1();
}
inline void FieldMaskTestCases::set_allocated_apiary_format1(::proto_util_converter::testing::FieldMaskWrapper* apiary_format1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apiary_format1_;
  }
  if (apiary_format1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apiary_format1);
    if (message_arena != submessage_arena) {
      apiary_format1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apiary_format1, submessage_arena);
    }
    
  } else {
    
  }
  apiary_format1_ = apiary_format1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format1)
}

// .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
inline bool FieldMaskTestCases::_internal_has_apiary_format2() const {
  return this != internal_default_instance() && apiary_format2_ != nullptr;
}
inline bool FieldMaskTestCases::has_apiary_format2() const {
  return _internal_has_apiary_format2();
}
inline void FieldMaskTestCases::clear_apiary_format2() {
  if (GetArena() == nullptr && apiary_format2_ != nullptr) {
    delete apiary_format2_;
  }
  apiary_format2_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_apiary_format2() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = apiary_format2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::apiary_format2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.apiary_format2)
  return _internal_apiary_format2();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_apiary_format2(
    ::proto_util_converter::testing::FieldMaskWrapper* apiary_format2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apiary_format2_);
  }
  apiary_format2_ = apiary_format2;
  if (apiary_format2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format2)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_apiary_format2() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format2_;
  apiary_format2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_apiary_format2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.apiary_format2)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format2_;
  apiary_format2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_apiary_format2() {
  
  if (apiary_format2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    apiary_format2_ = p;
  }
  return apiary_format2_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_apiary_format2() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.apiary_format2)
  return _internal_mutable_apiary_format2();
}
inline void FieldMaskTestCases::set_allocated_apiary_format2(::proto_util_converter::testing::FieldMaskWrapper* apiary_format2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apiary_format2_;
  }
  if (apiary_format2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apiary_format2);
    if (message_arena != submessage_arena) {
      apiary_format2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apiary_format2, submessage_arena);
    }
    
  } else {
    
  }
  apiary_format2_ = apiary_format2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format2)
}

// .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
inline bool FieldMaskTestCases::_internal_has_apiary_format3() const {
  return this != internal_default_instance() && apiary_format3_ != nullptr;
}
inline bool FieldMaskTestCases::has_apiary_format3() const {
  return _internal_has_apiary_format3();
}
inline void FieldMaskTestCases::clear_apiary_format3() {
  if (GetArena() == nullptr && apiary_format3_ != nullptr) {
    delete apiary_format3_;
  }
  apiary_format3_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_apiary_format3() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = apiary_format3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::apiary_format3() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.apiary_format3)
  return _internal_apiary_format3();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_apiary_format3(
    ::proto_util_converter::testing::FieldMaskWrapper* apiary_format3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apiary_format3_);
  }
  apiary_format3_ = apiary_format3;
  if (apiary_format3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format3)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_apiary_format3() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format3_;
  apiary_format3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_apiary_format3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.apiary_format3)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = apiary_format3_;
  apiary_format3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_apiary_format3() {
  
  if (apiary_format3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    apiary_format3_ = p;
  }
  return apiary_format3_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_apiary_format3() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.apiary_format3)
  return _internal_mutable_apiary_format3();
}
inline void FieldMaskTestCases::set_allocated_apiary_format3(::proto_util_converter::testing::FieldMaskWrapper* apiary_format3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apiary_format3_;
  }
  if (apiary_format3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apiary_format3);
    if (message_arena != submessage_arena) {
      apiary_format3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apiary_format3, submessage_arena);
    }
    
  } else {
    
  }
  apiary_format3_ = apiary_format3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.apiary_format3)
}

// .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
inline bool FieldMaskTestCases::_internal_has_map_key1() const {
  return this != internal_default_instance() && map_key1_ != nullptr;
}
inline bool FieldMaskTestCases::has_map_key1() const {
  return _internal_has_map_key1();
}
inline void FieldMaskTestCases::clear_map_key1() {
  if (GetArena() == nullptr && map_key1_ != nullptr) {
    delete map_key1_;
  }
  map_key1_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_map_key1() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = map_key1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::map_key1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.map_key1)
  return _internal_map_key1();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_map_key1(
    ::proto_util_converter::testing::FieldMaskWrapper* map_key1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key1_);
  }
  map_key1_ = map_key1;
  if (map_key1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key1)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_map_key1() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key1_;
  map_key1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_map_key1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.map_key1)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key1_;
  map_key1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_map_key1() {
  
  if (map_key1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    map_key1_ = p;
  }
  return map_key1_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_map_key1() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.map_key1)
  return _internal_mutable_map_key1();
}
inline void FieldMaskTestCases::set_allocated_map_key1(::proto_util_converter::testing::FieldMaskWrapper* map_key1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key1_;
  }
  if (map_key1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key1);
    if (message_arena != submessage_arena) {
      map_key1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key1, submessage_arena);
    }
    
  } else {
    
  }
  map_key1_ = map_key1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key1)
}

// .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
inline bool FieldMaskTestCases::_internal_has_map_key2() const {
  return this != internal_default_instance() && map_key2_ != nullptr;
}
inline bool FieldMaskTestCases::has_map_key2() const {
  return _internal_has_map_key2();
}
inline void FieldMaskTestCases::clear_map_key2() {
  if (GetArena() == nullptr && map_key2_ != nullptr) {
    delete map_key2_;
  }
  map_key2_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_map_key2() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = map_key2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::map_key2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.map_key2)
  return _internal_map_key2();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_map_key2(
    ::proto_util_converter::testing::FieldMaskWrapper* map_key2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key2_);
  }
  map_key2_ = map_key2;
  if (map_key2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key2)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_map_key2() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key2_;
  map_key2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_map_key2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.map_key2)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key2_;
  map_key2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_map_key2() {
  
  if (map_key2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    map_key2_ = p;
  }
  return map_key2_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_map_key2() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.map_key2)
  return _internal_mutable_map_key2();
}
inline void FieldMaskTestCases::set_allocated_map_key2(::proto_util_converter::testing::FieldMaskWrapper* map_key2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key2_;
  }
  if (map_key2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key2);
    if (message_arena != submessage_arena) {
      map_key2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key2, submessage_arena);
    }
    
  } else {
    
  }
  map_key2_ = map_key2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key2)
}

// .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
inline bool FieldMaskTestCases::_internal_has_map_key3() const {
  return this != internal_default_instance() && map_key3_ != nullptr;
}
inline bool FieldMaskTestCases::has_map_key3() const {
  return _internal_has_map_key3();
}
inline void FieldMaskTestCases::clear_map_key3() {
  if (GetArena() == nullptr && map_key3_ != nullptr) {
    delete map_key3_;
  }
  map_key3_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_map_key3() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = map_key3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::map_key3() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.map_key3)
  return _internal_map_key3();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_map_key3(
    ::proto_util_converter::testing::FieldMaskWrapper* map_key3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key3_);
  }
  map_key3_ = map_key3;
  if (map_key3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key3)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_map_key3() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key3_;
  map_key3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_map_key3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.map_key3)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key3_;
  map_key3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_map_key3() {
  
  if (map_key3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    map_key3_ = p;
  }
  return map_key3_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_map_key3() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.map_key3)
  return _internal_mutable_map_key3();
}
inline void FieldMaskTestCases::set_allocated_map_key3(::proto_util_converter::testing::FieldMaskWrapper* map_key3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key3_;
  }
  if (map_key3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key3);
    if (message_arena != submessage_arena) {
      map_key3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key3, submessage_arena);
    }
    
  } else {
    
  }
  map_key3_ = map_key3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key3)
}

// .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
inline bool FieldMaskTestCases::_internal_has_map_key4() const {
  return this != internal_default_instance() && map_key4_ != nullptr;
}
inline bool FieldMaskTestCases::has_map_key4() const {
  return _internal_has_map_key4();
}
inline void FieldMaskTestCases::clear_map_key4() {
  if (GetArena() == nullptr && map_key4_ != nullptr) {
    delete map_key4_;
  }
  map_key4_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_map_key4() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = map_key4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::map_key4() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.map_key4)
  return _internal_map_key4();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_map_key4(
    ::proto_util_converter::testing::FieldMaskWrapper* map_key4) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key4_);
  }
  map_key4_ = map_key4;
  if (map_key4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key4)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_map_key4() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key4_;
  map_key4_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_map_key4() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.map_key4)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key4_;
  map_key4_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_map_key4() {
  
  if (map_key4_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    map_key4_ = p;
  }
  return map_key4_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_map_key4() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.map_key4)
  return _internal_mutable_map_key4();
}
inline void FieldMaskTestCases::set_allocated_map_key4(::proto_util_converter::testing::FieldMaskWrapper* map_key4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key4_;
  }
  if (map_key4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key4);
    if (message_arena != submessage_arena) {
      map_key4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key4, submessage_arena);
    }
    
  } else {
    
  }
  map_key4_ = map_key4;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key4)
}

// .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
inline bool FieldMaskTestCases::_internal_has_map_key5() const {
  return this != internal_default_instance() && map_key5_ != nullptr;
}
inline bool FieldMaskTestCases::has_map_key5() const {
  return _internal_has_map_key5();
}
inline void FieldMaskTestCases::clear_map_key5() {
  if (GetArena() == nullptr && map_key5_ != nullptr) {
    delete map_key5_;
  }
  map_key5_ = nullptr;
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::_internal_map_key5() const {
  const ::proto_util_converter::testing::FieldMaskWrapper* p = map_key5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::FieldMaskWrapper*>(
      &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FieldMaskWrapper& FieldMaskTestCases::map_key5() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskTestCases.map_key5)
  return _internal_map_key5();
}
inline void FieldMaskTestCases::unsafe_arena_set_allocated_map_key5(
    ::proto_util_converter::testing::FieldMaskWrapper* map_key5) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_key5_);
  }
  map_key5_ = map_key5;
  if (map_key5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key5)
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::release_map_key5() {
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key5_;
  map_key5_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::unsafe_arena_release_map_key5() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskTestCases.map_key5)
  
  ::proto_util_converter::testing::FieldMaskWrapper* temp = map_key5_;
  map_key5_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::_internal_mutable_map_key5() {
  
  if (map_key5_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FieldMaskWrapper>(GetArena());
    map_key5_ = p;
  }
  return map_key5_;
}
inline ::proto_util_converter::testing::FieldMaskWrapper* FieldMaskTestCases::mutable_map_key5() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskTestCases.map_key5)
  return _internal_mutable_map_key5();
}
inline void FieldMaskTestCases::set_allocated_map_key5(::proto_util_converter::testing::FieldMaskWrapper* map_key5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_key5_;
  }
  if (map_key5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_key5);
    if (message_arena != submessage_arena) {
      map_key5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key5, submessage_arena);
    }
    
  } else {
    
  }
  map_key5_ = map_key5;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskTestCases.map_key5)
}

// -------------------------------------------------------------------

// FieldMaskWrapper

// .google.protobuf.FieldMask mask = 1;
inline bool FieldMaskWrapper::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool FieldMaskWrapper::has_mask() const {
  return _internal_has_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskWrapper::_internal_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& FieldMaskWrapper::mask() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FieldMaskWrapper.mask)
  return _internal_mask();
}
inline void FieldMaskWrapper::unsafe_arena_set_allocated_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FieldMaskWrapper.mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskWrapper::release_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskWrapper::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FieldMaskWrapper.mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskWrapper::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* FieldMaskWrapper::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FieldMaskWrapper.mask)
  return _internal_mutable_mask();
}
inline void FieldMaskWrapper::set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask)->GetArena();
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FieldMaskWrapper.mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto
