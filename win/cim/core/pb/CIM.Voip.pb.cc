// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Voip.proto
#include "CIM.Voip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CIM_2eDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMChannelInfo_CIM_2eDef_2eproto;
namespace CIM {
    namespace Voip {
        class CIMVoipInviteReqDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipInviteReq> _instance;
        } _CIMVoipInviteReq_default_instance_;
        class CIMVoipInviteReplyDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipInviteReply> _instance;
        } _CIMVoipInviteReply_default_instance_;
        class CIMVoipInviteReplyAckDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipInviteReplyAck> _instance;
        } _CIMVoipInviteReplyAck_default_instance_;
        class CIMVoipHeartbeatDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipHeartbeat> _instance;
        } _CIMVoipHeartbeat_default_instance_;
        class CIMVoipByeReqDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipByeReq> _instance;
        } _CIMVoipByeReq_default_instance_;
        class CIMVoipByeRspDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipByeRsp> _instance;
        } _CIMVoipByeRsp_default_instance_;
        class CIMVoipByeNotifyDefaultTypeInternal {
          public:
            ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMVoipByeNotify> _instance;
        } _CIMVoipByeNotify_default_instance_;
    }  // namespace Voip
}  // namespace CIM
static void InitDefaultsscc_info_CIMVoipByeNotify_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipByeNotify_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipByeNotify();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipByeNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMVoipByeNotify_CIM_2eVoip_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMVoipByeNotify_CIM_2eVoip_2eproto}, {
        &scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base,
    }
};

static void InitDefaultsscc_info_CIMVoipByeReq_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipByeReq_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipByeReq();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipByeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMVoipByeReq_CIM_2eVoip_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMVoipByeReq_CIM_2eVoip_2eproto}, {
        &scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base,
    }
};

static void InitDefaultsscc_info_CIMVoipByeRsp_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipByeRsp_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipByeRsp();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipByeRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMVoipByeRsp_CIM_2eVoip_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMVoipByeRsp_CIM_2eVoip_2eproto}, {}};

static void InitDefaultsscc_info_CIMVoipHeartbeat_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipHeartbeat_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipHeartbeat();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipHeartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMVoipHeartbeat_CIM_2eVoip_2eproto =
{{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMVoipHeartbeat_CIM_2eVoip_2eproto}, {}};

static void InitDefaultsscc_info_CIMVoipInviteReply_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipInviteReply_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipInviteReply();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipInviteReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMVoipInviteReply_CIM_2eVoip_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMVoipInviteReply_CIM_2eVoip_2eproto}, {
        &scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base,
    }
};

static void InitDefaultsscc_info_CIMVoipInviteReplyAck_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipInviteReplyAck_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipInviteReplyAck();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipInviteReplyAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMVoipInviteReplyAck_CIM_2eVoip_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMVoipInviteReplyAck_CIM_2eVoip_2eproto}, {
        &scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base,
    }
};

static void InitDefaultsscc_info_CIMVoipInviteReq_CIM_2eVoip_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::CIM::Voip::_CIMVoipInviteReq_default_instance_;
        new (ptr) ::CIM::Voip::CIMVoipInviteReq();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::CIM::Voip::CIMVoipInviteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMVoipInviteReq_CIM_2eVoip_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMVoipInviteReq_CIM_2eVoip_2eproto}, {
        &scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base,
    }
};

namespace CIM {
    namespace Voip {

// ===================================================================

        void CIMVoipInviteReq::InitAsDefaultInstance() {
            ::CIM::Voip::_CIMVoipInviteReq_default_instance_._instance.get_mutable()->channel_info_ = const_cast< ::CIM::Def::CIMChannelInfo*>(
                        ::CIM::Def::CIMChannelInfo::internal_default_instance());
        }
        class CIMVoipInviteReq::_Internal {
          public:
            static const ::CIM::Def::CIMChannelInfo& channel_info(const CIMVoipInviteReq* msg);
        };

        const ::CIM::Def::CIMChannelInfo&
        CIMVoipInviteReq::_Internal::channel_info(const CIMVoipInviteReq* msg) {
            return *msg->channel_info_;
        }
        void CIMVoipInviteReq::clear_channel_info() {
            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
        }
        CIMVoipInviteReq::CIMVoipInviteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
              invite_user_list_(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipInviteReq)
        }
        CIMVoipInviteReq::CIMVoipInviteReq(const CIMVoipInviteReq& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
              invite_user_list_(from.invite_user_list_) {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);

            if (from._internal_has_channel_info()) {
                channel_info_ = new ::CIM::Def::CIMChannelInfo(*from.channel_info_);

            } else {
                channel_info_ = nullptr;
            }

            ::memcpy(&creator_user_id_, &from.creator_user_id_,
                     static_cast<size_t>(reinterpret_cast<char*>(&invite_type_) -
                                         reinterpret_cast<char*>(&creator_user_id_)) + sizeof(invite_type_));
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipInviteReq)
        }

        void CIMVoipInviteReq::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMVoipInviteReq_CIM_2eVoip_2eproto.base);
            ::memset(&channel_info_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&invite_type_) -
                         reinterpret_cast<char*>(&channel_info_)) + sizeof(invite_type_));
        }

        CIMVoipInviteReq::~CIMVoipInviteReq() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipInviteReq)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipInviteReq::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);

            if (this != internal_default_instance()) delete channel_info_;
        }

        void CIMVoipInviteReq::ArenaDtor(void* object) {
            CIMVoipInviteReq* _this = reinterpret_cast< CIMVoipInviteReq* >(object);
            (void)_this;
        }
        void CIMVoipInviteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipInviteReq::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipInviteReq& CIMVoipInviteReq::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipInviteReq_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipInviteReq)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            invite_user_list_.Clear();

            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
            ::memset(&creator_user_id_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&invite_type_) -
                         reinterpret_cast<char*>(&creator_user_id_)) + sizeof(invite_type_));
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipInviteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // uint64 creator_user_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                        creator_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // repeated uint64 invite_user_list = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_invite_user_list(), ptr, ctx);
                        CHK_(ptr);

                    } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
                        _internal_add_invite_user_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMVoipInviteType invite_type = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_invite_type(static_cast<::CIM::Def::CIMVoipInviteType>(val));

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMChannelInfo channel_info = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
                        ptr = ctx->ParseMessage(_internal_mutable_channel_info(), ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipInviteReq::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipInviteReq)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // uint64 creator_user_id = 1;
            if (this->creator_user_id() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_creator_user_id(), target);
            }

            // repeated uint64 invite_user_list = 2;
            {
                int byte_size = _invite_user_list_cached_byte_size_.load(std::memory_order_relaxed);

                if (byte_size > 0) {
                    target = stream->WriteUInt64Packed(
                                 2, _internal_invite_user_list(), byte_size, target);
                }
            }

            // .CIM.Def.CIMVoipInviteType invite_type = 3;
            if (this->invite_type() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                             3, this->_internal_invite_type(), target);
            }

            // .CIM.Def.CIMChannelInfo channel_info = 4;
            if (this->has_channel_info()) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                         InternalWriteMessage(
                             4, _Internal::channel_info(this), target, stream);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipInviteReq)
            return target;
        }

        size_t CIMVoipInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipInviteReq)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // repeated uint64 invite_user_list = 2;
            {
                size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                                   UInt64Size(this->invite_user_list_);

                if (data_size > 0) {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                                      static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
                }

                int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
                _invite_user_list_cached_byte_size_.store(cached_size,
                        std::memory_order_relaxed);
                total_size += data_size;
            }

            // .CIM.Def.CIMChannelInfo channel_info = 4;
            if (this->has_channel_info()) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                  *channel_info_);
            }

            // uint64 creator_user_id = 1;
            if (this->creator_user_id() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                                  this->_internal_creator_user_id());
            }

            // .CIM.Def.CIMVoipInviteType invite_type = 3;
            if (this->invite_type() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_invite_type());
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipInviteReq::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipInviteReq*>(
                          &from));
        }

        void CIMVoipInviteReq::MergeFrom(const CIMVoipInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipInviteReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            invite_user_list_.MergeFrom(from.invite_user_list_);

            if (from.has_channel_info()) {
                _internal_mutable_channel_info()->::CIM::Def::CIMChannelInfo::MergeFrom(from._internal_channel_info());
            }

            if (from.creator_user_id() != 0) {
                _internal_set_creator_user_id(from._internal_creator_user_id());
            }

            if (from.invite_type() != 0) {
                _internal_set_invite_type(from._internal_invite_type());
            }
        }

        void CIMVoipInviteReq::CopyFrom(const CIMVoipInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipInviteReq)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipInviteReq::IsInitialized() const {
            return true;
        }

        void CIMVoipInviteReq::InternalSwap(CIMVoipInviteReq* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            invite_user_list_.InternalSwap(&other->invite_user_list_);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap <
            PROTOBUF_FIELD_OFFSET(CIMVoipInviteReq, invite_type_)
            + sizeof(CIMVoipInviteReq::invite_type_)
            - PROTOBUF_FIELD_OFFSET(CIMVoipInviteReq, channel_info_) > (
                reinterpret_cast<char*>(&channel_info_),
                reinterpret_cast<char*>(&other->channel_info_));
        }

        std::string CIMVoipInviteReq::GetTypeName() const {
            return "CIM.Voip.CIMVoipInviteReq";
        }


// ===================================================================

        void CIMVoipInviteReply::InitAsDefaultInstance() {
            ::CIM::Voip::_CIMVoipInviteReply_default_instance_._instance.get_mutable()->channel_info_ = const_cast< ::CIM::Def::CIMChannelInfo*>(
                        ::CIM::Def::CIMChannelInfo::internal_default_instance());
        }
        class CIMVoipInviteReply::_Internal {
          public:
            static const ::CIM::Def::CIMChannelInfo& channel_info(const CIMVoipInviteReply* msg);
        };

        const ::CIM::Def::CIMChannelInfo&
        CIMVoipInviteReply::_Internal::channel_info(const CIMVoipInviteReply* msg) {
            return *msg->channel_info_;
        }
        void CIMVoipInviteReply::clear_channel_info() {
            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
        }
        CIMVoipInviteReply::CIMVoipInviteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipInviteReply)
        }
        CIMVoipInviteReply::CIMVoipInviteReply(const CIMVoipInviteReply& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);

            if (from._internal_has_channel_info()) {
                channel_info_ = new ::CIM::Def::CIMChannelInfo(*from.channel_info_);

            } else {
                channel_info_ = nullptr;
            }

            ::memcpy(&user_id_, &from.user_id_,
                     static_cast<size_t>(reinterpret_cast<char*>(&rsp_code_) -
                                         reinterpret_cast<char*>(&user_id_)) + sizeof(rsp_code_));
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipInviteReply)
        }

        void CIMVoipInviteReply::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMVoipInviteReply_CIM_2eVoip_2eproto.base);
            ::memset(&channel_info_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&rsp_code_) -
                         reinterpret_cast<char*>(&channel_info_)) + sizeof(rsp_code_));
        }

        CIMVoipInviteReply::~CIMVoipInviteReply() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipInviteReply)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipInviteReply::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);

            if (this != internal_default_instance()) delete channel_info_;
        }

        void CIMVoipInviteReply::ArenaDtor(void* object) {
            CIMVoipInviteReply* _this = reinterpret_cast< CIMVoipInviteReply* >(object);
            (void)_this;
        }
        void CIMVoipInviteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipInviteReply::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipInviteReply& CIMVoipInviteReply::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipInviteReply_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipInviteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipInviteReply)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
            ::memset(&user_id_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&rsp_code_) -
                         reinterpret_cast<char*>(&user_id_)) + sizeof(rsp_code_));
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipInviteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // uint64 user_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                        user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMInviteRspCode rsp_code = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_rsp_code(static_cast<::CIM::Def::CIMInviteRspCode>(val));

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMChannelInfo channel_info = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                        ptr = ctx->ParseMessage(_internal_mutable_channel_info(), ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipInviteReply::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipInviteReply)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // uint64 user_id = 1;
            if (this->user_id() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
            }

            // .CIM.Def.CIMInviteRspCode rsp_code = 2;
            if (this->rsp_code() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                             2, this->_internal_rsp_code(), target);
            }

            // .CIM.Def.CIMChannelInfo channel_info = 3;
            if (this->has_channel_info()) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                         InternalWriteMessage(
                             3, _Internal::channel_info(this), target, stream);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipInviteReply)
            return target;
        }

        size_t CIMVoipInviteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipInviteReply)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // .CIM.Def.CIMChannelInfo channel_info = 3;
            if (this->has_channel_info()) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                  *channel_info_);
            }

            // uint64 user_id = 1;
            if (this->user_id() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                                  this->_internal_user_id());
            }

            // .CIM.Def.CIMInviteRspCode rsp_code = 2;
            if (this->rsp_code() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rsp_code());
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipInviteReply::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipInviteReply*>(
                          &from));
        }

        void CIMVoipInviteReply::MergeFrom(const CIMVoipInviteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipInviteReply)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_channel_info()) {
                _internal_mutable_channel_info()->::CIM::Def::CIMChannelInfo::MergeFrom(from._internal_channel_info());
            }

            if (from.user_id() != 0) {
                _internal_set_user_id(from._internal_user_id());
            }

            if (from.rsp_code() != 0) {
                _internal_set_rsp_code(from._internal_rsp_code());
            }
        }

        void CIMVoipInviteReply::CopyFrom(const CIMVoipInviteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipInviteReply)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipInviteReply::IsInitialized() const {
            return true;
        }

        void CIMVoipInviteReply::InternalSwap(CIMVoipInviteReply* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap <
            PROTOBUF_FIELD_OFFSET(CIMVoipInviteReply, rsp_code_)
            + sizeof(CIMVoipInviteReply::rsp_code_)
            - PROTOBUF_FIELD_OFFSET(CIMVoipInviteReply, channel_info_) > (
                reinterpret_cast<char*>(&channel_info_),
                reinterpret_cast<char*>(&other->channel_info_));
        }

        std::string CIMVoipInviteReply::GetTypeName() const {
            return "CIM.Voip.CIMVoipInviteReply";
        }


// ===================================================================

        void CIMVoipInviteReplyAck::InitAsDefaultInstance() {
            ::CIM::Voip::_CIMVoipInviteReplyAck_default_instance_._instance.get_mutable()->channel_info_ = const_cast< ::CIM::Def::CIMChannelInfo*>(
                        ::CIM::Def::CIMChannelInfo::internal_default_instance());
        }
        class CIMVoipInviteReplyAck::_Internal {
          public:
            static const ::CIM::Def::CIMChannelInfo& channel_info(const CIMVoipInviteReplyAck* msg);
        };

        const ::CIM::Def::CIMChannelInfo&
        CIMVoipInviteReplyAck::_Internal::channel_info(const CIMVoipInviteReplyAck* msg) {
            return *msg->channel_info_;
        }
        void CIMVoipInviteReplyAck::clear_channel_info() {
            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
        }
        CIMVoipInviteReplyAck::CIMVoipInviteReplyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipInviteReplyAck)
        }
        CIMVoipInviteReplyAck::CIMVoipInviteReplyAck(const CIMVoipInviteReplyAck& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);

            if (from._internal_has_channel_info()) {
                channel_info_ = new ::CIM::Def::CIMChannelInfo(*from.channel_info_);

            } else {
                channel_info_ = nullptr;
            }

            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipInviteReplyAck)
        }

        void CIMVoipInviteReplyAck::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMVoipInviteReplyAck_CIM_2eVoip_2eproto.base);
            channel_info_ = nullptr;
        }

        CIMVoipInviteReplyAck::~CIMVoipInviteReplyAck() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipInviteReplyAck)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipInviteReplyAck::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);

            if (this != internal_default_instance()) delete channel_info_;
        }

        void CIMVoipInviteReplyAck::ArenaDtor(void* object) {
            CIMVoipInviteReplyAck* _this = reinterpret_cast< CIMVoipInviteReplyAck* >(object);
            (void)_this;
        }
        void CIMVoipInviteReplyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipInviteReplyAck::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipInviteReplyAck& CIMVoipInviteReplyAck::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipInviteReplyAck_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipInviteReplyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipInviteReplyAck)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipInviteReplyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // .CIM.Def.CIMChannelInfo channel_info = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
                        ptr = ctx->ParseMessage(_internal_mutable_channel_info(), ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipInviteReplyAck::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipInviteReplyAck)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // .CIM.Def.CIMChannelInfo channel_info = 1;
            if (this->has_channel_info()) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                         InternalWriteMessage(
                             1, _Internal::channel_info(this), target, stream);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipInviteReplyAck)
            return target;
        }

        size_t CIMVoipInviteReplyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipInviteReplyAck)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // .CIM.Def.CIMChannelInfo channel_info = 1;
            if (this->has_channel_info()) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                  *channel_info_);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipInviteReplyAck::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipInviteReplyAck*>(
                          &from));
        }

        void CIMVoipInviteReplyAck::MergeFrom(const CIMVoipInviteReplyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipInviteReplyAck)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_channel_info()) {
                _internal_mutable_channel_info()->::CIM::Def::CIMChannelInfo::MergeFrom(from._internal_channel_info());
            }
        }

        void CIMVoipInviteReplyAck::CopyFrom(const CIMVoipInviteReplyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipInviteReplyAck)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipInviteReplyAck::IsInitialized() const {
            return true;
        }

        void CIMVoipInviteReplyAck::InternalSwap(CIMVoipInviteReplyAck* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            swap(channel_info_, other->channel_info_);
        }

        std::string CIMVoipInviteReplyAck::GetTypeName() const {
            return "CIM.Voip.CIMVoipInviteReplyAck";
        }


// ===================================================================

        void CIMVoipHeartbeat::InitAsDefaultInstance() {
        }
        class CIMVoipHeartbeat::_Internal {
          public:
        };

        CIMVoipHeartbeat::CIMVoipHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipHeartbeat)
        }
        CIMVoipHeartbeat::CIMVoipHeartbeat(const CIMVoipHeartbeat& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipHeartbeat)
        }

        void CIMVoipHeartbeat::SharedCtor() {
        }

        CIMVoipHeartbeat::~CIMVoipHeartbeat() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipHeartbeat)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipHeartbeat::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
        }

        void CIMVoipHeartbeat::ArenaDtor(void* object) {
            CIMVoipHeartbeat* _this = reinterpret_cast< CIMVoipHeartbeat* >(object);
            (void)_this;
        }
        void CIMVoipHeartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipHeartbeat::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipHeartbeat& CIMVoipHeartbeat::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipHeartbeat_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipHeartbeat)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }

                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<std::string>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipHeartbeat::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipHeartbeat)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipHeartbeat)
            return target;
        }

        size_t CIMVoipHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipHeartbeat)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipHeartbeat::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipHeartbeat*>(
                          &from));
        }

        void CIMVoipHeartbeat::MergeFrom(const CIMVoipHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipHeartbeat)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

        }

        void CIMVoipHeartbeat::CopyFrom(const CIMVoipHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipHeartbeat)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipHeartbeat::IsInitialized() const {
            return true;
        }

        void CIMVoipHeartbeat::InternalSwap(CIMVoipHeartbeat* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
        }

        std::string CIMVoipHeartbeat::GetTypeName() const {
            return "CIM.Voip.CIMVoipHeartbeat";
        }


// ===================================================================

        void CIMVoipByeReq::InitAsDefaultInstance() {
            ::CIM::Voip::_CIMVoipByeReq_default_instance_._instance.get_mutable()->channel_info_ = const_cast< ::CIM::Def::CIMChannelInfo*>(
                        ::CIM::Def::CIMChannelInfo::internal_default_instance());
        }
        class CIMVoipByeReq::_Internal {
          public:
            static const ::CIM::Def::CIMChannelInfo& channel_info(const CIMVoipByeReq* msg);
        };

        const ::CIM::Def::CIMChannelInfo&
        CIMVoipByeReq::_Internal::channel_info(const CIMVoipByeReq* msg) {
            return *msg->channel_info_;
        }
        void CIMVoipByeReq::clear_channel_info() {
            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
        }
        CIMVoipByeReq::CIMVoipByeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipByeReq)
        }
        CIMVoipByeReq::CIMVoipByeReq(const CIMVoipByeReq& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);

            if (from._internal_has_channel_info()) {
                channel_info_ = new ::CIM::Def::CIMChannelInfo(*from.channel_info_);

            } else {
                channel_info_ = nullptr;
            }

            ::memcpy(&local_call_time_len_, &from.local_call_time_len_,
                     static_cast<size_t>(reinterpret_cast<char*>(&bye_reason_) -
                                         reinterpret_cast<char*>(&local_call_time_len_)) + sizeof(bye_reason_));
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipByeReq)
        }

        void CIMVoipByeReq::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMVoipByeReq_CIM_2eVoip_2eproto.base);
            ::memset(&channel_info_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&bye_reason_) -
                         reinterpret_cast<char*>(&channel_info_)) + sizeof(bye_reason_));
        }

        CIMVoipByeReq::~CIMVoipByeReq() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipByeReq)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipByeReq::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);

            if (this != internal_default_instance()) delete channel_info_;
        }

        void CIMVoipByeReq::ArenaDtor(void* object) {
            CIMVoipByeReq* _this = reinterpret_cast< CIMVoipByeReq* >(object);
            (void)_this;
        }
        void CIMVoipByeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipByeReq::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipByeReq& CIMVoipByeReq::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipByeReq_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipByeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipByeReq)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
            ::memset(&local_call_time_len_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&bye_reason_) -
                         reinterpret_cast<char*>(&local_call_time_len_)) + sizeof(bye_reason_));
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipByeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // uint64 local_call_time_len = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                        local_call_time_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // uint64 user_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                        user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMChannelInfo channel_info = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                        ptr = ctx->ParseMessage(_internal_mutable_channel_info(), ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMVoipByeReason bye_reason = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
                        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_bye_reason(static_cast<::CIM::Def::CIMVoipByeReason>(val));

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipByeReq::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipByeReq)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // uint64 local_call_time_len = 1;
            if (this->local_call_time_len() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_call_time_len(), target);
            }

            // uint64 user_id = 2;
            if (this->user_id() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
            }

            // .CIM.Def.CIMChannelInfo channel_info = 3;
            if (this->has_channel_info()) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                         InternalWriteMessage(
                             3, _Internal::channel_info(this), target, stream);
            }

            // .CIM.Def.CIMVoipByeReason bye_reason = 4;
            if (this->bye_reason() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                             4, this->_internal_bye_reason(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipByeReq)
            return target;
        }

        size_t CIMVoipByeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipByeReq)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // .CIM.Def.CIMChannelInfo channel_info = 3;
            if (this->has_channel_info()) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                  *channel_info_);
            }

            // uint64 local_call_time_len = 1;
            if (this->local_call_time_len() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                                  this->_internal_local_call_time_len());
            }

            // uint64 user_id = 2;
            if (this->user_id() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                                  this->_internal_user_id());
            }

            // .CIM.Def.CIMVoipByeReason bye_reason = 4;
            if (this->bye_reason() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bye_reason());
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipByeReq::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipByeReq*>(
                          &from));
        }

        void CIMVoipByeReq::MergeFrom(const CIMVoipByeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipByeReq)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_channel_info()) {
                _internal_mutable_channel_info()->::CIM::Def::CIMChannelInfo::MergeFrom(from._internal_channel_info());
            }

            if (from.local_call_time_len() != 0) {
                _internal_set_local_call_time_len(from._internal_local_call_time_len());
            }

            if (from.user_id() != 0) {
                _internal_set_user_id(from._internal_user_id());
            }

            if (from.bye_reason() != 0) {
                _internal_set_bye_reason(from._internal_bye_reason());
            }
        }

        void CIMVoipByeReq::CopyFrom(const CIMVoipByeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipByeReq)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipByeReq::IsInitialized() const {
            return true;
        }

        void CIMVoipByeReq::InternalSwap(CIMVoipByeReq* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap <
            PROTOBUF_FIELD_OFFSET(CIMVoipByeReq, bye_reason_)
            + sizeof(CIMVoipByeReq::bye_reason_)
            - PROTOBUF_FIELD_OFFSET(CIMVoipByeReq, channel_info_) > (
                reinterpret_cast<char*>(&channel_info_),
                reinterpret_cast<char*>(&other->channel_info_));
        }

        std::string CIMVoipByeReq::GetTypeName() const {
            return "CIM.Voip.CIMVoipByeReq";
        }


// ===================================================================

        void CIMVoipByeRsp::InitAsDefaultInstance() {
        }
        class CIMVoipByeRsp::_Internal {
          public:
        };

        CIMVoipByeRsp::CIMVoipByeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipByeRsp)
        }
        CIMVoipByeRsp::CIMVoipByeRsp(const CIMVoipByeRsp& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            error_code_ = from.error_code_;
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipByeRsp)
        }

        void CIMVoipByeRsp::SharedCtor() {
            error_code_ = 0;
        }

        CIMVoipByeRsp::~CIMVoipByeRsp() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipByeRsp)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipByeRsp::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
        }

        void CIMVoipByeRsp::ArenaDtor(void* object) {
            CIMVoipByeRsp* _this = reinterpret_cast< CIMVoipByeRsp* >(object);
            (void)_this;
        }
        void CIMVoipByeRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipByeRsp::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipByeRsp& CIMVoipByeRsp::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipByeRsp_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipByeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipByeRsp)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            error_code_ = 0;
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipByeRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // .CIM.Def.CIMErrorCode error_code = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_error_code(static_cast<::CIM::Def::CIMErrorCode>(val));

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipByeRsp::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipByeRsp)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // .CIM.Def.CIMErrorCode error_code = 1;
            if (this->error_code() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                             1, this->_internal_error_code(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipByeRsp)
            return target;
        }

        size_t CIMVoipByeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipByeRsp)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // .CIM.Def.CIMErrorCode error_code = 1;
            if (this->error_code() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipByeRsp::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipByeRsp*>(
                          &from));
        }

        void CIMVoipByeRsp::MergeFrom(const CIMVoipByeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipByeRsp)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.error_code() != 0) {
                _internal_set_error_code(from._internal_error_code());
            }
        }

        void CIMVoipByeRsp::CopyFrom(const CIMVoipByeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipByeRsp)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipByeRsp::IsInitialized() const {
            return true;
        }

        void CIMVoipByeRsp::InternalSwap(CIMVoipByeRsp* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            swap(error_code_, other->error_code_);
        }

        std::string CIMVoipByeRsp::GetTypeName() const {
            return "CIM.Voip.CIMVoipByeRsp";
        }


// ===================================================================

        void CIMVoipByeNotify::InitAsDefaultInstance() {
            ::CIM::Voip::_CIMVoipByeNotify_default_instance_._instance.get_mutable()->channel_info_ = const_cast< ::CIM::Def::CIMChannelInfo*>(
                        ::CIM::Def::CIMChannelInfo::internal_default_instance());
        }
        class CIMVoipByeNotify::_Internal {
          public:
            static const ::CIM::Def::CIMChannelInfo& channel_info(const CIMVoipByeNotify* msg);
        };

        const ::CIM::Def::CIMChannelInfo&
        CIMVoipByeNotify::_Internal::channel_info(const CIMVoipByeNotify* msg) {
            return *msg->channel_info_;
        }
        void CIMVoipByeNotify::clear_channel_info() {
            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
        }
        CIMVoipByeNotify::CIMVoipByeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
            SharedCtor();
            RegisterArenaDtor(arena);
            // @@protoc_insertion_point(arena_constructor:CIM.Voip.CIMVoipByeNotify)
        }
        CIMVoipByeNotify::CIMVoipByeNotify(const CIMVoipByeNotify& from)
            : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);

            if (from._internal_has_channel_info()) {
                channel_info_ = new ::CIM::Def::CIMChannelInfo(*from.channel_info_);

            } else {
                channel_info_ = nullptr;
            }

            ::memcpy(&user_id_, &from.user_id_,
                     static_cast<size_t>(reinterpret_cast<char*>(&byereason_) -
                                         reinterpret_cast<char*>(&user_id_)) + sizeof(byereason_));
            // @@protoc_insertion_point(copy_constructor:CIM.Voip.CIMVoipByeNotify)
        }

        void CIMVoipByeNotify::SharedCtor() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMVoipByeNotify_CIM_2eVoip_2eproto.base);
            ::memset(&channel_info_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&byereason_) -
                         reinterpret_cast<char*>(&channel_info_)) + sizeof(byereason_));
        }

        CIMVoipByeNotify::~CIMVoipByeNotify() {
            // @@protoc_insertion_point(destructor:CIM.Voip.CIMVoipByeNotify)
            SharedDtor();
            _internal_metadata_.Delete<std::string>();
        }

        void CIMVoipByeNotify::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);

            if (this != internal_default_instance()) delete channel_info_;
        }

        void CIMVoipByeNotify::ArenaDtor(void* object) {
            CIMVoipByeNotify* _this = reinterpret_cast< CIMVoipByeNotify* >(object);
            (void)_this;
        }
        void CIMVoipByeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
        }
        void CIMVoipByeNotify::SetCachedSize(int size) const {
            _cached_size_.Set(size);
        }
        const CIMVoipByeNotify& CIMVoipByeNotify::default_instance() {
            ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMVoipByeNotify_CIM_2eVoip_2eproto.base);
            return *internal_default_instance();
        }


        void CIMVoipByeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Voip.CIMVoipByeNotify)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            if (GetArena() == nullptr && channel_info_ != nullptr) {
                delete channel_info_;
            }

            channel_info_ = nullptr;
            ::memset(&user_id_, 0, static_cast<size_t>(
                         reinterpret_cast<char*>(&byereason_) -
                         reinterpret_cast<char*>(&user_id_)) + sizeof(byereason_));
            _internal_metadata_.Clear<std::string>();
        }

        const char* CIMVoipByeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
            (void)arena;

            while (!ctx->Done(&ptr)) {
                ::PROTOBUF_NAMESPACE_ID::uint32 tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                CHK_(ptr);

                switch (tag >> 3) {
                // uint64 user_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                        user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMChannelInfo channel_info = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                        ptr = ctx->ParseMessage(_internal_mutable_channel_info(), ptr);
                        CHK_(ptr);

                    } else goto handle_unusual;

                    continue;

                // .CIM.Def.CIMVoipByeReason byeReason = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_byereason(static_cast<::CIM::Def::CIMVoipByeReason>(val));

                    } else goto handle_unusual;

                    continue;

                default: {
handle_unusual:

                    if ((tag & 7) == 4 || tag == 0) {
                        ctx->SetLastTag(tag);
                        goto success;
                    }

                    ptr = UnknownFieldParse(tag,
                                            _internal_metadata_.mutable_unknown_fields<std::string>(),
                                            ptr, ctx);
                    CHK_(ptr != nullptr);
                    continue;
                }
                }  // switch
            }  // while

success:
            return ptr;
failure:
            ptr = nullptr;
            goto success;
#undef CHK_
        }

        ::PROTOBUF_NAMESPACE_ID::uint8* CIMVoipByeNotify::_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
            // @@protoc_insertion_point(serialize_to_array_start:CIM.Voip.CIMVoipByeNotify)
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            // uint64 user_id = 1;
            if (this->user_id() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
            }

            // .CIM.Def.CIMChannelInfo channel_info = 2;
            if (this->has_channel_info()) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                         InternalWriteMessage(
                             2, _Internal::channel_info(this), target, stream);
            }

            // .CIM.Def.CIMVoipByeReason byeReason = 3;
            if (this->byereason() != 0) {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                             3, this->_internal_byereason(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
                                          static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
            }

            // @@protoc_insertion_point(serialize_to_array_end:CIM.Voip.CIMVoipByeNotify)
            return target;
        }

        size_t CIMVoipByeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Voip.CIMVoipByeNotify)
            size_t total_size = 0;

            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // .CIM.Def.CIMChannelInfo channel_info = 2;
            if (this->has_channel_info()) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                  *channel_info_);
            }

            // uint64 user_id = 1;
            if (this->user_id() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                                  this->_internal_user_id());
            }

            // .CIM.Def.CIMVoipByeReason byeReason = 3;
            if (this->byereason() != 0) {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_byereason());
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
                total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
            }

            int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
            SetCachedSize(cached_size);
            return total_size;
        }

        void CIMVoipByeNotify::CheckTypeAndMergeFrom(
            const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
            MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMVoipByeNotify*>(
                          &from));
        }

        void CIMVoipByeNotify::MergeFrom(const CIMVoipByeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Voip.CIMVoipByeNotify)
            GOOGLE_DCHECK_NE(&from, this);
            _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
            (void) cached_has_bits;

            if (from.has_channel_info()) {
                _internal_mutable_channel_info()->::CIM::Def::CIMChannelInfo::MergeFrom(from._internal_channel_info());
            }

            if (from.user_id() != 0) {
                _internal_set_user_id(from._internal_user_id());
            }

            if (from.byereason() != 0) {
                _internal_set_byereason(from._internal_byereason());
            }
        }

        void CIMVoipByeNotify::CopyFrom(const CIMVoipByeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Voip.CIMVoipByeNotify)
            if (&from == this) return;

            Clear();
            MergeFrom(from);
        }

        bool CIMVoipByeNotify::IsInitialized() const {
            return true;
        }

        void CIMVoipByeNotify::InternalSwap(CIMVoipByeNotify* other) {
            using std::swap;
            _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap <
            PROTOBUF_FIELD_OFFSET(CIMVoipByeNotify, byereason_)
            + sizeof(CIMVoipByeNotify::byereason_)
            - PROTOBUF_FIELD_OFFSET(CIMVoipByeNotify, channel_info_) > (
                reinterpret_cast<char*>(&channel_info_),
                reinterpret_cast<char*>(&other->channel_info_));
        }

        std::string CIMVoipByeNotify::GetTypeName() const {
            return "CIM.Voip.CIMVoipByeNotify";
        }


// @@protoc_insertion_point(namespace_scope)
    }  // namespace Voip
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipInviteReq* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipInviteReq >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipInviteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipInviteReply* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipInviteReply >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipInviteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipInviteReplyAck* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipInviteReplyAck >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipInviteReplyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipHeartbeat* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipHeartbeat >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipByeReq* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipByeReq >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipByeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipByeRsp* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipByeRsp >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipByeRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Voip::CIMVoipByeNotify* Arena::CreateMaybeMessage< ::CIM::Voip::CIMVoipByeNotify >(Arena* arena) {
    return Arena::CreateMessageInternal< ::CIM::Voip::CIMVoipByeNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
