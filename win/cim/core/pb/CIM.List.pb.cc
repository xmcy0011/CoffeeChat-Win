// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.List.proto

#include "CIM.List.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CIM_2eDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMContactSessionInfo_CIM_2eDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CIM_2eDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgInfo_CIM_2eDef_2eproto;
namespace CIM {
namespace List {
class CIMRecentContactSessionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMRecentContactSessionReq> _instance;
} _CIMRecentContactSessionReq_default_instance_;
class CIMRecentContactSessionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMRecentContactSessionRsp> _instance;
} _CIMRecentContactSessionRsp_default_instance_;
class CIMGetMsgListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetMsgListReq> _instance;
} _CIMGetMsgListReq_default_instance_;
class CIMGetMsgListRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetMsgListRsp> _instance;
} _CIMGetMsgListRsp_default_instance_;
}  // namespace List
}  // namespace CIM
static void InitDefaultsscc_info_CIMGetMsgListReq_CIM_2eList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::List::_CIMGetMsgListReq_default_instance_;
    new (ptr) ::CIM::List::CIMGetMsgListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::List::CIMGetMsgListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMGetMsgListReq_CIM_2eList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMGetMsgListReq_CIM_2eList_2eproto}, {}};

static void InitDefaultsscc_info_CIMGetMsgListRsp_CIM_2eList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::List::_CIMGetMsgListRsp_default_instance_;
    new (ptr) ::CIM::List::CIMGetMsgListRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::List::CIMGetMsgListRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMGetMsgListRsp_CIM_2eList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMGetMsgListRsp_CIM_2eList_2eproto}, {
      &scc_info_CIMMsgInfo_CIM_2eDef_2eproto.base,}};

static void InitDefaultsscc_info_CIMRecentContactSessionReq_CIM_2eList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::List::_CIMRecentContactSessionReq_default_instance_;
    new (ptr) ::CIM::List::CIMRecentContactSessionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::List::CIMRecentContactSessionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMRecentContactSessionReq_CIM_2eList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMRecentContactSessionReq_CIM_2eList_2eproto}, {}};

static void InitDefaultsscc_info_CIMRecentContactSessionRsp_CIM_2eList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::List::_CIMRecentContactSessionRsp_default_instance_;
    new (ptr) ::CIM::List::CIMRecentContactSessionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::List::CIMRecentContactSessionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMRecentContactSessionRsp_CIM_2eList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMRecentContactSessionRsp_CIM_2eList_2eproto}, {
      &scc_info_CIMContactSessionInfo_CIM_2eDef_2eproto.base,}};

namespace CIM {
namespace List {

// ===================================================================

void CIMRecentContactSessionReq::InitAsDefaultInstance() {
}
class CIMRecentContactSessionReq::_Internal {
 public:
};

CIMRecentContactSessionReq::CIMRecentContactSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.List.CIMRecentContactSessionReq)
}
CIMRecentContactSessionReq::CIMRecentContactSessionReq(const CIMRecentContactSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:CIM.List.CIMRecentContactSessionReq)
}

void CIMRecentContactSessionReq::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_update_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(latest_update_time_));
}

CIMRecentContactSessionReq::~CIMRecentContactSessionReq() {
  // @@protoc_insertion_point(destructor:CIM.List.CIMRecentContactSessionReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMRecentContactSessionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMRecentContactSessionReq::ArenaDtor(void* object) {
  CIMRecentContactSessionReq* _this = reinterpret_cast< CIMRecentContactSessionReq* >(object);
  (void)_this;
}
void CIMRecentContactSessionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMRecentContactSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMRecentContactSessionReq& CIMRecentContactSessionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMRecentContactSessionReq_CIM_2eList_2eproto.base);
  return *internal_default_instance();
}


void CIMRecentContactSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.List.CIMRecentContactSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_update_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(latest_update_time_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMRecentContactSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latest_update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          latest_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMRecentContactSessionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.List.CIMRecentContactSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_latest_update_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.List.CIMRecentContactSessionReq)
  return target;
}

size_t CIMRecentContactSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.List.CIMRecentContactSessionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latest_update_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMRecentContactSessionReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMRecentContactSessionReq*>(
      &from));
}

void CIMRecentContactSessionReq::MergeFrom(const CIMRecentContactSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.List.CIMRecentContactSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.latest_update_time() != 0) {
    _internal_set_latest_update_time(from._internal_latest_update_time());
  }
}

void CIMRecentContactSessionReq::CopyFrom(const CIMRecentContactSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.List.CIMRecentContactSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMRecentContactSessionReq::IsInitialized() const {
  return true;
}

void CIMRecentContactSessionReq::InternalSwap(CIMRecentContactSessionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMRecentContactSessionReq, latest_update_time_)
      + sizeof(CIMRecentContactSessionReq::latest_update_time_)
      - PROTOBUF_FIELD_OFFSET(CIMRecentContactSessionReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMRecentContactSessionReq::GetTypeName() const {
  return "CIM.List.CIMRecentContactSessionReq";
}


// ===================================================================

void CIMRecentContactSessionRsp::InitAsDefaultInstance() {
}
class CIMRecentContactSessionRsp::_Internal {
 public:
};

void CIMRecentContactSessionRsp::clear_contact_session_list() {
  contact_session_list_.Clear();
}
CIMRecentContactSessionRsp::CIMRecentContactSessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  contact_session_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.List.CIMRecentContactSessionRsp)
}
CIMRecentContactSessionRsp::CIMRecentContactSessionRsp(const CIMRecentContactSessionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      contact_session_list_(from.contact_session_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_counts_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(unread_counts_));
  // @@protoc_insertion_point(copy_constructor:CIM.List.CIMRecentContactSessionRsp)
}

void CIMRecentContactSessionRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMRecentContactSessionRsp_CIM_2eList_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_counts_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(unread_counts_));
}

CIMRecentContactSessionRsp::~CIMRecentContactSessionRsp() {
  // @@protoc_insertion_point(destructor:CIM.List.CIMRecentContactSessionRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMRecentContactSessionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMRecentContactSessionRsp::ArenaDtor(void* object) {
  CIMRecentContactSessionRsp* _this = reinterpret_cast< CIMRecentContactSessionRsp* >(object);
  (void)_this;
}
void CIMRecentContactSessionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMRecentContactSessionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMRecentContactSessionRsp& CIMRecentContactSessionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMRecentContactSessionRsp_CIM_2eList_2eproto.base);
  return *internal_default_instance();
}


void CIMRecentContactSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.List.CIMRecentContactSessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contact_session_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_counts_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(unread_counts_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMRecentContactSessionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unread_counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unread_counts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CIM.Def.CIMContactSessionInfo contact_session_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contact_session_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMRecentContactSessionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.List.CIMRecentContactSessionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 unread_counts = 2;
  if (this->unread_counts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unread_counts(), target);
  }

  // repeated .CIM.Def.CIMContactSessionInfo contact_session_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contact_session_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_contact_session_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.List.CIMRecentContactSessionRsp)
  return target;
}

size_t CIMRecentContactSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.List.CIMRecentContactSessionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Def.CIMContactSessionInfo contact_session_list = 3;
  total_size += 1UL * this->_internal_contact_session_list_size();
  for (const auto& msg : this->contact_session_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint32 unread_counts = 2;
  if (this->unread_counts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unread_counts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMRecentContactSessionRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMRecentContactSessionRsp*>(
      &from));
}

void CIMRecentContactSessionRsp::MergeFrom(const CIMRecentContactSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.List.CIMRecentContactSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.unread_counts() != 0) {
    _internal_set_unread_counts(from._internal_unread_counts());
  }
}

void CIMRecentContactSessionRsp::CopyFrom(const CIMRecentContactSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.List.CIMRecentContactSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMRecentContactSessionRsp::IsInitialized() const {
  return true;
}

void CIMRecentContactSessionRsp::InternalSwap(CIMRecentContactSessionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  contact_session_list_.InternalSwap(&other->contact_session_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMRecentContactSessionRsp, unread_counts_)
      + sizeof(CIMRecentContactSessionRsp::unread_counts_)
      - PROTOBUF_FIELD_OFFSET(CIMRecentContactSessionRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMRecentContactSessionRsp::GetTypeName() const {
  return "CIM.List.CIMRecentContactSessionRsp";
}


// ===================================================================

void CIMGetMsgListReq::InitAsDefaultInstance() {
}
class CIMGetMsgListReq::_Internal {
 public:
};

CIMGetMsgListReq::CIMGetMsgListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.List.CIMGetMsgListReq)
}
CIMGetMsgListReq::CIMGetMsgListReq(const CIMGetMsgListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_count_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(limit_count_));
  // @@protoc_insertion_point(copy_constructor:CIM.List.CIMGetMsgListReq)
}

void CIMGetMsgListReq::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_count_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(limit_count_));
}

CIMGetMsgListReq::~CIMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:CIM.List.CIMGetMsgListReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetMsgListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMGetMsgListReq::ArenaDtor(void* object) {
  CIMGetMsgListReq* _this = reinterpret_cast< CIMGetMsgListReq* >(object);
  (void)_this;
}
void CIMGetMsgListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetMsgListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetMsgListReq& CIMGetMsgListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetMsgListReq_CIM_2eList_2eproto.base);
  return *internal_default_instance();
}


void CIMGetMsgListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.List.CIMGetMsgListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_count_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(limit_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetMsgListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetMsgListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.List.CIMGetMsgListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  // uint64 end_msg_id = 4;
  if (this->end_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_msg_id(), target);
  }

  // uint32 limit_count = 6;
  if (this->limit_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_limit_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.List.CIMGetMsgListReq)
  return target;
}

size_t CIMGetMsgListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.List.CIMGetMsgListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 end_msg_id = 4;
  if (this->end_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_msg_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 limit_count = 6;
  if (this->limit_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetMsgListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetMsgListReq*>(
      &from));
}

void CIMGetMsgListReq::MergeFrom(const CIMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.List.CIMGetMsgListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.end_msg_id() != 0) {
    _internal_set_end_msg_id(from._internal_end_msg_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.limit_count() != 0) {
    _internal_set_limit_count(from._internal_limit_count());
  }
}

void CIMGetMsgListReq::CopyFrom(const CIMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.List.CIMGetMsgListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetMsgListReq::IsInitialized() const {
  return true;
}

void CIMGetMsgListReq::InternalSwap(CIMGetMsgListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetMsgListReq, limit_count_)
      + sizeof(CIMGetMsgListReq::limit_count_)
      - PROTOBUF_FIELD_OFFSET(CIMGetMsgListReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetMsgListReq::GetTypeName() const {
  return "CIM.List.CIMGetMsgListReq";
}


// ===================================================================

void CIMGetMsgListRsp::InitAsDefaultInstance() {
}
class CIMGetMsgListRsp::_Internal {
 public:
};

void CIMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
CIMGetMsgListRsp::CIMGetMsgListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  msg_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.List.CIMGetMsgListRsp)
}
CIMGetMsgListRsp::CIMGetMsgListRsp(const CIMGetMsgListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.List.CIMGetMsgListRsp)
}

void CIMGetMsgListRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMGetMsgListRsp_CIM_2eList_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMGetMsgListRsp::~CIMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:CIM.List.CIMGetMsgListRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetMsgListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMGetMsgListRsp::ArenaDtor(void* object) {
  CIMGetMsgListRsp* _this = reinterpret_cast< CIMGetMsgListRsp* >(object);
  (void)_this;
}
void CIMGetMsgListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetMsgListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetMsgListRsp& CIMGetMsgListRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetMsgListRsp_CIM_2eList_2eproto.base);
  return *internal_default_instance();
}


void CIMGetMsgListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.List.CIMGetMsgListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetMsgListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CIM.Def.CIMMsgInfo msg_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetMsgListRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.List.CIMGetMsgListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  // uint64 end_msg_id = 4;
  if (this->end_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_msg_id(), target);
  }

  // repeated .CIM.Def.CIMMsgInfo msg_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_msg_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.List.CIMGetMsgListRsp)
  return target;
}

size_t CIMGetMsgListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.List.CIMGetMsgListRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Def.CIMMsgInfo msg_list = 6;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 end_msg_id = 4;
  if (this->end_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_msg_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetMsgListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetMsgListRsp*>(
      &from));
}

void CIMGetMsgListRsp::MergeFrom(const CIMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.List.CIMGetMsgListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.end_msg_id() != 0) {
    _internal_set_end_msg_id(from._internal_end_msg_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMGetMsgListRsp::CopyFrom(const CIMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.List.CIMGetMsgListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetMsgListRsp::IsInitialized() const {
  return true;
}

void CIMGetMsgListRsp::InternalSwap(CIMGetMsgListRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetMsgListRsp, session_type_)
      + sizeof(CIMGetMsgListRsp::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMGetMsgListRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetMsgListRsp::GetTypeName() const {
  return "CIM.List.CIMGetMsgListRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace List
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::List::CIMRecentContactSessionReq* Arena::CreateMaybeMessage< ::CIM::List::CIMRecentContactSessionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::List::CIMRecentContactSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::List::CIMRecentContactSessionRsp* Arena::CreateMaybeMessage< ::CIM::List::CIMRecentContactSessionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::List::CIMRecentContactSessionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::List::CIMGetMsgListReq* Arena::CreateMaybeMessage< ::CIM::List::CIMGetMsgListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::List::CIMGetMsgListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::List::CIMGetMsgListRsp* Arena::CreateMaybeMessage< ::CIM::List::CIMGetMsgListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::List::CIMGetMsgListRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
