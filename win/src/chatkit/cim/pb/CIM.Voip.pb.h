// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Voip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CIM_2eVoip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CIM_2eVoip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CIM.Def.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CIM_2eVoip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CIM_2eVoip_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace CIM {
namespace Voip {
class CIMVoipByeNotify;
class CIMVoipByeNotifyDefaultTypeInternal;
extern CIMVoipByeNotifyDefaultTypeInternal _CIMVoipByeNotify_default_instance_;
class CIMVoipByeReq;
class CIMVoipByeReqDefaultTypeInternal;
extern CIMVoipByeReqDefaultTypeInternal _CIMVoipByeReq_default_instance_;
class CIMVoipByeRsp;
class CIMVoipByeRspDefaultTypeInternal;
extern CIMVoipByeRspDefaultTypeInternal _CIMVoipByeRsp_default_instance_;
class CIMVoipHeartbeat;
class CIMVoipHeartbeatDefaultTypeInternal;
extern CIMVoipHeartbeatDefaultTypeInternal _CIMVoipHeartbeat_default_instance_;
class CIMVoipInviteReply;
class CIMVoipInviteReplyDefaultTypeInternal;
extern CIMVoipInviteReplyDefaultTypeInternal _CIMVoipInviteReply_default_instance_;
class CIMVoipInviteReplyAck;
class CIMVoipInviteReplyAckDefaultTypeInternal;
extern CIMVoipInviteReplyAckDefaultTypeInternal _CIMVoipInviteReplyAck_default_instance_;
class CIMVoipInviteReq;
class CIMVoipInviteReqDefaultTypeInternal;
extern CIMVoipInviteReqDefaultTypeInternal _CIMVoipInviteReq_default_instance_;
}  // namespace Voip
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> ::CIM::Voip::CIMVoipByeNotify* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipByeNotify>(Arena*);
template<> ::CIM::Voip::CIMVoipByeReq* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipByeReq>(Arena*);
template<> ::CIM::Voip::CIMVoipByeRsp* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipByeRsp>(Arena*);
template<> ::CIM::Voip::CIMVoipHeartbeat* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipHeartbeat>(Arena*);
template<> ::CIM::Voip::CIMVoipInviteReply* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipInviteReply>(Arena*);
template<> ::CIM::Voip::CIMVoipInviteReplyAck* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipInviteReplyAck>(Arena*);
template<> ::CIM::Voip::CIMVoipInviteReq* Arena::CreateMaybeMessage<::CIM::Voip::CIMVoipInviteReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CIM {
namespace Voip {

// ===================================================================

class CIMVoipInviteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipInviteReq) */ {
 public:
  inline CIMVoipInviteReq() : CIMVoipInviteReq(nullptr) {}
  virtual ~CIMVoipInviteReq();

  CIMVoipInviteReq(const CIMVoipInviteReq& from);
  CIMVoipInviteReq(CIMVoipInviteReq&& from) noexcept
    : CIMVoipInviteReq() {
    *this = ::std::move(from);
  }

  inline CIMVoipInviteReq& operator=(const CIMVoipInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipInviteReq& operator=(CIMVoipInviteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipInviteReq& default_instance();

  static inline const CIMVoipInviteReq* internal_default_instance() {
    return reinterpret_cast<const CIMVoipInviteReq*>(
               &_CIMVoipInviteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CIMVoipInviteReq& a, CIMVoipInviteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipInviteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipInviteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipInviteReq* New() const final {
    return CreateMaybeMessage<CIMVoipInviteReq>(nullptr);
  }

  CIMVoipInviteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipInviteReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipInviteReq& from);
  void MergeFrom(const CIMVoipInviteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipInviteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipInviteReq";
  }
  protected:
  explicit CIMVoipInviteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteUserListFieldNumber = 2,
    kChannelInfoFieldNumber = 4,
    kCreatorUserIdFieldNumber = 1,
    kInviteTypeFieldNumber = 3,
  };
  // repeated uint64 invite_user_list = 2;
  int invite_user_list_size() const;
  private:
  int _internal_invite_user_list_size() const;
  public:
  void clear_invite_user_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invite_user_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_invite_user_list() const;
  void _internal_add_invite_user_list(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_invite_user_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 invite_user_list(int index) const;
  void set_invite_user_list(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_invite_user_list(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      invite_user_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_invite_user_list();

  // .CIM.Def.CIMChannelInfo channel_info = 4;
  bool has_channel_info() const;
  private:
  bool _internal_has_channel_info() const;
  public:
  void clear_channel_info();
  const ::CIM::Def::CIMChannelInfo& channel_info() const;
  ::CIM::Def::CIMChannelInfo* release_channel_info();
  ::CIM::Def::CIMChannelInfo* mutable_channel_info();
  void set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info);
  private:
  const ::CIM::Def::CIMChannelInfo& _internal_channel_info() const;
  ::CIM::Def::CIMChannelInfo* _internal_mutable_channel_info();
  public:
  void unsafe_arena_set_allocated_channel_info(
      ::CIM::Def::CIMChannelInfo* channel_info);
  ::CIM::Def::CIMChannelInfo* unsafe_arena_release_channel_info();

  // uint64 creator_user_id = 1;
  void clear_creator_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_user_id() const;
  void set_creator_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creator_user_id() const;
  void _internal_set_creator_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMVoipInviteType invite_type = 3;
  void clear_invite_type();
  ::CIM::Def::CIMVoipInviteType invite_type() const;
  void set_invite_type(::CIM::Def::CIMVoipInviteType value);
  private:
  ::CIM::Def::CIMVoipInviteType _internal_invite_type() const;
  void _internal_set_invite_type(::CIM::Def::CIMVoipInviteType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipInviteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > invite_user_list_;
  mutable std::atomic<int> _invite_user_list_cached_byte_size_;
  ::CIM::Def::CIMChannelInfo* channel_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_user_id_;
  int invite_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipInviteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipInviteReply) */ {
 public:
  inline CIMVoipInviteReply() : CIMVoipInviteReply(nullptr) {}
  virtual ~CIMVoipInviteReply();

  CIMVoipInviteReply(const CIMVoipInviteReply& from);
  CIMVoipInviteReply(CIMVoipInviteReply&& from) noexcept
    : CIMVoipInviteReply() {
    *this = ::std::move(from);
  }

  inline CIMVoipInviteReply& operator=(const CIMVoipInviteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipInviteReply& operator=(CIMVoipInviteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipInviteReply& default_instance();

  static inline const CIMVoipInviteReply* internal_default_instance() {
    return reinterpret_cast<const CIMVoipInviteReply*>(
               &_CIMVoipInviteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CIMVoipInviteReply& a, CIMVoipInviteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipInviteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipInviteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipInviteReply* New() const final {
    return CreateMaybeMessage<CIMVoipInviteReply>(nullptr);
  }

  CIMVoipInviteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipInviteReply>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipInviteReply& from);
  void MergeFrom(const CIMVoipInviteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipInviteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipInviteReply";
  }
  protected:
  explicit CIMVoipInviteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kRspCodeFieldNumber = 2,
  };
  // .CIM.Def.CIMChannelInfo channel_info = 3;
  bool has_channel_info() const;
  private:
  bool _internal_has_channel_info() const;
  public:
  void clear_channel_info();
  const ::CIM::Def::CIMChannelInfo& channel_info() const;
  ::CIM::Def::CIMChannelInfo* release_channel_info();
  ::CIM::Def::CIMChannelInfo* mutable_channel_info();
  void set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info);
  private:
  const ::CIM::Def::CIMChannelInfo& _internal_channel_info() const;
  ::CIM::Def::CIMChannelInfo* _internal_mutable_channel_info();
  public:
  void unsafe_arena_set_allocated_channel_info(
      ::CIM::Def::CIMChannelInfo* channel_info);
  ::CIM::Def::CIMChannelInfo* unsafe_arena_release_channel_info();

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMInviteRspCode rsp_code = 2;
  void clear_rsp_code();
  ::CIM::Def::CIMInviteRspCode rsp_code() const;
  void set_rsp_code(::CIM::Def::CIMInviteRspCode value);
  private:
  ::CIM::Def::CIMInviteRspCode _internal_rsp_code() const;
  void _internal_set_rsp_code(::CIM::Def::CIMInviteRspCode value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipInviteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CIM::Def::CIMChannelInfo* channel_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int rsp_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipInviteReplyAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipInviteReplyAck) */ {
 public:
  inline CIMVoipInviteReplyAck() : CIMVoipInviteReplyAck(nullptr) {}
  virtual ~CIMVoipInviteReplyAck();

  CIMVoipInviteReplyAck(const CIMVoipInviteReplyAck& from);
  CIMVoipInviteReplyAck(CIMVoipInviteReplyAck&& from) noexcept
    : CIMVoipInviteReplyAck() {
    *this = ::std::move(from);
  }

  inline CIMVoipInviteReplyAck& operator=(const CIMVoipInviteReplyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipInviteReplyAck& operator=(CIMVoipInviteReplyAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipInviteReplyAck& default_instance();

  static inline const CIMVoipInviteReplyAck* internal_default_instance() {
    return reinterpret_cast<const CIMVoipInviteReplyAck*>(
               &_CIMVoipInviteReplyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CIMVoipInviteReplyAck& a, CIMVoipInviteReplyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipInviteReplyAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipInviteReplyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipInviteReplyAck* New() const final {
    return CreateMaybeMessage<CIMVoipInviteReplyAck>(nullptr);
  }

  CIMVoipInviteReplyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipInviteReplyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipInviteReplyAck& from);
  void MergeFrom(const CIMVoipInviteReplyAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipInviteReplyAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipInviteReplyAck";
  }
  protected:
  explicit CIMVoipInviteReplyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 1,
  };
  // .CIM.Def.CIMChannelInfo channel_info = 1;
  bool has_channel_info() const;
  private:
  bool _internal_has_channel_info() const;
  public:
  void clear_channel_info();
  const ::CIM::Def::CIMChannelInfo& channel_info() const;
  ::CIM::Def::CIMChannelInfo* release_channel_info();
  ::CIM::Def::CIMChannelInfo* mutable_channel_info();
  void set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info);
  private:
  const ::CIM::Def::CIMChannelInfo& _internal_channel_info() const;
  ::CIM::Def::CIMChannelInfo* _internal_mutable_channel_info();
  public:
  void unsafe_arena_set_allocated_channel_info(
      ::CIM::Def::CIMChannelInfo* channel_info);
  ::CIM::Def::CIMChannelInfo* unsafe_arena_release_channel_info();

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipInviteReplyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CIM::Def::CIMChannelInfo* channel_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipHeartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipHeartbeat) */ {
 public:
  inline CIMVoipHeartbeat() : CIMVoipHeartbeat(nullptr) {}
  virtual ~CIMVoipHeartbeat();

  CIMVoipHeartbeat(const CIMVoipHeartbeat& from);
  CIMVoipHeartbeat(CIMVoipHeartbeat&& from) noexcept
    : CIMVoipHeartbeat() {
    *this = ::std::move(from);
  }

  inline CIMVoipHeartbeat& operator=(const CIMVoipHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipHeartbeat& operator=(CIMVoipHeartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipHeartbeat& default_instance();

  static inline const CIMVoipHeartbeat* internal_default_instance() {
    return reinterpret_cast<const CIMVoipHeartbeat*>(
               &_CIMVoipHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CIMVoipHeartbeat& a, CIMVoipHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipHeartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipHeartbeat* New() const final {
    return CreateMaybeMessage<CIMVoipHeartbeat>(nullptr);
  }

  CIMVoipHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipHeartbeat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipHeartbeat& from);
  void MergeFrom(const CIMVoipHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipHeartbeat";
  }
  protected:
  explicit CIMVoipHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipByeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipByeReq) */ {
 public:
  inline CIMVoipByeReq() : CIMVoipByeReq(nullptr) {}
  virtual ~CIMVoipByeReq();

  CIMVoipByeReq(const CIMVoipByeReq& from);
  CIMVoipByeReq(CIMVoipByeReq&& from) noexcept
    : CIMVoipByeReq() {
    *this = ::std::move(from);
  }

  inline CIMVoipByeReq& operator=(const CIMVoipByeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipByeReq& operator=(CIMVoipByeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipByeReq& default_instance();

  static inline const CIMVoipByeReq* internal_default_instance() {
    return reinterpret_cast<const CIMVoipByeReq*>(
               &_CIMVoipByeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CIMVoipByeReq& a, CIMVoipByeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipByeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipByeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipByeReq* New() const final {
    return CreateMaybeMessage<CIMVoipByeReq>(nullptr);
  }

  CIMVoipByeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipByeReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipByeReq& from);
  void MergeFrom(const CIMVoipByeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipByeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipByeReq";
  }
  protected:
  explicit CIMVoipByeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 3,
    kLocalCallTimeLenFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kByeReasonFieldNumber = 4,
  };
  // .CIM.Def.CIMChannelInfo channel_info = 3;
  bool has_channel_info() const;
  private:
  bool _internal_has_channel_info() const;
  public:
  void clear_channel_info();
  const ::CIM::Def::CIMChannelInfo& channel_info() const;
  ::CIM::Def::CIMChannelInfo* release_channel_info();
  ::CIM::Def::CIMChannelInfo* mutable_channel_info();
  void set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info);
  private:
  const ::CIM::Def::CIMChannelInfo& _internal_channel_info() const;
  ::CIM::Def::CIMChannelInfo* _internal_mutable_channel_info();
  public:
  void unsafe_arena_set_allocated_channel_info(
      ::CIM::Def::CIMChannelInfo* channel_info);
  ::CIM::Def::CIMChannelInfo* unsafe_arena_release_channel_info();

  // uint64 local_call_time_len = 1;
  void clear_local_call_time_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 local_call_time_len() const;
  void set_local_call_time_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_local_call_time_len() const;
  void _internal_set_local_call_time_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMVoipByeReason bye_reason = 4;
  void clear_bye_reason();
  ::CIM::Def::CIMVoipByeReason bye_reason() const;
  void set_bye_reason(::CIM::Def::CIMVoipByeReason value);
  private:
  ::CIM::Def::CIMVoipByeReason _internal_bye_reason() const;
  void _internal_set_bye_reason(::CIM::Def::CIMVoipByeReason value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipByeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CIM::Def::CIMChannelInfo* channel_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 local_call_time_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int bye_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipByeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipByeRsp) */ {
 public:
  inline CIMVoipByeRsp() : CIMVoipByeRsp(nullptr) {}
  virtual ~CIMVoipByeRsp();

  CIMVoipByeRsp(const CIMVoipByeRsp& from);
  CIMVoipByeRsp(CIMVoipByeRsp&& from) noexcept
    : CIMVoipByeRsp() {
    *this = ::std::move(from);
  }

  inline CIMVoipByeRsp& operator=(const CIMVoipByeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipByeRsp& operator=(CIMVoipByeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipByeRsp& default_instance();

  static inline const CIMVoipByeRsp* internal_default_instance() {
    return reinterpret_cast<const CIMVoipByeRsp*>(
               &_CIMVoipByeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CIMVoipByeRsp& a, CIMVoipByeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipByeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipByeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipByeRsp* New() const final {
    return CreateMaybeMessage<CIMVoipByeRsp>(nullptr);
  }

  CIMVoipByeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipByeRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipByeRsp& from);
  void MergeFrom(const CIMVoipByeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipByeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipByeRsp";
  }
  protected:
  explicit CIMVoipByeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // .CIM.Def.CIMErrorCode error_code = 1;
  void clear_error_code();
  ::CIM::Def::CIMErrorCode error_code() const;
  void set_error_code(::CIM::Def::CIMErrorCode value);
  private:
  ::CIM::Def::CIMErrorCode _internal_error_code() const;
  void _internal_set_error_code(::CIM::Def::CIMErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipByeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// -------------------------------------------------------------------

class CIMVoipByeNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Voip.CIMVoipByeNotify) */ {
 public:
  inline CIMVoipByeNotify() : CIMVoipByeNotify(nullptr) {}
  virtual ~CIMVoipByeNotify();

  CIMVoipByeNotify(const CIMVoipByeNotify& from);
  CIMVoipByeNotify(CIMVoipByeNotify&& from) noexcept
    : CIMVoipByeNotify() {
    *this = ::std::move(from);
  }

  inline CIMVoipByeNotify& operator=(const CIMVoipByeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMVoipByeNotify& operator=(CIMVoipByeNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMVoipByeNotify& default_instance();

  static inline const CIMVoipByeNotify* internal_default_instance() {
    return reinterpret_cast<const CIMVoipByeNotify*>(
               &_CIMVoipByeNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CIMVoipByeNotify& a, CIMVoipByeNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMVoipByeNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMVoipByeNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMVoipByeNotify* New() const final {
    return CreateMaybeMessage<CIMVoipByeNotify>(nullptr);
  }

  CIMVoipByeNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMVoipByeNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMVoipByeNotify& from);
  void MergeFrom(const CIMVoipByeNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMVoipByeNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Voip.CIMVoipByeNotify";
  }
  protected:
  explicit CIMVoipByeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kByeReasonFieldNumber = 3,
  };
  // .CIM.Def.CIMChannelInfo channel_info = 2;
  bool has_channel_info() const;
  private:
  bool _internal_has_channel_info() const;
  public:
  void clear_channel_info();
  const ::CIM::Def::CIMChannelInfo& channel_info() const;
  ::CIM::Def::CIMChannelInfo* release_channel_info();
  ::CIM::Def::CIMChannelInfo* mutable_channel_info();
  void set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info);
  private:
  const ::CIM::Def::CIMChannelInfo& _internal_channel_info() const;
  ::CIM::Def::CIMChannelInfo* _internal_mutable_channel_info();
  public:
  void unsafe_arena_set_allocated_channel_info(
      ::CIM::Def::CIMChannelInfo* channel_info);
  ::CIM::Def::CIMChannelInfo* unsafe_arena_release_channel_info();

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMVoipByeReason byeReason = 3;
  void clear_byereason();
  ::CIM::Def::CIMVoipByeReason byereason() const;
  void set_byereason(::CIM::Def::CIMVoipByeReason value);
  private:
  ::CIM::Def::CIMVoipByeReason _internal_byereason() const;
  void _internal_set_byereason(::CIM::Def::CIMVoipByeReason value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Voip.CIMVoipByeNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CIM::Def::CIMChannelInfo* channel_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int byereason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eVoip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CIMVoipInviteReq

// uint64 creator_user_id = 1;
inline void CIMVoipInviteReq::clear_creator_user_id() {
  creator_user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReq::_internal_creator_user_id() const {
  return creator_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReq::creator_user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReq.creator_user_id)
  return _internal_creator_user_id();
}
inline void CIMVoipInviteReq::_internal_set_creator_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  creator_user_id_ = value;
}
inline void CIMVoipInviteReq::set_creator_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creator_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipInviteReq.creator_user_id)
}

// repeated uint64 invite_user_list = 2;
inline int CIMVoipInviteReq::_internal_invite_user_list_size() const {
  return invite_user_list_.size();
}
inline int CIMVoipInviteReq::invite_user_list_size() const {
  return _internal_invite_user_list_size();
}
inline void CIMVoipInviteReq::clear_invite_user_list() {
  invite_user_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReq::_internal_invite_user_list(int index) const {
  return invite_user_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReq::invite_user_list(int index) const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReq.invite_user_list)
  return _internal_invite_user_list(index);
}
inline void CIMVoipInviteReq::set_invite_user_list(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invite_user_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipInviteReq.invite_user_list)
}
inline void CIMVoipInviteReq::_internal_add_invite_user_list(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invite_user_list_.Add(value);
}
inline void CIMVoipInviteReq::add_invite_user_list(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_invite_user_list(value);
  // @@protoc_insertion_point(field_add:CIM.Voip.CIMVoipInviteReq.invite_user_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CIMVoipInviteReq::_internal_invite_user_list() const {
  return invite_user_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CIMVoipInviteReq::invite_user_list() const {
  // @@protoc_insertion_point(field_list:CIM.Voip.CIMVoipInviteReq.invite_user_list)
  return _internal_invite_user_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CIMVoipInviteReq::_internal_mutable_invite_user_list() {
  return &invite_user_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CIMVoipInviteReq::mutable_invite_user_list() {
  // @@protoc_insertion_point(field_mutable_list:CIM.Voip.CIMVoipInviteReq.invite_user_list)
  return _internal_mutable_invite_user_list();
}

// .CIM.Def.CIMVoipInviteType invite_type = 3;
inline void CIMVoipInviteReq::clear_invite_type() {
  invite_type_ = 0;
}
inline ::CIM::Def::CIMVoipInviteType CIMVoipInviteReq::_internal_invite_type() const {
  return static_cast< ::CIM::Def::CIMVoipInviteType >(invite_type_);
}
inline ::CIM::Def::CIMVoipInviteType CIMVoipInviteReq::invite_type() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReq.invite_type)
  return _internal_invite_type();
}
inline void CIMVoipInviteReq::_internal_set_invite_type(::CIM::Def::CIMVoipInviteType value) {
  
  invite_type_ = value;
}
inline void CIMVoipInviteReq::set_invite_type(::CIM::Def::CIMVoipInviteType value) {
  _internal_set_invite_type(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipInviteReq.invite_type)
}

// .CIM.Def.CIMChannelInfo channel_info = 4;
inline bool CIMVoipInviteReq::_internal_has_channel_info() const {
  return this != internal_default_instance() && channel_info_ != nullptr;
}
inline bool CIMVoipInviteReq::has_channel_info() const {
  return _internal_has_channel_info();
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReq::_internal_channel_info() const {
  const ::CIM::Def::CIMChannelInfo* p = channel_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMChannelInfo&>(
      ::CIM::Def::_CIMChannelInfo_default_instance_);
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReq::channel_info() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReq.channel_info)
  return _internal_channel_info();
}
inline void CIMVoipInviteReq::unsafe_arena_set_allocated_channel_info(
    ::CIM::Def::CIMChannelInfo* channel_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  channel_info_ = channel_info;
  if (channel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Voip.CIMVoipInviteReq.channel_info)
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReq::release_channel_info() {
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReq::unsafe_arena_release_channel_info() {
  // @@protoc_insertion_point(field_release:CIM.Voip.CIMVoipInviteReq.channel_info)
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReq::_internal_mutable_channel_info() {
  
  if (channel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMChannelInfo>(GetArena());
    channel_info_ = p;
  }
  return channel_info_;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReq::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Voip.CIMVoipInviteReq.channel_info)
  return _internal_mutable_channel_info();
}
inline void CIMVoipInviteReq::set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  if (channel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info)->GetArena();
    if (message_arena != submessage_arena) {
      channel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_info_ = channel_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Voip.CIMVoipInviteReq.channel_info)
}

// -------------------------------------------------------------------

// CIMVoipInviteReply

// uint64 user_id = 1;
inline void CIMVoipInviteReply::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReply::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipInviteReply::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReply.user_id)
  return _internal_user_id();
}
inline void CIMVoipInviteReply::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMVoipInviteReply::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipInviteReply.user_id)
}

// .CIM.Def.CIMInviteRspCode rsp_code = 2;
inline void CIMVoipInviteReply::clear_rsp_code() {
  rsp_code_ = 0;
}
inline ::CIM::Def::CIMInviteRspCode CIMVoipInviteReply::_internal_rsp_code() const {
  return static_cast< ::CIM::Def::CIMInviteRspCode >(rsp_code_);
}
inline ::CIM::Def::CIMInviteRspCode CIMVoipInviteReply::rsp_code() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReply.rsp_code)
  return _internal_rsp_code();
}
inline void CIMVoipInviteReply::_internal_set_rsp_code(::CIM::Def::CIMInviteRspCode value) {
  
  rsp_code_ = value;
}
inline void CIMVoipInviteReply::set_rsp_code(::CIM::Def::CIMInviteRspCode value) {
  _internal_set_rsp_code(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipInviteReply.rsp_code)
}

// .CIM.Def.CIMChannelInfo channel_info = 3;
inline bool CIMVoipInviteReply::_internal_has_channel_info() const {
  return this != internal_default_instance() && channel_info_ != nullptr;
}
inline bool CIMVoipInviteReply::has_channel_info() const {
  return _internal_has_channel_info();
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReply::_internal_channel_info() const {
  const ::CIM::Def::CIMChannelInfo* p = channel_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMChannelInfo&>(
      ::CIM::Def::_CIMChannelInfo_default_instance_);
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReply::channel_info() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReply.channel_info)
  return _internal_channel_info();
}
inline void CIMVoipInviteReply::unsafe_arena_set_allocated_channel_info(
    ::CIM::Def::CIMChannelInfo* channel_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  channel_info_ = channel_info;
  if (channel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Voip.CIMVoipInviteReply.channel_info)
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReply::release_channel_info() {
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReply::unsafe_arena_release_channel_info() {
  // @@protoc_insertion_point(field_release:CIM.Voip.CIMVoipInviteReply.channel_info)
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReply::_internal_mutable_channel_info() {
  
  if (channel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMChannelInfo>(GetArena());
    channel_info_ = p;
  }
  return channel_info_;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReply::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Voip.CIMVoipInviteReply.channel_info)
  return _internal_mutable_channel_info();
}
inline void CIMVoipInviteReply::set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  if (channel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info)->GetArena();
    if (message_arena != submessage_arena) {
      channel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_info_ = channel_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Voip.CIMVoipInviteReply.channel_info)
}

// -------------------------------------------------------------------

// CIMVoipInviteReplyAck

// .CIM.Def.CIMChannelInfo channel_info = 1;
inline bool CIMVoipInviteReplyAck::_internal_has_channel_info() const {
  return this != internal_default_instance() && channel_info_ != nullptr;
}
inline bool CIMVoipInviteReplyAck::has_channel_info() const {
  return _internal_has_channel_info();
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReplyAck::_internal_channel_info() const {
  const ::CIM::Def::CIMChannelInfo* p = channel_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMChannelInfo&>(
      ::CIM::Def::_CIMChannelInfo_default_instance_);
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipInviteReplyAck::channel_info() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipInviteReplyAck.channel_info)
  return _internal_channel_info();
}
inline void CIMVoipInviteReplyAck::unsafe_arena_set_allocated_channel_info(
    ::CIM::Def::CIMChannelInfo* channel_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  channel_info_ = channel_info;
  if (channel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Voip.CIMVoipInviteReplyAck.channel_info)
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReplyAck::release_channel_info() {
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReplyAck::unsafe_arena_release_channel_info() {
  // @@protoc_insertion_point(field_release:CIM.Voip.CIMVoipInviteReplyAck.channel_info)
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReplyAck::_internal_mutable_channel_info() {
  
  if (channel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMChannelInfo>(GetArena());
    channel_info_ = p;
  }
  return channel_info_;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipInviteReplyAck::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Voip.CIMVoipInviteReplyAck.channel_info)
  return _internal_mutable_channel_info();
}
inline void CIMVoipInviteReplyAck::set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  if (channel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info)->GetArena();
    if (message_arena != submessage_arena) {
      channel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_info_ = channel_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Voip.CIMVoipInviteReplyAck.channel_info)
}

// -------------------------------------------------------------------

// CIMVoipHeartbeat

// -------------------------------------------------------------------

// CIMVoipByeReq

// uint64 local_call_time_len = 1;
inline void CIMVoipByeReq::clear_local_call_time_len() {
  local_call_time_len_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeReq::_internal_local_call_time_len() const {
  return local_call_time_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeReq::local_call_time_len() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeReq.local_call_time_len)
  return _internal_local_call_time_len();
}
inline void CIMVoipByeReq::_internal_set_local_call_time_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  local_call_time_len_ = value;
}
inline void CIMVoipByeReq::set_local_call_time_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_local_call_time_len(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeReq.local_call_time_len)
}

// uint64 user_id = 2;
inline void CIMVoipByeReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeReq.user_id)
  return _internal_user_id();
}
inline void CIMVoipByeReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMVoipByeReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeReq.user_id)
}

// .CIM.Def.CIMChannelInfo channel_info = 3;
inline bool CIMVoipByeReq::_internal_has_channel_info() const {
  return this != internal_default_instance() && channel_info_ != nullptr;
}
inline bool CIMVoipByeReq::has_channel_info() const {
  return _internal_has_channel_info();
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipByeReq::_internal_channel_info() const {
  const ::CIM::Def::CIMChannelInfo* p = channel_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMChannelInfo&>(
      ::CIM::Def::_CIMChannelInfo_default_instance_);
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipByeReq::channel_info() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeReq.channel_info)
  return _internal_channel_info();
}
inline void CIMVoipByeReq::unsafe_arena_set_allocated_channel_info(
    ::CIM::Def::CIMChannelInfo* channel_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  channel_info_ = channel_info;
  if (channel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Voip.CIMVoipByeReq.channel_info)
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeReq::release_channel_info() {
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeReq::unsafe_arena_release_channel_info() {
  // @@protoc_insertion_point(field_release:CIM.Voip.CIMVoipByeReq.channel_info)
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeReq::_internal_mutable_channel_info() {
  
  if (channel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMChannelInfo>(GetArena());
    channel_info_ = p;
  }
  return channel_info_;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeReq::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Voip.CIMVoipByeReq.channel_info)
  return _internal_mutable_channel_info();
}
inline void CIMVoipByeReq::set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  if (channel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info)->GetArena();
    if (message_arena != submessage_arena) {
      channel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_info_ = channel_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Voip.CIMVoipByeReq.channel_info)
}

// .CIM.Def.CIMVoipByeReason bye_reason = 4;
inline void CIMVoipByeReq::clear_bye_reason() {
  bye_reason_ = 0;
}
inline ::CIM::Def::CIMVoipByeReason CIMVoipByeReq::_internal_bye_reason() const {
  return static_cast< ::CIM::Def::CIMVoipByeReason >(bye_reason_);
}
inline ::CIM::Def::CIMVoipByeReason CIMVoipByeReq::bye_reason() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeReq.bye_reason)
  return _internal_bye_reason();
}
inline void CIMVoipByeReq::_internal_set_bye_reason(::CIM::Def::CIMVoipByeReason value) {
  
  bye_reason_ = value;
}
inline void CIMVoipByeReq::set_bye_reason(::CIM::Def::CIMVoipByeReason value) {
  _internal_set_bye_reason(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeReq.bye_reason)
}

// -------------------------------------------------------------------

// CIMVoipByeRsp

// .CIM.Def.CIMErrorCode error_code = 1;
inline void CIMVoipByeRsp::clear_error_code() {
  error_code_ = 0;
}
inline ::CIM::Def::CIMErrorCode CIMVoipByeRsp::_internal_error_code() const {
  return static_cast< ::CIM::Def::CIMErrorCode >(error_code_);
}
inline ::CIM::Def::CIMErrorCode CIMVoipByeRsp::error_code() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeRsp.error_code)
  return _internal_error_code();
}
inline void CIMVoipByeRsp::_internal_set_error_code(::CIM::Def::CIMErrorCode value) {
  
  error_code_ = value;
}
inline void CIMVoipByeRsp::set_error_code(::CIM::Def::CIMErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeRsp.error_code)
}

// -------------------------------------------------------------------

// CIMVoipByeNotify

// uint64 user_id = 1;
inline void CIMVoipByeNotify::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeNotify::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMVoipByeNotify::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeNotify.user_id)
  return _internal_user_id();
}
inline void CIMVoipByeNotify::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMVoipByeNotify::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeNotify.user_id)
}

// .CIM.Def.CIMChannelInfo channel_info = 2;
inline bool CIMVoipByeNotify::_internal_has_channel_info() const {
  return this != internal_default_instance() && channel_info_ != nullptr;
}
inline bool CIMVoipByeNotify::has_channel_info() const {
  return _internal_has_channel_info();
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipByeNotify::_internal_channel_info() const {
  const ::CIM::Def::CIMChannelInfo* p = channel_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMChannelInfo&>(
      ::CIM::Def::_CIMChannelInfo_default_instance_);
}
inline const ::CIM::Def::CIMChannelInfo& CIMVoipByeNotify::channel_info() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeNotify.channel_info)
  return _internal_channel_info();
}
inline void CIMVoipByeNotify::unsafe_arena_set_allocated_channel_info(
    ::CIM::Def::CIMChannelInfo* channel_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  channel_info_ = channel_info;
  if (channel_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Voip.CIMVoipByeNotify.channel_info)
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeNotify::release_channel_info() {
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeNotify::unsafe_arena_release_channel_info() {
  // @@protoc_insertion_point(field_release:CIM.Voip.CIMVoipByeNotify.channel_info)
  
  ::CIM::Def::CIMChannelInfo* temp = channel_info_;
  channel_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeNotify::_internal_mutable_channel_info() {
  
  if (channel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMChannelInfo>(GetArena());
    channel_info_ = p;
  }
  return channel_info_;
}
inline ::CIM::Def::CIMChannelInfo* CIMVoipByeNotify::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Voip.CIMVoipByeNotify.channel_info)
  return _internal_mutable_channel_info();
}
inline void CIMVoipByeNotify::set_allocated_channel_info(::CIM::Def::CIMChannelInfo* channel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info_);
  }
  if (channel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_info)->GetArena();
    if (message_arena != submessage_arena) {
      channel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_info, submessage_arena);
    }
    
  } else {
    
  }
  channel_info_ = channel_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Voip.CIMVoipByeNotify.channel_info)
}

// .CIM.Def.CIMVoipByeReason byeReason = 3;
inline void CIMVoipByeNotify::clear_byereason() {
  byereason_ = 0;
}
inline ::CIM::Def::CIMVoipByeReason CIMVoipByeNotify::_internal_byereason() const {
  return static_cast< ::CIM::Def::CIMVoipByeReason >(byereason_);
}
inline ::CIM::Def::CIMVoipByeReason CIMVoipByeNotify::byereason() const {
  // @@protoc_insertion_point(field_get:CIM.Voip.CIMVoipByeNotify.byeReason)
  return _internal_byereason();
}
inline void CIMVoipByeNotify::_internal_set_byereason(::CIM::Def::CIMVoipByeReason value) {
  
  byereason_ = value;
}
inline void CIMVoipByeNotify::set_byereason(::CIM::Def::CIMVoipByeReason value) {
  _internal_set_byereason(value);
  // @@protoc_insertion_point(field_set:CIM.Voip.CIMVoipByeNotify.byeReason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Voip
}  // namespace CIM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CIM_2eVoip_2eproto
