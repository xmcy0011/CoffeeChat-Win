// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Login.proto
#include "pch.h"
#include "cim/pb/CIM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CIM_2eDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMUserInfo_CIM_2eDef_2eproto;
namespace CIM {
namespace Login {
class CIMAuthTokenReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMAuthTokenReq> _instance;
} _CIMAuthTokenReq_default_instance_;
class CIMAuthTokenRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMAuthTokenRsp> _instance;
} _CIMAuthTokenRsp_default_instance_;
class CIMAuthReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMAuthReq> _instance;
} _CIMAuthReq_default_instance_;
class CIMAuthRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMAuthRsp> _instance;
} _CIMAuthRsp_default_instance_;
class CIMLogoutReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMLogoutReq> _instance;
} _CIMLogoutReq_default_instance_;
class CIMLogoutRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMLogoutRsp> _instance;
} _CIMLogoutRsp_default_instance_;
class CIMHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMHeartBeat> _instance;
} _CIMHeartBeat_default_instance_;
}  // namespace Login
}  // namespace CIM
static void InitDefaultsscc_info_CIMAuthReq_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMAuthReq_default_instance_;
    new (ptr) ::CIM::Login::CIMAuthReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMAuthReq_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMAuthReq_CIM_2eLogin_2eproto}, {}};

static void InitDefaultsscc_info_CIMAuthRsp_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMAuthRsp_default_instance_;
    new (ptr) ::CIM::Login::CIMAuthRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMAuthRsp_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMAuthRsp_CIM_2eLogin_2eproto}, {
      &scc_info_CIMUserInfo_CIM_2eDef_2eproto.base,}};

static void InitDefaultsscc_info_CIMAuthTokenReq_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMAuthTokenReq_default_instance_;
    new (ptr) ::CIM::Login::CIMAuthTokenReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMAuthTokenReq_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMAuthTokenReq_CIM_2eLogin_2eproto}, {}};

static void InitDefaultsscc_info_CIMAuthTokenRsp_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMAuthTokenRsp_default_instance_;
    new (ptr) ::CIM::Login::CIMAuthTokenRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMAuthTokenRsp_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMAuthTokenRsp_CIM_2eLogin_2eproto}, {
      &scc_info_CIMUserInfo_CIM_2eDef_2eproto.base,}};

static void InitDefaultsscc_info_CIMHeartBeat_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMHeartBeat_default_instance_;
    new (ptr) ::CIM::Login::CIMHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMHeartBeat_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMHeartBeat_CIM_2eLogin_2eproto}, {}};

static void InitDefaultsscc_info_CIMLogoutReq_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMLogoutReq_default_instance_;
    new (ptr) ::CIM::Login::CIMLogoutReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMLogoutReq_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMLogoutReq_CIM_2eLogin_2eproto}, {}};

static void InitDefaultsscc_info_CIMLogoutRsp_CIM_2eLogin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Login::_CIMLogoutRsp_default_instance_;
    new (ptr) ::CIM::Login::CIMLogoutRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMLogoutRsp_CIM_2eLogin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMLogoutRsp_CIM_2eLogin_2eproto}, {}};

namespace CIM {
namespace Login {

// ===================================================================

class CIMAuthTokenReq::_Internal {
 public:
};

CIMAuthTokenReq::CIMAuthTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthTokenReq)
}
CIMAuthTokenReq::CIMAuthTokenReq(const CIMAuthTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  user_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_token().empty()) {
    user_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_token(), 
      GetArena());
  }
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_version().empty()) {
    client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_version(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthTokenReq)
}

void CIMAuthTokenReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMAuthTokenReq_CIM_2eLogin_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
}

CIMAuthTokenReq::~CIMAuthTokenReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthTokenReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMAuthTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMAuthTokenReq::ArenaDtor(void* object) {
  CIMAuthTokenReq* _this = reinterpret_cast< CIMAuthTokenReq* >(object);
  (void)_this;
}
void CIMAuthTokenReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMAuthTokenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMAuthTokenReq& CIMAuthTokenReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMAuthTokenReq_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMAuthTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthTokenReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  user_token_.ClearToEmpty();
  client_version_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthTokenReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else goto handle_unusual;
        continue;
      // string client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_client_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMAuthTokenReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthTokenReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // string user_token = 3;
  if (this->user_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_token().data(), static_cast<int>(this->_internal_user_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.user_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_token(), target);
  }

  // .CIM.Def.CIMClientType client_type = 4;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_type(), target);
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.client_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthTokenReq)
  return target;
}

size_t CIMAuthTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthTokenReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string user_token = 3;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_token());
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // .CIM.Def.CIMClientType client_type = 4;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMAuthTokenReq*>(
      &from));
}

void CIMAuthTokenReq::MergeFrom(const CIMAuthTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.user_token().size() > 0) {
    _internal_set_user_token(from._internal_user_token());
  }
  if (from.client_version().size() > 0) {
    _internal_set_client_version(from._internal_client_version());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
}

void CIMAuthTokenReq::CopyFrom(const CIMAuthTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthTokenReq::IsInitialized() const {
  return true;
}

void CIMAuthTokenReq::InternalSwap(CIMAuthTokenReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_token_.Swap(&other->user_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthTokenReq, client_type_)
      + sizeof(CIMAuthTokenReq::client_type_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthTokenReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMAuthTokenReq::GetTypeName() const {
  return "CIM.Login.CIMAuthTokenReq";
}


// ===================================================================

class CIMAuthTokenRsp::_Internal {
 public:
  static const ::CIM::Def::CIMUserInfo& user_info(const CIMAuthTokenRsp* msg);
};

const ::CIM::Def::CIMUserInfo&
CIMAuthTokenRsp::_Internal::user_info(const CIMAuthTokenRsp* msg) {
  return *msg->user_info_;
}
void CIMAuthTokenRsp::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
CIMAuthTokenRsp::CIMAuthTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthTokenRsp)
}
CIMAuthTokenRsp::CIMAuthTokenRsp(const CIMAuthTokenRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_string(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::CIM::Def::CIMUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthTokenRsp)
}

void CIMAuthTokenRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMAuthTokenRsp_CIM_2eLogin_2eproto.base);
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
}

CIMAuthTokenRsp::~CIMAuthTokenRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthTokenRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMAuthTokenRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void CIMAuthTokenRsp::ArenaDtor(void* object) {
  CIMAuthTokenRsp* _this = reinterpret_cast< CIMAuthTokenRsp* >(object);
  (void)_this;
}
void CIMAuthTokenRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMAuthTokenRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMAuthTokenRsp& CIMAuthTokenRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMAuthTokenRsp_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMAuthTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthTokenRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_string_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthTokenRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMErrorCode result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::CIM::Def::CIMErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMUserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMAuthTokenRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthTokenRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_code(), target);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::user_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthTokenRsp)
  return target;
}

size_t CIMAuthTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthTokenRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_time());
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthTokenRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMAuthTokenRsp*>(
      &from));
}

void CIMAuthTokenRsp::MergeFrom(const CIMAuthTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::CIM::Def::CIMUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void CIMAuthTokenRsp::CopyFrom(const CIMAuthTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthTokenRsp::IsInitialized() const {
  return true;
}

void CIMAuthTokenRsp::InternalSwap(CIMAuthTokenRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthTokenRsp, result_code_)
      + sizeof(CIMAuthTokenRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthTokenRsp, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

std::string CIMAuthTokenRsp::GetTypeName() const {
  return "CIM.Login.CIMAuthTokenRsp";
}


// ===================================================================

class CIMAuthReq::_Internal {
 public:
};

CIMAuthReq::CIMAuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthReq)
}
CIMAuthReq::CIMAuthReq(const CIMAuthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  user_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_pwd().empty()) {
    user_pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_pwd(), 
      GetArena());
  }
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_version().empty()) {
    client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_version(), 
      GetArena());
  }
  client_type_ = from.client_type_;
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthReq)
}

void CIMAuthReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMAuthReq_CIM_2eLogin_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_type_ = 0;
}

CIMAuthReq::~CIMAuthReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMAuthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMAuthReq::ArenaDtor(void* object) {
  CIMAuthReq* _this = reinterpret_cast< CIMAuthReq* >(object);
  (void)_this;
}
void CIMAuthReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMAuthReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMAuthReq& CIMAuthReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMAuthReq_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMAuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmpty();
  user_pwd_.ClearToEmpty();
  client_version_.ClearToEmpty();
  client_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else goto handle_unusual;
        continue;
      // string client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_client_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMAuthReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string user_pwd = 2;
  if (this->user_pwd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_pwd().data(), static_cast<int>(this->_internal_user_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.user_pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_pwd(), target);
  }

  // .CIM.Def.CIMClientType client_type = 3;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  // string client_version = 4;
  if (this->client_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.client_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthReq)
  return target;
}

size_t CIMAuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string user_pwd = 2;
  if (this->user_pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_pwd());
  }

  // string client_version = 4;
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // .CIM.Def.CIMClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMAuthReq*>(
      &from));
}

void CIMAuthReq::MergeFrom(const CIMAuthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.user_pwd().size() > 0) {
    _internal_set_user_pwd(from._internal_user_pwd());
  }
  if (from.client_version().size() > 0) {
    _internal_set_client_version(from._internal_client_version());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
}

void CIMAuthReq::CopyFrom(const CIMAuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthReq::IsInitialized() const {
  return true;
}

void CIMAuthReq::InternalSwap(CIMAuthReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_pwd_.Swap(&other->user_pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(client_type_, other->client_type_);
}

std::string CIMAuthReq::GetTypeName() const {
  return "CIM.Login.CIMAuthReq";
}


// ===================================================================

class CIMAuthRsp::_Internal {
 public:
  static const ::CIM::Def::CIMUserInfo& user_info(const CIMAuthRsp* msg);
};

const ::CIM::Def::CIMUserInfo&
CIMAuthRsp::_Internal::user_info(const CIMAuthRsp* msg) {
  return *msg->user_info_;
}
void CIMAuthRsp::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
CIMAuthRsp::CIMAuthRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthRsp)
}
CIMAuthRsp::CIMAuthRsp(const CIMAuthRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_string(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::CIM::Def::CIMUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthRsp)
}

void CIMAuthRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMAuthRsp_CIM_2eLogin_2eproto.base);
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
}

CIMAuthRsp::~CIMAuthRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMAuthRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void CIMAuthRsp::ArenaDtor(void* object) {
  CIMAuthRsp* _this = reinterpret_cast< CIMAuthRsp* >(object);
  (void)_this;
}
void CIMAuthRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMAuthRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMAuthRsp& CIMAuthRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMAuthRsp_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMAuthRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_string_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMErrorCode result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::CIM::Def::CIMErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMUserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMAuthRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_code(), target);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::user_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthRsp)
  return target;
}

size_t CIMAuthRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_time());
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMAuthRsp*>(
      &from));
}

void CIMAuthRsp::MergeFrom(const CIMAuthRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::CIM::Def::CIMUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void CIMAuthRsp::CopyFrom(const CIMAuthRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthRsp::IsInitialized() const {
  return true;
}

void CIMAuthRsp::InternalSwap(CIMAuthRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthRsp, result_code_)
      + sizeof(CIMAuthRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthRsp, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

std::string CIMAuthRsp::GetTypeName() const {
  return "CIM.Login.CIMAuthRsp";
}


// ===================================================================

class CIMLogoutReq::_Internal {
 public:
};

CIMLogoutReq::CIMLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMLogoutReq)
}
CIMLogoutReq::CIMLogoutReq(const CIMLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMLogoutReq)
}

void CIMLogoutReq::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
}

CIMLogoutReq::~CIMLogoutReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMLogoutReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMLogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMLogoutReq::ArenaDtor(void* object) {
  CIMLogoutReq* _this = reinterpret_cast< CIMLogoutReq* >(object);
  (void)_this;
}
void CIMLogoutReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMLogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMLogoutReq& CIMLogoutReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMLogoutReq_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMLogoutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMLogoutReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMLogoutReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMLogoutReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMClientType client_type = 2;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMLogoutReq)
  return target;
}

size_t CIMLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMLogoutReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // .CIM.Def.CIMClientType client_type = 2;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMLogoutReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMLogoutReq*>(
      &from));
}

void CIMLogoutReq::MergeFrom(const CIMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMLogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
}

void CIMLogoutReq::CopyFrom(const CIMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMLogoutReq::IsInitialized() const {
  return true;
}

void CIMLogoutReq::InternalSwap(CIMLogoutReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMLogoutReq, client_type_)
      + sizeof(CIMLogoutReq::client_type_)
      - PROTOBUF_FIELD_OFFSET(CIMLogoutReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMLogoutReq::GetTypeName() const {
  return "CIM.Login.CIMLogoutReq";
}


// ===================================================================

class CIMLogoutRsp::_Internal {
 public:
};

CIMLogoutRsp::CIMLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMLogoutRsp)
}
CIMLogoutRsp::CIMLogoutRsp(const CIMLogoutRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMLogoutRsp)
}

void CIMLogoutRsp::SharedCtor() {
  result_code_ = 0u;
}

CIMLogoutRsp::~CIMLogoutRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMLogoutRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMLogoutRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMLogoutRsp::ArenaDtor(void* object) {
  CIMLogoutRsp* _this = reinterpret_cast< CIMLogoutRsp* >(object);
  (void)_this;
}
void CIMLogoutRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMLogoutRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMLogoutRsp& CIMLogoutRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMLogoutRsp_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMLogoutRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* CIMLogoutRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMLogoutRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMLogoutRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMLogoutRsp)
  return target;
}

size_t CIMLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMLogoutRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMLogoutRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMLogoutRsp*>(
      &from));
}

void CIMLogoutRsp::MergeFrom(const CIMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void CIMLogoutRsp::CopyFrom(const CIMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMLogoutRsp::IsInitialized() const {
  return true;
}

void CIMLogoutRsp::InternalSwap(CIMLogoutRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(result_code_, other->result_code_);
}

std::string CIMLogoutRsp::GetTypeName() const {
  return "CIM.Login.CIMLogoutRsp";
}


// ===================================================================

class CIMHeartBeat::_Internal {
 public:
};

CIMHeartBeat::CIMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMHeartBeat)
}
CIMHeartBeat::CIMHeartBeat(const CIMHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMHeartBeat)
}

void CIMHeartBeat::SharedCtor() {
}

CIMHeartBeat::~CIMHeartBeat() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMHeartBeat::ArenaDtor(void* object) {
  CIMHeartBeat* _this = reinterpret_cast< CIMHeartBeat* >(object);
  (void)_this;
}
void CIMHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMHeartBeat& CIMHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMHeartBeat_CIM_2eLogin_2eproto.base);
  return *internal_default_instance();
}


void CIMHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CIMHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMHeartBeat)
  return target;
}

size_t CIMHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMHeartBeat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMHeartBeat*>(
      &from));
}

void CIMHeartBeat::MergeFrom(const CIMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CIMHeartBeat::CopyFrom(const CIMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMHeartBeat::IsInitialized() const {
  return true;
}

void CIMHeartBeat::InternalSwap(CIMHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string CIMHeartBeat::GetTypeName() const {
  return "CIM.Login.CIMHeartBeat";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Login
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthTokenReq* Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthTokenRsp* Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthTokenRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthTokenRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthReq* Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthRsp* Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMLogoutReq* Arena::CreateMaybeMessage< ::CIM::Login::CIMLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMLogoutRsp* Arena::CreateMaybeMessage< ::CIM::Login::CIMLogoutRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMLogoutRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMHeartBeat* Arena::CreateMaybeMessage< ::CIM::Login::CIMHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMHeartBeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
