// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CIM_2eFriend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CIM_2eFriend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CIM.Def.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CIM_2eFriend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CIM_2eFriend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace CIM {
namespace Friend {
class CIMFriendQueryUserListReq;
class CIMFriendQueryUserListReqDefaultTypeInternal;
extern CIMFriendQueryUserListReqDefaultTypeInternal _CIMFriendQueryUserListReq_default_instance_;
class CIMFriendQueryUserListRsp;
class CIMFriendQueryUserListRspDefaultTypeInternal;
extern CIMFriendQueryUserListRspDefaultTypeInternal _CIMFriendQueryUserListRsp_default_instance_;
}  // namespace Friend
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> ::CIM::Friend::CIMFriendQueryUserListReq* Arena::CreateMaybeMessage<::CIM::Friend::CIMFriendQueryUserListReq>(Arena*);
template<> ::CIM::Friend::CIMFriendQueryUserListRsp* Arena::CreateMaybeMessage<::CIM::Friend::CIMFriendQueryUserListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CIM {
namespace Friend {

// ===================================================================

class CIMFriendQueryUserListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Friend.CIMFriendQueryUserListReq) */ {
 public:
  inline CIMFriendQueryUserListReq() : CIMFriendQueryUserListReq(nullptr) {}
  virtual ~CIMFriendQueryUserListReq();

  CIMFriendQueryUserListReq(const CIMFriendQueryUserListReq& from);
  CIMFriendQueryUserListReq(CIMFriendQueryUserListReq&& from) noexcept
    : CIMFriendQueryUserListReq() {
    *this = ::std::move(from);
  }

  inline CIMFriendQueryUserListReq& operator=(const CIMFriendQueryUserListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMFriendQueryUserListReq& operator=(CIMFriendQueryUserListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMFriendQueryUserListReq& default_instance();

  static inline const CIMFriendQueryUserListReq* internal_default_instance() {
    return reinterpret_cast<const CIMFriendQueryUserListReq*>(
               &_CIMFriendQueryUserListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CIMFriendQueryUserListReq& a, CIMFriendQueryUserListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMFriendQueryUserListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMFriendQueryUserListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMFriendQueryUserListReq* New() const final {
    return CreateMaybeMessage<CIMFriendQueryUserListReq>(nullptr);
  }

  CIMFriendQueryUserListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMFriendQueryUserListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMFriendQueryUserListReq& from);
  void MergeFrom(const CIMFriendQueryUserListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMFriendQueryUserListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Friend.CIMFriendQueryUserListReq";
  }
  protected:
  explicit CIMFriendQueryUserListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Friend.CIMFriendQueryUserListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eFriend_2eproto;
};
// -------------------------------------------------------------------

class CIMFriendQueryUserListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Friend.CIMFriendQueryUserListRsp) */ {
 public:
  inline CIMFriendQueryUserListRsp() : CIMFriendQueryUserListRsp(nullptr) {}
  virtual ~CIMFriendQueryUserListRsp();

  CIMFriendQueryUserListRsp(const CIMFriendQueryUserListRsp& from);
  CIMFriendQueryUserListRsp(CIMFriendQueryUserListRsp&& from) noexcept
    : CIMFriendQueryUserListRsp() {
    *this = ::std::move(from);
  }

  inline CIMFriendQueryUserListRsp& operator=(const CIMFriendQueryUserListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMFriendQueryUserListRsp& operator=(CIMFriendQueryUserListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMFriendQueryUserListRsp& default_instance();

  static inline const CIMFriendQueryUserListRsp* internal_default_instance() {
    return reinterpret_cast<const CIMFriendQueryUserListRsp*>(
               &_CIMFriendQueryUserListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CIMFriendQueryUserListRsp& a, CIMFriendQueryUserListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMFriendQueryUserListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMFriendQueryUserListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMFriendQueryUserListRsp* New() const final {
    return CreateMaybeMessage<CIMFriendQueryUserListRsp>(nullptr);
  }

  CIMFriendQueryUserListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMFriendQueryUserListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMFriendQueryUserListRsp& from);
  void MergeFrom(const CIMFriendQueryUserListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMFriendQueryUserListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Friend.CIMFriendQueryUserListRsp";
  }
  protected:
  explicit CIMFriendQueryUserListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoListFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated .CIM.Def.CIMUserInfo user_info_list = 2;
  int user_info_list_size() const;
  private:
  int _internal_user_info_list_size() const;
  public:
  void clear_user_info_list();
  ::CIM::Def::CIMUserInfo* mutable_user_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMUserInfo >*
      mutable_user_info_list();
  private:
  const ::CIM::Def::CIMUserInfo& _internal_user_info_list(int index) const;
  ::CIM::Def::CIMUserInfo* _internal_add_user_info_list();
  public:
  const ::CIM::Def::CIMUserInfo& user_info_list(int index) const;
  ::CIM::Def::CIMUserInfo* add_user_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMUserInfo >&
      user_info_list() const;

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Friend.CIMFriendQueryUserListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMUserInfo > user_info_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eFriend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CIMFriendQueryUserListReq

// uint64 user_id = 1;
inline void CIMFriendQueryUserListReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMFriendQueryUserListReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMFriendQueryUserListReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Friend.CIMFriendQueryUserListReq.user_id)
  return _internal_user_id();
}
inline void CIMFriendQueryUserListReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMFriendQueryUserListReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Friend.CIMFriendQueryUserListReq.user_id)
}

// -------------------------------------------------------------------

// CIMFriendQueryUserListRsp

// uint64 user_id = 1;
inline void CIMFriendQueryUserListRsp::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMFriendQueryUserListRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMFriendQueryUserListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Friend.CIMFriendQueryUserListRsp.user_id)
  return _internal_user_id();
}
inline void CIMFriendQueryUserListRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMFriendQueryUserListRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Friend.CIMFriendQueryUserListRsp.user_id)
}

// repeated .CIM.Def.CIMUserInfo user_info_list = 2;
inline int CIMFriendQueryUserListRsp::_internal_user_info_list_size() const {
  return user_info_list_.size();
}
inline int CIMFriendQueryUserListRsp::user_info_list_size() const {
  return _internal_user_info_list_size();
}
inline ::CIM::Def::CIMUserInfo* CIMFriendQueryUserListRsp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:CIM.Friend.CIMFriendQueryUserListRsp.user_info_list)
  return user_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMUserInfo >*
CIMFriendQueryUserListRsp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:CIM.Friend.CIMFriendQueryUserListRsp.user_info_list)
  return &user_info_list_;
}
inline const ::CIM::Def::CIMUserInfo& CIMFriendQueryUserListRsp::_internal_user_info_list(int index) const {
  return user_info_list_.Get(index);
}
inline const ::CIM::Def::CIMUserInfo& CIMFriendQueryUserListRsp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:CIM.Friend.CIMFriendQueryUserListRsp.user_info_list)
  return _internal_user_info_list(index);
}
inline ::CIM::Def::CIMUserInfo* CIMFriendQueryUserListRsp::_internal_add_user_info_list() {
  return user_info_list_.Add();
}
inline ::CIM::Def::CIMUserInfo* CIMFriendQueryUserListRsp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:CIM.Friend.CIMFriendQueryUserListRsp.user_info_list)
  return _internal_add_user_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMUserInfo >&
CIMFriendQueryUserListRsp::user_info_list() const {
  // @@protoc_insertion_point(field_list:CIM.Friend.CIMFriendQueryUserListRsp.user_info_list)
  return user_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Friend
}  // namespace CIM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CIM_2eFriend_2eproto
