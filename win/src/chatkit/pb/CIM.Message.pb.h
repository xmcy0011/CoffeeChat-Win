// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CIM_2eMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CIM_2eMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CIM.Def.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CIM_2eMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CIM_2eMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace CIM {
namespace Message {
class CIMGetLatestMsgIdReq;
class CIMGetLatestMsgIdReqDefaultTypeInternal;
extern CIMGetLatestMsgIdReqDefaultTypeInternal _CIMGetLatestMsgIdReq_default_instance_;
class CIMGetLatestMsgIdRsp;
class CIMGetLatestMsgIdRspDefaultTypeInternal;
extern CIMGetLatestMsgIdRspDefaultTypeInternal _CIMGetLatestMsgIdRsp_default_instance_;
class CIMGetMsgByIdReq;
class CIMGetMsgByIdReqDefaultTypeInternal;
extern CIMGetMsgByIdReqDefaultTypeInternal _CIMGetMsgByIdReq_default_instance_;
class CIMGetMsgByIdRsp;
class CIMGetMsgByIdRspDefaultTypeInternal;
extern CIMGetMsgByIdRspDefaultTypeInternal _CIMGetMsgByIdRsp_default_instance_;
class CIMMsgData;
class CIMMsgDataDefaultTypeInternal;
extern CIMMsgDataDefaultTypeInternal _CIMMsgData_default_instance_;
class CIMMsgDataAck;
class CIMMsgDataAckDefaultTypeInternal;
extern CIMMsgDataAckDefaultTypeInternal _CIMMsgDataAck_default_instance_;
class CIMMsgDataReadAck;
class CIMMsgDataReadAckDefaultTypeInternal;
extern CIMMsgDataReadAckDefaultTypeInternal _CIMMsgDataReadAck_default_instance_;
class CIMMsgDataReadNotify;
class CIMMsgDataReadNotifyDefaultTypeInternal;
extern CIMMsgDataReadNotifyDefaultTypeInternal _CIMMsgDataReadNotify_default_instance_;
}  // namespace Message
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> ::CIM::Message::CIMGetLatestMsgIdReq* Arena::CreateMaybeMessage<::CIM::Message::CIMGetLatestMsgIdReq>(Arena*);
template<> ::CIM::Message::CIMGetLatestMsgIdRsp* Arena::CreateMaybeMessage<::CIM::Message::CIMGetLatestMsgIdRsp>(Arena*);
template<> ::CIM::Message::CIMGetMsgByIdReq* Arena::CreateMaybeMessage<::CIM::Message::CIMGetMsgByIdReq>(Arena*);
template<> ::CIM::Message::CIMGetMsgByIdRsp* Arena::CreateMaybeMessage<::CIM::Message::CIMGetMsgByIdRsp>(Arena*);
template<> ::CIM::Message::CIMMsgData* Arena::CreateMaybeMessage<::CIM::Message::CIMMsgData>(Arena*);
template<> ::CIM::Message::CIMMsgDataAck* Arena::CreateMaybeMessage<::CIM::Message::CIMMsgDataAck>(Arena*);
template<> ::CIM::Message::CIMMsgDataReadAck* Arena::CreateMaybeMessage<::CIM::Message::CIMMsgDataReadAck>(Arena*);
template<> ::CIM::Message::CIMMsgDataReadNotify* Arena::CreateMaybeMessage<::CIM::Message::CIMMsgDataReadNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CIM {
namespace Message {

// ===================================================================

class CIMMsgData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMMsgData) */ {
 public:
  inline CIMMsgData() : CIMMsgData(nullptr) {}
  virtual ~CIMMsgData();

  CIMMsgData(const CIMMsgData& from);
  CIMMsgData(CIMMsgData&& from) noexcept
    : CIMMsgData() {
    *this = ::std::move(from);
  }

  inline CIMMsgData& operator=(const CIMMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMMsgData& operator=(CIMMsgData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMMsgData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMMsgData* internal_default_instance() {
    return reinterpret_cast<const CIMMsgData*>(
               &_CIMMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CIMMsgData& a, CIMMsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMMsgData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMMsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMMsgData* New() const final {
    return CreateMaybeMessage<CIMMsgData>(nullptr);
  }

  CIMMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMMsgData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMMsgData& from);
  void MergeFrom(const CIMMsgData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMMsgData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMMsgData";
  }
  protected:
  explicit CIMMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNickNameFieldNumber = 2,
    kClientMsgIdFieldNumber = 4,
    kMsgDataFieldNumber = 9,
    kFromUserIdFieldNumber = 1,
    kToSessionIdFieldNumber = 3,
    kServerMsgIdFieldNumber = 5,
    kCreateTimeFieldNumber = 6,
    kMsgTypeFieldNumber = 7,
    kSessionTypeFieldNumber = 8,
  };
  // string from_nick_name = 2;
  void clear_from_nick_name();
  const std::string& from_nick_name() const;
  void set_from_nick_name(const std::string& value);
  void set_from_nick_name(std::string&& value);
  void set_from_nick_name(const char* value);
  void set_from_nick_name(const char* value, size_t size);
  std::string* mutable_from_nick_name();
  std::string* release_from_nick_name();
  void set_allocated_from_nick_name(std::string* from_nick_name);
  private:
  const std::string& _internal_from_nick_name() const;
  void _internal_set_from_nick_name(const std::string& value);
  std::string* _internal_mutable_from_nick_name();
  public:

  // string client_msg_id = 4;
  void clear_client_msg_id();
  const std::string& client_msg_id() const;
  void set_client_msg_id(const std::string& value);
  void set_client_msg_id(std::string&& value);
  void set_client_msg_id(const char* value);
  void set_client_msg_id(const char* value, size_t size);
  std::string* mutable_client_msg_id();
  std::string* release_client_msg_id();
  void set_allocated_client_msg_id(std::string* client_msg_id);
  private:
  const std::string& _internal_client_msg_id() const;
  void _internal_set_client_msg_id(const std::string& value);
  std::string* _internal_mutable_client_msg_id();
  public:

  // bytes msg_data = 9;
  void clear_msg_data();
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // uint64 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to_session_id = 3;
  void clear_to_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_session_id() const;
  void set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to_session_id() const;
  void _internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 server_msg_id = 5;
  void clear_server_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_msg_id() const;
  void set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_msg_id() const;
  void _internal_set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 create_time = 6;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .CIM.Def.CIMMsgType msg_type = 7;
  void clear_msg_type();
  ::CIM::Def::CIMMsgType msg_type() const;
  void set_msg_type(::CIM::Def::CIMMsgType value);
  private:
  ::CIM::Def::CIMMsgType _internal_msg_type() const;
  void _internal_set_msg_type(::CIM::Def::CIMMsgType value);
  public:

  // .CIM.Def.CIMSessionType session_type = 8;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMMsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_time_;
  int msg_type_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMMsgDataAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMMsgDataAck) */ {
 public:
  inline CIMMsgDataAck() : CIMMsgDataAck(nullptr) {}
  virtual ~CIMMsgDataAck();

  CIMMsgDataAck(const CIMMsgDataAck& from);
  CIMMsgDataAck(CIMMsgDataAck&& from) noexcept
    : CIMMsgDataAck() {
    *this = ::std::move(from);
  }

  inline CIMMsgDataAck& operator=(const CIMMsgDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMMsgDataAck& operator=(CIMMsgDataAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMMsgDataAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMMsgDataAck* internal_default_instance() {
    return reinterpret_cast<const CIMMsgDataAck*>(
               &_CIMMsgDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CIMMsgDataAck& a, CIMMsgDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMMsgDataAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMMsgDataAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMMsgDataAck* New() const final {
    return CreateMaybeMessage<CIMMsgDataAck>(nullptr);
  }

  CIMMsgDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMMsgDataAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMMsgDataAck& from);
  void MergeFrom(const CIMMsgDataAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMMsgDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMMsgDataAck";
  }
  protected:
  explicit CIMMsgDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientMsgIdFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToSessionIdFieldNumber = 2,
    kServerMsgIdFieldNumber = 4,
    kResCodeFieldNumber = 5,
    kSessionTypeFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
  };
  // string client_msg_id = 3;
  void clear_client_msg_id();
  const std::string& client_msg_id() const;
  void set_client_msg_id(const std::string& value);
  void set_client_msg_id(std::string&& value);
  void set_client_msg_id(const char* value);
  void set_client_msg_id(const char* value, size_t size);
  std::string* mutable_client_msg_id();
  std::string* release_client_msg_id();
  void set_allocated_client_msg_id(std::string* client_msg_id);
  private:
  const std::string& _internal_client_msg_id() const;
  void _internal_set_client_msg_id(const std::string& value);
  std::string* _internal_mutable_client_msg_id();
  public:

  // uint64 from_user_id = 1;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to_session_id = 2;
  void clear_to_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_session_id() const;
  void set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to_session_id() const;
  void _internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 server_msg_id = 4;
  void clear_server_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_msg_id() const;
  void set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_msg_id() const;
  void _internal_set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMResCode res_code = 5;
  void clear_res_code();
  ::CIM::Def::CIMResCode res_code() const;
  void set_res_code(::CIM::Def::CIMResCode value);
  private:
  ::CIM::Def::CIMResCode _internal_res_code() const;
  void _internal_set_res_code(::CIM::Def::CIMResCode value);
  public:

  // .CIM.Def.CIMSessionType session_type = 6;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // int32 create_time = 7;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMMsgDataAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_msg_id_;
  int res_code_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMMsgDataReadAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMMsgDataReadAck) */ {
 public:
  inline CIMMsgDataReadAck() : CIMMsgDataReadAck(nullptr) {}
  virtual ~CIMMsgDataReadAck();

  CIMMsgDataReadAck(const CIMMsgDataReadAck& from);
  CIMMsgDataReadAck(CIMMsgDataReadAck&& from) noexcept
    : CIMMsgDataReadAck() {
    *this = ::std::move(from);
  }

  inline CIMMsgDataReadAck& operator=(const CIMMsgDataReadAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMMsgDataReadAck& operator=(CIMMsgDataReadAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMMsgDataReadAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMMsgDataReadAck* internal_default_instance() {
    return reinterpret_cast<const CIMMsgDataReadAck*>(
               &_CIMMsgDataReadAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CIMMsgDataReadAck& a, CIMMsgDataReadAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMMsgDataReadAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMMsgDataReadAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMMsgDataReadAck* New() const final {
    return CreateMaybeMessage<CIMMsgDataReadAck>(nullptr);
  }

  CIMMsgDataReadAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMMsgDataReadAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMMsgDataReadAck& from);
  void MergeFrom(const CIMMsgDataReadAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMMsgDataReadAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMMsgDataReadAck";
  }
  protected:
  explicit CIMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSessionTypeFieldNumber = 4,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 4;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMMsgDataReadAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMMsgDataReadNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMMsgDataReadNotify) */ {
 public:
  inline CIMMsgDataReadNotify() : CIMMsgDataReadNotify(nullptr) {}
  virtual ~CIMMsgDataReadNotify();

  CIMMsgDataReadNotify(const CIMMsgDataReadNotify& from);
  CIMMsgDataReadNotify(CIMMsgDataReadNotify&& from) noexcept
    : CIMMsgDataReadNotify() {
    *this = ::std::move(from);
  }

  inline CIMMsgDataReadNotify& operator=(const CIMMsgDataReadNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMMsgDataReadNotify& operator=(CIMMsgDataReadNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMMsgDataReadNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMMsgDataReadNotify* internal_default_instance() {
    return reinterpret_cast<const CIMMsgDataReadNotify*>(
               &_CIMMsgDataReadNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CIMMsgDataReadNotify& a, CIMMsgDataReadNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMMsgDataReadNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMMsgDataReadNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMMsgDataReadNotify* New() const final {
    return CreateMaybeMessage<CIMMsgDataReadNotify>(nullptr);
  }

  CIMMsgDataReadNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMMsgDataReadNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMMsgDataReadNotify& from);
  void MergeFrom(const CIMMsgDataReadNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMMsgDataReadNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMMsgDataReadNotify";
  }
  protected:
  explicit CIMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kSessionTypeFieldNumber = 4,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_id = 3;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 4;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMMsgDataReadNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMGetLatestMsgIdReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMGetLatestMsgIdReq) */ {
 public:
  inline CIMGetLatestMsgIdReq() : CIMGetLatestMsgIdReq(nullptr) {}
  virtual ~CIMGetLatestMsgIdReq();

  CIMGetLatestMsgIdReq(const CIMGetLatestMsgIdReq& from);
  CIMGetLatestMsgIdReq(CIMGetLatestMsgIdReq&& from) noexcept
    : CIMGetLatestMsgIdReq() {
    *this = ::std::move(from);
  }

  inline CIMGetLatestMsgIdReq& operator=(const CIMGetLatestMsgIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMGetLatestMsgIdReq& operator=(CIMGetLatestMsgIdReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMGetLatestMsgIdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMGetLatestMsgIdReq* internal_default_instance() {
    return reinterpret_cast<const CIMGetLatestMsgIdReq*>(
               &_CIMGetLatestMsgIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CIMGetLatestMsgIdReq& a, CIMGetLatestMsgIdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMGetLatestMsgIdReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMGetLatestMsgIdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMGetLatestMsgIdReq* New() const final {
    return CreateMaybeMessage<CIMGetLatestMsgIdReq>(nullptr);
  }

  CIMGetLatestMsgIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMGetLatestMsgIdReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMGetLatestMsgIdReq& from);
  void MergeFrom(const CIMGetLatestMsgIdReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMGetLatestMsgIdReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMGetLatestMsgIdReq";
  }
  protected:
  explicit CIMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kSessionTypeFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 2;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMGetLatestMsgIdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMGetLatestMsgIdRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMGetLatestMsgIdRsp) */ {
 public:
  inline CIMGetLatestMsgIdRsp() : CIMGetLatestMsgIdRsp(nullptr) {}
  virtual ~CIMGetLatestMsgIdRsp();

  CIMGetLatestMsgIdRsp(const CIMGetLatestMsgIdRsp& from);
  CIMGetLatestMsgIdRsp(CIMGetLatestMsgIdRsp&& from) noexcept
    : CIMGetLatestMsgIdRsp() {
    *this = ::std::move(from);
  }

  inline CIMGetLatestMsgIdRsp& operator=(const CIMGetLatestMsgIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMGetLatestMsgIdRsp& operator=(CIMGetLatestMsgIdRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMGetLatestMsgIdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMGetLatestMsgIdRsp* internal_default_instance() {
    return reinterpret_cast<const CIMGetLatestMsgIdRsp*>(
               &_CIMGetLatestMsgIdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CIMGetLatestMsgIdRsp& a, CIMGetLatestMsgIdRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMGetLatestMsgIdRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMGetLatestMsgIdRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMGetLatestMsgIdRsp* New() const final {
    return CreateMaybeMessage<CIMGetLatestMsgIdRsp>(nullptr);
  }

  CIMGetLatestMsgIdRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMGetLatestMsgIdRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMGetLatestMsgIdRsp& from);
  void MergeFrom(const CIMGetLatestMsgIdRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMGetLatestMsgIdRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMGetLatestMsgIdRsp";
  }
  protected:
  explicit CIMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestMsgIdFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kSessionTypeFieldNumber = 2,
  };
  // string latest_msg_id = 4;
  void clear_latest_msg_id();
  const std::string& latest_msg_id() const;
  void set_latest_msg_id(const std::string& value);
  void set_latest_msg_id(std::string&& value);
  void set_latest_msg_id(const char* value);
  void set_latest_msg_id(const char* value, size_t size);
  std::string* mutable_latest_msg_id();
  std::string* release_latest_msg_id();
  void set_allocated_latest_msg_id(std::string* latest_msg_id);
  private:
  const std::string& _internal_latest_msg_id() const;
  void _internal_set_latest_msg_id(const std::string& value);
  std::string* _internal_mutable_latest_msg_id();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 2;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMGetLatestMsgIdRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMGetMsgByIdReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMGetMsgByIdReq) */ {
 public:
  inline CIMGetMsgByIdReq() : CIMGetMsgByIdReq(nullptr) {}
  virtual ~CIMGetMsgByIdReq();

  CIMGetMsgByIdReq(const CIMGetMsgByIdReq& from);
  CIMGetMsgByIdReq(CIMGetMsgByIdReq&& from) noexcept
    : CIMGetMsgByIdReq() {
    *this = ::std::move(from);
  }

  inline CIMGetMsgByIdReq& operator=(const CIMGetMsgByIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMGetMsgByIdReq& operator=(CIMGetMsgByIdReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMGetMsgByIdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMGetMsgByIdReq* internal_default_instance() {
    return reinterpret_cast<const CIMGetMsgByIdReq*>(
               &_CIMGetMsgByIdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CIMGetMsgByIdReq& a, CIMGetMsgByIdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMGetMsgByIdReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMGetMsgByIdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMGetMsgByIdReq* New() const final {
    return CreateMaybeMessage<CIMGetMsgByIdReq>(nullptr);
  }

  CIMGetMsgByIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMGetMsgByIdReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMGetMsgByIdReq& from);
  void MergeFrom(const CIMGetMsgByIdReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMGetMsgByIdReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMGetMsgByIdReq";
  }
  protected:
  explicit CIMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdListFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kSessionTypeFieldNumber = 2,
  };
  // repeated string msg_id_list = 4;
  int msg_id_list_size() const;
  private:
  int _internal_msg_id_list_size() const;
  public:
  void clear_msg_id_list();
  const std::string& msg_id_list(int index) const;
  std::string* mutable_msg_id_list(int index);
  void set_msg_id_list(int index, const std::string& value);
  void set_msg_id_list(int index, std::string&& value);
  void set_msg_id_list(int index, const char* value);
  void set_msg_id_list(int index, const char* value, size_t size);
  std::string* add_msg_id_list();
  void add_msg_id_list(const std::string& value);
  void add_msg_id_list(std::string&& value);
  void add_msg_id_list(const char* value);
  void add_msg_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg_id_list();
  private:
  const std::string& _internal_msg_id_list(int index) const;
  std::string* _internal_add_msg_id_list();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 2;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMGetMsgByIdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_id_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// -------------------------------------------------------------------

class CIMGetMsgByIdRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Message.CIMGetMsgByIdRsp) */ {
 public:
  inline CIMGetMsgByIdRsp() : CIMGetMsgByIdRsp(nullptr) {}
  virtual ~CIMGetMsgByIdRsp();

  CIMGetMsgByIdRsp(const CIMGetMsgByIdRsp& from);
  CIMGetMsgByIdRsp(CIMGetMsgByIdRsp&& from) noexcept
    : CIMGetMsgByIdRsp() {
    *this = ::std::move(from);
  }

  inline CIMGetMsgByIdRsp& operator=(const CIMGetMsgByIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMGetMsgByIdRsp& operator=(CIMGetMsgByIdRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMGetMsgByIdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIMGetMsgByIdRsp* internal_default_instance() {
    return reinterpret_cast<const CIMGetMsgByIdRsp*>(
               &_CIMGetMsgByIdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CIMGetMsgByIdRsp& a, CIMGetMsgByIdRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMGetMsgByIdRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMGetMsgByIdRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMGetMsgByIdRsp* New() const final {
    return CreateMaybeMessage<CIMGetMsgByIdRsp>(nullptr);
  }

  CIMGetMsgByIdRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMGetMsgByIdRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMGetMsgByIdRsp& from);
  void MergeFrom(const CIMGetMsgByIdRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMGetMsgByIdRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Message.CIMGetMsgByIdRsp";
  }
  protected:
  explicit CIMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kSessionTypeFieldNumber = 2,
  };
  // repeated .CIM.Def.CIMMsgInfo msg_list = 4;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::CIM::Def::CIMMsgInfo* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMMsgInfo >*
      mutable_msg_list();
  private:
  const ::CIM::Def::CIMMsgInfo& _internal_msg_list(int index) const;
  ::CIM::Def::CIMMsgInfo* _internal_add_msg_list();
  public:
  const ::CIM::Def::CIMMsgInfo& msg_list(int index) const;
  ::CIM::Def::CIMMsgInfo* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMMsgInfo >&
      msg_list() const;

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 session_id = 3;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMSessionType session_type = 2;
  void clear_session_type();
  ::CIM::Def::CIMSessionType session_type() const;
  void set_session_type(::CIM::Def::CIMSessionType value);
  private:
  ::CIM::Def::CIMSessionType _internal_session_type() const;
  void _internal_set_session_type(::CIM::Def::CIMSessionType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Message.CIMGetMsgByIdRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMMsgInfo > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CIMMsgData

// uint64 from_user_id = 1;
inline void CIMMsgData::clear_from_user_id() {
  from_user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::from_user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.from_user_id)
  return _internal_from_user_id();
}
inline void CIMMsgData::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_user_id_ = value;
}
inline void CIMMsgData::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.from_user_id)
}

// string from_nick_name = 2;
inline void CIMMsgData::clear_from_nick_name() {
  from_nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CIMMsgData::from_nick_name() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.from_nick_name)
  return _internal_from_nick_name();
}
inline void CIMMsgData::set_from_nick_name(const std::string& value) {
  _internal_set_from_nick_name(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.from_nick_name)
}
inline std::string* CIMMsgData::mutable_from_nick_name() {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMMsgData.from_nick_name)
  return _internal_mutable_from_nick_name();
}
inline const std::string& CIMMsgData::_internal_from_nick_name() const {
  return from_nick_name_.Get();
}
inline void CIMMsgData::_internal_set_from_nick_name(const std::string& value) {
  
  from_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CIMMsgData::set_from_nick_name(std::string&& value) {
  
  from_nick_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Message.CIMMsgData.from_nick_name)
}
inline void CIMMsgData::set_from_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMMsgData.from_nick_name)
}
inline void CIMMsgData::set_from_nick_name(const char* value,
    size_t size) {
  
  from_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMMsgData.from_nick_name)
}
inline std::string* CIMMsgData::_internal_mutable_from_nick_name() {
  
  return from_nick_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CIMMsgData::release_from_nick_name() {
  // @@protoc_insertion_point(field_release:CIM.Message.CIMMsgData.from_nick_name)
  return from_nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMMsgData::set_allocated_from_nick_name(std::string* from_nick_name) {
  if (from_nick_name != nullptr) {
    
  } else {
    
  }
  from_nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Message.CIMMsgData.from_nick_name)
}

// uint64 to_session_id = 3;
inline void CIMMsgData::clear_to_session_id() {
  to_session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::_internal_to_session_id() const {
  return to_session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::to_session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.to_session_id)
  return _internal_to_session_id();
}
inline void CIMMsgData::_internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_session_id_ = value;
}
inline void CIMMsgData::set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.to_session_id)
}

// string client_msg_id = 4;
inline void CIMMsgData::clear_client_msg_id() {
  client_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CIMMsgData::client_msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.client_msg_id)
  return _internal_client_msg_id();
}
inline void CIMMsgData::set_client_msg_id(const std::string& value) {
  _internal_set_client_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.client_msg_id)
}
inline std::string* CIMMsgData::mutable_client_msg_id() {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMMsgData.client_msg_id)
  return _internal_mutable_client_msg_id();
}
inline const std::string& CIMMsgData::_internal_client_msg_id() const {
  return client_msg_id_.Get();
}
inline void CIMMsgData::_internal_set_client_msg_id(const std::string& value) {
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CIMMsgData::set_client_msg_id(std::string&& value) {
  
  client_msg_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Message.CIMMsgData.client_msg_id)
}
inline void CIMMsgData::set_client_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMMsgData.client_msg_id)
}
inline void CIMMsgData::set_client_msg_id(const char* value,
    size_t size) {
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMMsgData.client_msg_id)
}
inline std::string* CIMMsgData::_internal_mutable_client_msg_id() {
  
  return client_msg_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CIMMsgData::release_client_msg_id() {
  // @@protoc_insertion_point(field_release:CIM.Message.CIMMsgData.client_msg_id)
  return client_msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMMsgData::set_allocated_client_msg_id(std::string* client_msg_id) {
  if (client_msg_id != nullptr) {
    
  } else {
    
  }
  client_msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_msg_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Message.CIMMsgData.client_msg_id)
}

// uint64 server_msg_id = 5;
inline void CIMMsgData::clear_server_msg_id() {
  server_msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::_internal_server_msg_id() const {
  return server_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgData::server_msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.server_msg_id)
  return _internal_server_msg_id();
}
inline void CIMMsgData::_internal_set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_msg_id_ = value;
}
inline void CIMMsgData::set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.server_msg_id)
}

// int32 create_time = 6;
inline void CIMMsgData::clear_create_time() {
  create_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIMMsgData::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIMMsgData::create_time() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.create_time)
  return _internal_create_time();
}
inline void CIMMsgData::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_time_ = value;
}
inline void CIMMsgData::set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.create_time)
}

// .CIM.Def.CIMMsgType msg_type = 7;
inline void CIMMsgData::clear_msg_type() {
  msg_type_ = 0;
}
inline ::CIM::Def::CIMMsgType CIMMsgData::_internal_msg_type() const {
  return static_cast< ::CIM::Def::CIMMsgType >(msg_type_);
}
inline ::CIM::Def::CIMMsgType CIMMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.msg_type)
  return _internal_msg_type();
}
inline void CIMMsgData::_internal_set_msg_type(::CIM::Def::CIMMsgType value) {
  
  msg_type_ = value;
}
inline void CIMMsgData::set_msg_type(::CIM::Def::CIMMsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.msg_type)
}

// .CIM.Def.CIMSessionType session_type = 8;
inline void CIMMsgData::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMMsgData::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMMsgData::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.session_type)
  return _internal_session_type();
}
inline void CIMMsgData::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMMsgData::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.session_type)
}

// bytes msg_data = 9;
inline void CIMMsgData::clear_msg_data() {
  msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CIMMsgData::msg_data() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgData.msg_data)
  return _internal_msg_data();
}
inline void CIMMsgData::set_msg_data(const std::string& value) {
  _internal_set_msg_data(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgData.msg_data)
}
inline std::string* CIMMsgData::mutable_msg_data() {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMMsgData.msg_data)
  return _internal_mutable_msg_data();
}
inline const std::string& CIMMsgData::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void CIMMsgData::_internal_set_msg_data(const std::string& value) {
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CIMMsgData::set_msg_data(std::string&& value) {
  
  msg_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Message.CIMMsgData.msg_data)
}
inline void CIMMsgData::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMMsgData.msg_data)
}
inline void CIMMsgData::set_msg_data(const void* value,
    size_t size) {
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMMsgData.msg_data)
}
inline std::string* CIMMsgData::_internal_mutable_msg_data() {
  
  return msg_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CIMMsgData::release_msg_data() {
  // @@protoc_insertion_point(field_release:CIM.Message.CIMMsgData.msg_data)
  return msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMMsgData::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Message.CIMMsgData.msg_data)
}

// -------------------------------------------------------------------

// CIMMsgDataAck

// uint64 from_user_id = 1;
inline void CIMMsgDataAck::clear_from_user_id() {
  from_user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::from_user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.from_user_id)
  return _internal_from_user_id();
}
inline void CIMMsgDataAck::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_user_id_ = value;
}
inline void CIMMsgDataAck::set_from_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.from_user_id)
}

// uint64 to_session_id = 2;
inline void CIMMsgDataAck::clear_to_session_id() {
  to_session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::_internal_to_session_id() const {
  return to_session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::to_session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.to_session_id)
  return _internal_to_session_id();
}
inline void CIMMsgDataAck::_internal_set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_session_id_ = value;
}
inline void CIMMsgDataAck::set_to_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.to_session_id)
}

// string client_msg_id = 3;
inline void CIMMsgDataAck::clear_client_msg_id() {
  client_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CIMMsgDataAck::client_msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.client_msg_id)
  return _internal_client_msg_id();
}
inline void CIMMsgDataAck::set_client_msg_id(const std::string& value) {
  _internal_set_client_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.client_msg_id)
}
inline std::string* CIMMsgDataAck::mutable_client_msg_id() {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMMsgDataAck.client_msg_id)
  return _internal_mutable_client_msg_id();
}
inline const std::string& CIMMsgDataAck::_internal_client_msg_id() const {
  return client_msg_id_.Get();
}
inline void CIMMsgDataAck::_internal_set_client_msg_id(const std::string& value) {
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CIMMsgDataAck::set_client_msg_id(std::string&& value) {
  
  client_msg_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Message.CIMMsgDataAck.client_msg_id)
}
inline void CIMMsgDataAck::set_client_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMMsgDataAck.client_msg_id)
}
inline void CIMMsgDataAck::set_client_msg_id(const char* value,
    size_t size) {
  
  client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMMsgDataAck.client_msg_id)
}
inline std::string* CIMMsgDataAck::_internal_mutable_client_msg_id() {
  
  return client_msg_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CIMMsgDataAck::release_client_msg_id() {
  // @@protoc_insertion_point(field_release:CIM.Message.CIMMsgDataAck.client_msg_id)
  return client_msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMMsgDataAck::set_allocated_client_msg_id(std::string* client_msg_id) {
  if (client_msg_id != nullptr) {
    
  } else {
    
  }
  client_msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_msg_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Message.CIMMsgDataAck.client_msg_id)
}

// uint64 server_msg_id = 4;
inline void CIMMsgDataAck::clear_server_msg_id() {
  server_msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::_internal_server_msg_id() const {
  return server_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataAck::server_msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.server_msg_id)
  return _internal_server_msg_id();
}
inline void CIMMsgDataAck::_internal_set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_msg_id_ = value;
}
inline void CIMMsgDataAck::set_server_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.server_msg_id)
}

// .CIM.Def.CIMResCode res_code = 5;
inline void CIMMsgDataAck::clear_res_code() {
  res_code_ = 0;
}
inline ::CIM::Def::CIMResCode CIMMsgDataAck::_internal_res_code() const {
  return static_cast< ::CIM::Def::CIMResCode >(res_code_);
}
inline ::CIM::Def::CIMResCode CIMMsgDataAck::res_code() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.res_code)
  return _internal_res_code();
}
inline void CIMMsgDataAck::_internal_set_res_code(::CIM::Def::CIMResCode value) {
  
  res_code_ = value;
}
inline void CIMMsgDataAck::set_res_code(::CIM::Def::CIMResCode value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.res_code)
}

// .CIM.Def.CIMSessionType session_type = 6;
inline void CIMMsgDataAck::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMMsgDataAck::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMMsgDataAck::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.session_type)
  return _internal_session_type();
}
inline void CIMMsgDataAck::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMMsgDataAck::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.session_type)
}

// int32 create_time = 7;
inline void CIMMsgDataAck::clear_create_time() {
  create_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIMMsgDataAck::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIMMsgDataAck::create_time() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataAck.create_time)
  return _internal_create_time();
}
inline void CIMMsgDataAck::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_time_ = value;
}
inline void CIMMsgDataAck::set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataAck.create_time)
}

// -------------------------------------------------------------------

// CIMMsgDataReadAck

// uint64 user_id = 1;
inline void CIMMsgDataReadAck::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadAck.user_id)
  return _internal_user_id();
}
inline void CIMMsgDataReadAck::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMMsgDataReadAck::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadAck.user_id)
}

// uint64 session_id = 2;
inline void CIMMsgDataReadAck::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadAck.session_id)
  return _internal_session_id();
}
inline void CIMMsgDataReadAck::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMMsgDataReadAck::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadAck.session_id)
}

// uint64 msg_id = 3;
inline void CIMMsgDataReadAck::clear_msg_id() {
  msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadAck::msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadAck.msg_id)
  return _internal_msg_id();
}
inline void CIMMsgDataReadAck::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_id_ = value;
}
inline void CIMMsgDataReadAck::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadAck.msg_id)
}

// .CIM.Def.CIMSessionType session_type = 4;
inline void CIMMsgDataReadAck::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMMsgDataReadAck::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMMsgDataReadAck::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadAck.session_type)
  return _internal_session_type();
}
inline void CIMMsgDataReadAck::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMMsgDataReadAck::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadAck.session_type)
}

// -------------------------------------------------------------------

// CIMMsgDataReadNotify

// uint64 user_id = 1;
inline void CIMMsgDataReadNotify::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadNotify.user_id)
  return _internal_user_id();
}
inline void CIMMsgDataReadNotify::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMMsgDataReadNotify::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadNotify.user_id)
}

// uint64 session_id = 2;
inline void CIMMsgDataReadNotify::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadNotify.session_id)
  return _internal_session_id();
}
inline void CIMMsgDataReadNotify::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMMsgDataReadNotify::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadNotify.session_id)
}

// uint64 msg_id = 3;
inline void CIMMsgDataReadNotify::clear_msg_id() {
  msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMMsgDataReadNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadNotify.msg_id)
  return _internal_msg_id();
}
inline void CIMMsgDataReadNotify::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_id_ = value;
}
inline void CIMMsgDataReadNotify::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadNotify.msg_id)
}

// .CIM.Def.CIMSessionType session_type = 4;
inline void CIMMsgDataReadNotify::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMMsgDataReadNotify::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMMsgDataReadNotify::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMMsgDataReadNotify.session_type)
  return _internal_session_type();
}
inline void CIMMsgDataReadNotify::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMMsgDataReadNotify::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMMsgDataReadNotify.session_type)
}

// -------------------------------------------------------------------

// CIMGetLatestMsgIdReq

// uint64 user_id = 1;
inline void CIMGetLatestMsgIdReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdReq.user_id)
  return _internal_user_id();
}
inline void CIMGetLatestMsgIdReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMGetLatestMsgIdReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdReq.user_id)
}

// .CIM.Def.CIMSessionType session_type = 2;
inline void CIMGetLatestMsgIdReq::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMGetLatestMsgIdReq::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMGetLatestMsgIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdReq.session_type)
  return _internal_session_type();
}
inline void CIMGetLatestMsgIdReq::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMGetLatestMsgIdReq::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdReq.session_type)
}

// uint64 session_id = 3;
inline void CIMGetLatestMsgIdReq::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdReq::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdReq.session_id)
  return _internal_session_id();
}
inline void CIMGetLatestMsgIdReq::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMGetLatestMsgIdReq::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdReq.session_id)
}

// -------------------------------------------------------------------

// CIMGetLatestMsgIdRsp

// uint64 user_id = 1;
inline void CIMGetLatestMsgIdRsp::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdRsp.user_id)
  return _internal_user_id();
}
inline void CIMGetLatestMsgIdRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMGetLatestMsgIdRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdRsp.user_id)
}

// .CIM.Def.CIMSessionType session_type = 2;
inline void CIMGetLatestMsgIdRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMGetLatestMsgIdRsp::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMGetLatestMsgIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdRsp.session_type)
  return _internal_session_type();
}
inline void CIMGetLatestMsgIdRsp::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMGetLatestMsgIdRsp::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdRsp.session_type)
}

// uint64 session_id = 3;
inline void CIMGetLatestMsgIdRsp::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdRsp::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetLatestMsgIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdRsp.session_id)
  return _internal_session_id();
}
inline void CIMGetLatestMsgIdRsp::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMGetLatestMsgIdRsp::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdRsp.session_id)
}

// string latest_msg_id = 4;
inline void CIMGetLatestMsgIdRsp::clear_latest_msg_id() {
  latest_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CIMGetLatestMsgIdRsp::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
  return _internal_latest_msg_id();
}
inline void CIMGetLatestMsgIdRsp::set_latest_msg_id(const std::string& value) {
  _internal_set_latest_msg_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
}
inline std::string* CIMGetLatestMsgIdRsp::mutable_latest_msg_id() {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
  return _internal_mutable_latest_msg_id();
}
inline const std::string& CIMGetLatestMsgIdRsp::_internal_latest_msg_id() const {
  return latest_msg_id_.Get();
}
inline void CIMGetLatestMsgIdRsp::_internal_set_latest_msg_id(const std::string& value) {
  
  latest_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CIMGetLatestMsgIdRsp::set_latest_msg_id(std::string&& value) {
  
  latest_msg_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
}
inline void CIMGetLatestMsgIdRsp::set_latest_msg_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
}
inline void CIMGetLatestMsgIdRsp::set_latest_msg_id(const char* value,
    size_t size) {
  
  latest_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
}
inline std::string* CIMGetLatestMsgIdRsp::_internal_mutable_latest_msg_id() {
  
  return latest_msg_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CIMGetLatestMsgIdRsp::release_latest_msg_id() {
  // @@protoc_insertion_point(field_release:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
  return latest_msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMGetLatestMsgIdRsp::set_allocated_latest_msg_id(std::string* latest_msg_id) {
  if (latest_msg_id != nullptr) {
    
  } else {
    
  }
  latest_msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_msg_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id)
}

// -------------------------------------------------------------------

// CIMGetMsgByIdReq

// uint64 user_id = 1;
inline void CIMGetMsgByIdReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdReq.user_id)
  return _internal_user_id();
}
inline void CIMGetMsgByIdReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMGetMsgByIdReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdReq.user_id)
}

// .CIM.Def.CIMSessionType session_type = 2;
inline void CIMGetMsgByIdReq::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMGetMsgByIdReq::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMGetMsgByIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdReq.session_type)
  return _internal_session_type();
}
inline void CIMGetMsgByIdReq::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMGetMsgByIdReq::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdReq.session_type)
}

// uint64 session_id = 3;
inline void CIMGetMsgByIdReq::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdReq::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdReq.session_id)
  return _internal_session_id();
}
inline void CIMGetMsgByIdReq::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMGetMsgByIdReq::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdReq.session_id)
}

// repeated string msg_id_list = 4;
inline int CIMGetMsgByIdReq::_internal_msg_id_list_size() const {
  return msg_id_list_.size();
}
inline int CIMGetMsgByIdReq::msg_id_list_size() const {
  return _internal_msg_id_list_size();
}
inline void CIMGetMsgByIdReq::clear_msg_id_list() {
  msg_id_list_.Clear();
}
inline std::string* CIMGetMsgByIdReq::add_msg_id_list() {
  // @@protoc_insertion_point(field_add_mutable:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  return _internal_add_msg_id_list();
}
inline const std::string& CIMGetMsgByIdReq::_internal_msg_id_list(int index) const {
  return msg_id_list_.Get(index);
}
inline const std::string& CIMGetMsgByIdReq::msg_id_list(int index) const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  return _internal_msg_id_list(index);
}
inline std::string* CIMGetMsgByIdReq::mutable_msg_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  return msg_id_list_.Mutable(index);
}
inline void CIMGetMsgByIdReq::set_msg_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  msg_id_list_.Mutable(index)->assign(value);
}
inline void CIMGetMsgByIdReq::set_msg_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  msg_id_list_.Mutable(index)->assign(std::move(value));
}
inline void CIMGetMsgByIdReq::set_msg_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline void CIMGetMsgByIdReq::set_msg_id_list(int index, const char* value, size_t size) {
  msg_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline std::string* CIMGetMsgByIdReq::_internal_add_msg_id_list() {
  return msg_id_list_.Add();
}
inline void CIMGetMsgByIdReq::add_msg_id_list(const std::string& value) {
  msg_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline void CIMGetMsgByIdReq::add_msg_id_list(std::string&& value) {
  msg_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline void CIMGetMsgByIdReq::add_msg_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline void CIMGetMsgByIdReq::add_msg_id_list(const char* value, size_t size) {
  msg_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CIMGetMsgByIdReq::msg_id_list() const {
  // @@protoc_insertion_point(field_list:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  return msg_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CIMGetMsgByIdReq::mutable_msg_id_list() {
  // @@protoc_insertion_point(field_mutable_list:CIM.Message.CIMGetMsgByIdReq.msg_id_list)
  return &msg_id_list_;
}

// -------------------------------------------------------------------

// CIMGetMsgByIdRsp

// uint64 user_id = 1;
inline void CIMGetMsgByIdRsp::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdRsp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdRsp.user_id)
  return _internal_user_id();
}
inline void CIMGetMsgByIdRsp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMGetMsgByIdRsp::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdRsp.user_id)
}

// .CIM.Def.CIMSessionType session_type = 2;
inline void CIMGetMsgByIdRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::CIM::Def::CIMSessionType CIMGetMsgByIdRsp::_internal_session_type() const {
  return static_cast< ::CIM::Def::CIMSessionType >(session_type_);
}
inline ::CIM::Def::CIMSessionType CIMGetMsgByIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdRsp.session_type)
  return _internal_session_type();
}
inline void CIMGetMsgByIdRsp::_internal_set_session_type(::CIM::Def::CIMSessionType value) {
  
  session_type_ = value;
}
inline void CIMGetMsgByIdRsp::set_session_type(::CIM::Def::CIMSessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdRsp.session_type)
}

// uint64 session_id = 3;
inline void CIMGetMsgByIdRsp::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdRsp::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMGetMsgByIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdRsp.session_id)
  return _internal_session_id();
}
inline void CIMGetMsgByIdRsp::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void CIMGetMsgByIdRsp::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CIM.Message.CIMGetMsgByIdRsp.session_id)
}

// repeated .CIM.Def.CIMMsgInfo msg_list = 4;
inline int CIMGetMsgByIdRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int CIMGetMsgByIdRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline ::CIM::Def::CIMMsgInfo* CIMGetMsgByIdRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:CIM.Message.CIMGetMsgByIdRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMMsgInfo >*
CIMGetMsgByIdRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:CIM.Message.CIMGetMsgByIdRsp.msg_list)
  return &msg_list_;
}
inline const ::CIM::Def::CIMMsgInfo& CIMGetMsgByIdRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::CIM::Def::CIMMsgInfo& CIMGetMsgByIdRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:CIM.Message.CIMGetMsgByIdRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::CIM::Def::CIMMsgInfo* CIMGetMsgByIdRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::CIM::Def::CIMMsgInfo* CIMGetMsgByIdRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:CIM.Message.CIMGetMsgByIdRsp.msg_list)
  return _internal_add_msg_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CIM::Def::CIMMsgInfo >&
CIMGetMsgByIdRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:CIM.Message.CIMGetMsgByIdRsp.msg_list)
  return msg_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace CIM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CIM_2eMessage_2eproto
