// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Def.proto
#include "pch.h"
#include "CIM.Def.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace CIM {
namespace Def {
class CIMUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMUserInfo> _instance;
} _CIMUserInfo_default_instance_;
class CIMContactSessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMContactSessionInfo> _instance;
} _CIMContactSessionInfo_default_instance_;
class CIMMsgInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMMsgInfo> _instance;
} _CIMMsgInfo_default_instance_;
class CIMChannelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMChannelInfo> _instance;
} _CIMChannelInfo_default_instance_;
}  // namespace Def
}  // namespace CIM
static void InitDefaultsscc_info_CIMChannelInfo_CIM_2eDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Def::_CIMChannelInfo_default_instance_;
    new (ptr) ::CIM::Def::CIMChannelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMChannelInfo_CIM_2eDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMChannelInfo_CIM_2eDef_2eproto}, {}};

static void InitDefaultsscc_info_CIMContactSessionInfo_CIM_2eDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Def::_CIMContactSessionInfo_default_instance_;
    new (ptr) ::CIM::Def::CIMContactSessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMContactSessionInfo_CIM_2eDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMContactSessionInfo_CIM_2eDef_2eproto}, {}};

static void InitDefaultsscc_info_CIMMsgInfo_CIM_2eDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Def::_CIMMsgInfo_default_instance_;
    new (ptr) ::CIM::Def::CIMMsgInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgInfo_CIM_2eDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMMsgInfo_CIM_2eDef_2eproto}, {}};

static void InitDefaultsscc_info_CIMUserInfo_CIM_2eDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Def::_CIMUserInfo_default_instance_;
    new (ptr) ::CIM::Def::CIMUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMUserInfo_CIM_2eDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMUserInfo_CIM_2eDef_2eproto}, {}};

namespace CIM {
namespace Def {
bool CIMCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 263:
    case 264:
    case 513:
    case 514:
    case 517:
    case 518:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1537:
    case 1538:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMCmdID_strings[46] = {};

static const char CIMCmdID_names[] =
  "kCIM_CID_FRIEND_QUERY_USER_LIST_REQ"
  "kCIM_CID_FRIEND_QUERY_USER_LIST_RSP"
  "kCIM_CID_GROUP_CREATE_DEFAULT_REQ"
  "kCIM_CID_GROUP_CREATE_DEFAULT_RSP"
  "kCIM_CID_GROUP_DISBINGDING_REQ"
  "kCIM_CID_GROUP_DISBINGDING_RSP"
  "kCIM_CID_GROUP_EXIT_REQ"
  "kCIM_CID_GROUP_EXIT_RSP"
  "kCIM_CID_GROUP_INFO_REQ"
  "kCIM_CID_GROUP_INFO_RSP"
  "kCIM_CID_GROUP_INVITE_MEMBER_REQ"
  "kCIM_CID_GROUP_INVITE_MEMBER_RSP"
  "kCIM_CID_GROUP_KICK_OUT_MEMBER_REQ"
  "kCIM_CID_GROUP_KICK_OUT_MEMBER_RSP"
  "kCIM_CID_GROUP_LIST_MEMBER_REQ"
  "kCIM_CID_GROUP_LIST_MEMBER_RSP"
  "kCIM_CID_GROUP_LIST_REQ"
  "kCIM_CID_GROUP_LIST_RSP"
  "kCIM_CID_GROUP_MEMBER_CHANGED_NOTIFY"
  "kCIM_CID_LIST_MSG_REQ"
  "kCIM_CID_LIST_MSG_RSP"
  "kCIM_CID_LIST_RECENT_CONTACT_SESSION_REQ"
  "kCIM_CID_LIST_RECENT_CONTACT_SESSION_RSP"
  "kCIM_CID_LOGIN_AUTH_LOGOUT_REQ"
  "kCIM_CID_LOGIN_AUTH_LOGOUT_RSP"
  "kCIM_CID_LOGIN_AUTH_REQ"
  "kCIM_CID_LOGIN_AUTH_RSP"
  "kCIM_CID_LOGIN_AUTH_TOKEN_REQ"
  "kCIM_CID_LOGIN_AUTH_TOKEN_RSP"
  "kCIM_CID_LOGIN_HEARTBEAT"
  "kCIM_CID_MSG_DATA"
  "kCIM_CID_MSG_DATA_ACK"
  "kCIM_CID_MSG_GET_BY_MSG_ID_REQ"
  "kCIM_CID_MSG_GET_BY_MSG_ID_RSP"
  "kCIM_CID_MSG_GET_LATEST_MSG_ID_REQ"
  "kCIM_CID_MSG_GET_LATEST_MSG_ID_RSP"
  "kCIM_CID_MSG_READ_ACK"
  "kCIM_CID_MSG_READ_NOTIFY"
  "kCIM_CID_UNKNOWN"
  "kCIM_CID_VOIP_BYE_NOTIFY"
  "kCIM_CID_VOIP_BYE_REQ"
  "kCIM_CID_VOIP_BYE_RSP"
  "kCIM_CID_VOIP_HEARTBEAT"
  "kCIM_CID_VOIP_INVITE_REPLY"
  "kCIM_CID_VOIP_INVITE_REPLY_ACK"
  "kCIM_CID_VOIP_INVITE_REQ";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMCmdID_entries[] = {
  { {CIMCmdID_names + 0, 35}, 1537 },
  { {CIMCmdID_names + 35, 35}, 1538 },
  { {CIMCmdID_names + 70, 33}, 1281 },
  { {CIMCmdID_names + 103, 33}, 1282 },
  { {CIMCmdID_names + 136, 30}, 1283 },
  { {CIMCmdID_names + 166, 30}, 1284 },
  { {CIMCmdID_names + 196, 23}, 1285 },
  { {CIMCmdID_names + 219, 23}, 1286 },
  { {CIMCmdID_names + 242, 23}, 1289 },
  { {CIMCmdID_names + 265, 23}, 1296 },
  { {CIMCmdID_names + 288, 32}, 1297 },
  { {CIMCmdID_names + 320, 32}, 1298 },
  { {CIMCmdID_names + 352, 34}, 1299 },
  { {CIMCmdID_names + 386, 34}, 1300 },
  { {CIMCmdID_names + 420, 30}, 1302 },
  { {CIMCmdID_names + 450, 30}, 1303 },
  { {CIMCmdID_names + 480, 23}, 1287 },
  { {CIMCmdID_names + 503, 23}, 1288 },
  { {CIMCmdID_names + 526, 36}, 1301 },
  { {CIMCmdID_names + 562, 21}, 517 },
  { {CIMCmdID_names + 583, 21}, 518 },
  { {CIMCmdID_names + 604, 40}, 513 },
  { {CIMCmdID_names + 644, 40}, 514 },
  { {CIMCmdID_names + 684, 30}, 259 },
  { {CIMCmdID_names + 714, 30}, 260 },
  { {CIMCmdID_names + 744, 23}, 263 },
  { {CIMCmdID_names + 767, 23}, 264 },
  { {CIMCmdID_names + 790, 29}, 257 },
  { {CIMCmdID_names + 819, 29}, 258 },
  { {CIMCmdID_names + 848, 24}, 261 },
  { {CIMCmdID_names + 872, 17}, 769 },
  { {CIMCmdID_names + 889, 21}, 770 },
  { {CIMCmdID_names + 910, 30}, 775 },
  { {CIMCmdID_names + 940, 30}, 776 },
  { {CIMCmdID_names + 970, 34}, 773 },
  { {CIMCmdID_names + 1004, 34}, 774 },
  { {CIMCmdID_names + 1038, 21}, 771 },
  { {CIMCmdID_names + 1059, 24}, 772 },
  { {CIMCmdID_names + 1083, 16}, 0 },
  { {CIMCmdID_names + 1099, 24}, 1031 },
  { {CIMCmdID_names + 1123, 21}, 1029 },
  { {CIMCmdID_names + 1144, 21}, 1030 },
  { {CIMCmdID_names + 1165, 23}, 1028 },
  { {CIMCmdID_names + 1188, 26}, 1026 },
  { {CIMCmdID_names + 1214, 30}, 1027 },
  { {CIMCmdID_names + 1244, 24}, 1025 },
};

static const int CIMCmdID_entries_by_number[] = {
  38, // 0 -> kCIM_CID_UNKNOWN
  27, // 257 -> kCIM_CID_LOGIN_AUTH_TOKEN_REQ
  28, // 258 -> kCIM_CID_LOGIN_AUTH_TOKEN_RSP
  23, // 259 -> kCIM_CID_LOGIN_AUTH_LOGOUT_REQ
  24, // 260 -> kCIM_CID_LOGIN_AUTH_LOGOUT_RSP
  29, // 261 -> kCIM_CID_LOGIN_HEARTBEAT
  25, // 263 -> kCIM_CID_LOGIN_AUTH_REQ
  26, // 264 -> kCIM_CID_LOGIN_AUTH_RSP
  21, // 513 -> kCIM_CID_LIST_RECENT_CONTACT_SESSION_REQ
  22, // 514 -> kCIM_CID_LIST_RECENT_CONTACT_SESSION_RSP
  19, // 517 -> kCIM_CID_LIST_MSG_REQ
  20, // 518 -> kCIM_CID_LIST_MSG_RSP
  30, // 769 -> kCIM_CID_MSG_DATA
  31, // 770 -> kCIM_CID_MSG_DATA_ACK
  36, // 771 -> kCIM_CID_MSG_READ_ACK
  37, // 772 -> kCIM_CID_MSG_READ_NOTIFY
  34, // 773 -> kCIM_CID_MSG_GET_LATEST_MSG_ID_REQ
  35, // 774 -> kCIM_CID_MSG_GET_LATEST_MSG_ID_RSP
  32, // 775 -> kCIM_CID_MSG_GET_BY_MSG_ID_REQ
  33, // 776 -> kCIM_CID_MSG_GET_BY_MSG_ID_RSP
  45, // 1025 -> kCIM_CID_VOIP_INVITE_REQ
  43, // 1026 -> kCIM_CID_VOIP_INVITE_REPLY
  44, // 1027 -> kCIM_CID_VOIP_INVITE_REPLY_ACK
  42, // 1028 -> kCIM_CID_VOIP_HEARTBEAT
  40, // 1029 -> kCIM_CID_VOIP_BYE_REQ
  41, // 1030 -> kCIM_CID_VOIP_BYE_RSP
  39, // 1031 -> kCIM_CID_VOIP_BYE_NOTIFY
  2, // 1281 -> kCIM_CID_GROUP_CREATE_DEFAULT_REQ
  3, // 1282 -> kCIM_CID_GROUP_CREATE_DEFAULT_RSP
  4, // 1283 -> kCIM_CID_GROUP_DISBINGDING_REQ
  5, // 1284 -> kCIM_CID_GROUP_DISBINGDING_RSP
  6, // 1285 -> kCIM_CID_GROUP_EXIT_REQ
  7, // 1286 -> kCIM_CID_GROUP_EXIT_RSP
  16, // 1287 -> kCIM_CID_GROUP_LIST_REQ
  17, // 1288 -> kCIM_CID_GROUP_LIST_RSP
  8, // 1289 -> kCIM_CID_GROUP_INFO_REQ
  9, // 1296 -> kCIM_CID_GROUP_INFO_RSP
  10, // 1297 -> kCIM_CID_GROUP_INVITE_MEMBER_REQ
  11, // 1298 -> kCIM_CID_GROUP_INVITE_MEMBER_RSP
  12, // 1299 -> kCIM_CID_GROUP_KICK_OUT_MEMBER_REQ
  13, // 1300 -> kCIM_CID_GROUP_KICK_OUT_MEMBER_RSP
  18, // 1301 -> kCIM_CID_GROUP_MEMBER_CHANGED_NOTIFY
  14, // 1302 -> kCIM_CID_GROUP_LIST_MEMBER_REQ
  15, // 1303 -> kCIM_CID_GROUP_LIST_MEMBER_RSP
  0, // 1537 -> kCIM_CID_FRIEND_QUERY_USER_LIST_REQ
  1, // 1538 -> kCIM_CID_FRIEND_QUERY_USER_LIST_RSP
};

const std::string& CIMCmdID_Name(
    CIMCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMCmdID_entries,
          CIMCmdID_entries_by_number,
          46, CIMCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMCmdID_entries,
      CIMCmdID_entries_by_number,
      46, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMCmdID_strings[idx].get();
}
bool CIMCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMCmdID_entries, 46, name, &int_value);
  if (success) {
    *value = static_cast<CIMCmdID>(int_value);
  }
  return success;
}
bool CIMIntenralCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1793:
    case 1794:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMIntenralCmdID_strings[3] = {};

static const char CIMIntenralCmdID_names[] =
  "kCIM_SID_DB_VALIDATE_REQ"
  "kCIM_SID_DB_VALIDATE_RSP"
  "kCIM_SID_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMIntenralCmdID_entries[] = {
  { {CIMIntenralCmdID_names + 0, 24}, 1793 },
  { {CIMIntenralCmdID_names + 24, 24}, 1794 },
  { {CIMIntenralCmdID_names + 48, 16}, 0 },
};

static const int CIMIntenralCmdID_entries_by_number[] = {
  2, // 0 -> kCIM_SID_UNKNOWN
  0, // 1793 -> kCIM_SID_DB_VALIDATE_REQ
  1, // 1794 -> kCIM_SID_DB_VALIDATE_RSP
};

const std::string& CIMIntenralCmdID_Name(
    CIMIntenralCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMIntenralCmdID_entries,
          CIMIntenralCmdID_entries_by_number,
          3, CIMIntenralCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMIntenralCmdID_entries,
      CIMIntenralCmdID_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMIntenralCmdID_strings[idx].get();
}
bool CIMIntenralCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMIntenralCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMIntenralCmdID_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMIntenralCmdID>(int_value);
  }
  return success;
}
bool CIMErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 201:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 9000:
    case 9001:
    case 9002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMErrorCode_strings[10] = {};

static const char CIMErrorCode_names[] =
  "kCIM_ERROR_USER_ALREADY_EXIST"
  "kCIM_ERROR_USER_INVALID_PARAMETER"
  "kCIM_ERROR_USER_NOT_EXIST"
  "kCIM_ERR_INTERNAL_ERROR"
  "kCIM_ERR_LOGIN_DB_VALIDATE_FAILED"
  "kCIM_ERR_LOGIN_INVALID_USER_OR_PWD"
  "kCIM_ERR_LOGIN_INVALID_USER_TOKEN"
  "kCIM_ERR_LOGIN_VERSION_TOO_OLD"
  "kCIM_ERR_SUCCSSE"
  "kCIM_ERR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMErrorCode_entries[] = {
  { {CIMErrorCode_names + 0, 29}, 9000 },
  { {CIMErrorCode_names + 29, 33}, 9001 },
  { {CIMErrorCode_names + 62, 25}, 9002 },
  { {CIMErrorCode_names + 87, 23}, 201 },
  { {CIMErrorCode_names + 110, 33}, 2000 },
  { {CIMErrorCode_names + 143, 34}, 2003 },
  { {CIMErrorCode_names + 177, 33}, 2002 },
  { {CIMErrorCode_names + 210, 30}, 2001 },
  { {CIMErrorCode_names + 240, 16}, 200 },
  { {CIMErrorCode_names + 256, 16}, 0 },
};

static const int CIMErrorCode_entries_by_number[] = {
  9, // 0 -> kCIM_ERR_UNKNOWN
  8, // 200 -> kCIM_ERR_SUCCSSE
  3, // 201 -> kCIM_ERR_INTERNAL_ERROR
  4, // 2000 -> kCIM_ERR_LOGIN_DB_VALIDATE_FAILED
  7, // 2001 -> kCIM_ERR_LOGIN_VERSION_TOO_OLD
  6, // 2002 -> kCIM_ERR_LOGIN_INVALID_USER_TOKEN
  5, // 2003 -> kCIM_ERR_LOGIN_INVALID_USER_OR_PWD
  0, // 9000 -> kCIM_ERROR_USER_ALREADY_EXIST
  1, // 9001 -> kCIM_ERROR_USER_INVALID_PARAMETER
  2, // 9002 -> kCIM_ERROR_USER_NOT_EXIST
};

const std::string& CIMErrorCode_Name(
    CIMErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMErrorCode_entries,
          CIMErrorCode_entries_by_number,
          10, CIMErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMErrorCode_entries,
      CIMErrorCode_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMErrorCode_strings[idx].get();
}
bool CIMErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMErrorCode_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<CIMErrorCode>(int_value);
  }
  return success;
}
bool CIMClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMClientType_strings[7] = {};

static const char CIMClientType_names[] =
  "kCIM_CLIENT_TYPE_ANDROID"
  "kCIM_CLIENT_TYPE_DEFAULT"
  "kCIM_CLIENT_TYPE_IOS"
  "kCIM_CLIENT_TYPE_MAC_OS"
  "kCIM_CLIENT_TYPE_PC_WINDOWS"
  "kCIM_CLIENT_TYPE_REST_API"
  "kCIM_CLIENT_TYPE_WEB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMClientType_entries[] = {
  { {CIMClientType_names + 0, 24}, 1 },
  { {CIMClientType_names + 24, 24}, 0 },
  { {CIMClientType_names + 48, 20}, 2 },
  { {CIMClientType_names + 68, 23}, 6 },
  { {CIMClientType_names + 91, 27}, 5 },
  { {CIMClientType_names + 118, 25}, 4 },
  { {CIMClientType_names + 143, 20}, 3 },
};

static const int CIMClientType_entries_by_number[] = {
  1, // 0 -> kCIM_CLIENT_TYPE_DEFAULT
  0, // 1 -> kCIM_CLIENT_TYPE_ANDROID
  2, // 2 -> kCIM_CLIENT_TYPE_IOS
  6, // 3 -> kCIM_CLIENT_TYPE_WEB
  5, // 4 -> kCIM_CLIENT_TYPE_REST_API
  4, // 5 -> kCIM_CLIENT_TYPE_PC_WINDOWS
  3, // 6 -> kCIM_CLIENT_TYPE_MAC_OS
};

const std::string& CIMClientType_Name(
    CIMClientType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMClientType_entries,
          CIMClientType_entries_by_number,
          7, CIMClientType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMClientType_entries,
      CIMClientType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMClientType_strings[idx].get();
}
bool CIMClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMClientType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMClientType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<CIMClientType>(int_value);
  }
  return success;
}
bool CIMSessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMSessionType_strings[3] = {};

static const char CIMSessionType_names[] =
  "kCIM_SESSION_TYPE_GROUP"
  "kCIM_SESSION_TYPE_Invalid"
  "kCIM_SESSION_TYPE_SINGLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMSessionType_entries[] = {
  { {CIMSessionType_names + 0, 23}, 2 },
  { {CIMSessionType_names + 23, 25}, 0 },
  { {CIMSessionType_names + 48, 24}, 1 },
};

static const int CIMSessionType_entries_by_number[] = {
  1, // 0 -> kCIM_SESSION_TYPE_Invalid
  2, // 1 -> kCIM_SESSION_TYPE_SINGLE
  0, // 2 -> kCIM_SESSION_TYPE_GROUP
};

const std::string& CIMSessionType_Name(
    CIMSessionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMSessionType_entries,
          CIMSessionType_entries_by_number,
          3, CIMSessionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMSessionType_entries,
      CIMSessionType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMSessionType_strings[idx].get();
}
bool CIMSessionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMSessionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMSessionType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMSessionType>(int_value);
  }
  return success;
}
bool CIMMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMMsgType_strings[11] = {};

static const char CIMMsgType_names[] =
  "kCIM_MSG_TYPE_AUDIO"
  "kCIM_MSG_TYPE_AVCHAT"
  "kCIM_MSG_TYPE_FILE"
  "kCIM_MSG_TYPE_IMAGE"
  "kCIM_MSG_TYPE_LOCATION"
  "kCIM_MSG_TYPE_NOTIFACATION"
  "kCIM_MSG_TYPE_ROBOT"
  "kCIM_MSG_TYPE_TEXT"
  "kCIM_MSG_TYPE_TIPS"
  "kCIM_MSG_TYPE_UNKNOWN"
  "kCIM_MSG_TYPE_VIDEO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMMsgType_entries[] = {
  { {CIMMsgType_names + 0, 19}, 4 },
  { {CIMMsgType_names + 19, 20}, 10 },
  { {CIMMsgType_names + 39, 18}, 2 },
  { {CIMMsgType_names + 57, 19}, 3 },
  { {CIMMsgType_names + 76, 22}, 6 },
  { {CIMMsgType_names + 98, 26}, 9 },
  { {CIMMsgType_names + 124, 19}, 7 },
  { {CIMMsgType_names + 143, 18}, 1 },
  { {CIMMsgType_names + 161, 18}, 8 },
  { {CIMMsgType_names + 179, 21}, 0 },
  { {CIMMsgType_names + 200, 19}, 5 },
};

static const int CIMMsgType_entries_by_number[] = {
  9, // 0 -> kCIM_MSG_TYPE_UNKNOWN
  7, // 1 -> kCIM_MSG_TYPE_TEXT
  2, // 2 -> kCIM_MSG_TYPE_FILE
  3, // 3 -> kCIM_MSG_TYPE_IMAGE
  0, // 4 -> kCIM_MSG_TYPE_AUDIO
  10, // 5 -> kCIM_MSG_TYPE_VIDEO
  4, // 6 -> kCIM_MSG_TYPE_LOCATION
  6, // 7 -> kCIM_MSG_TYPE_ROBOT
  8, // 8 -> kCIM_MSG_TYPE_TIPS
  5, // 9 -> kCIM_MSG_TYPE_NOTIFACATION
  1, // 10 -> kCIM_MSG_TYPE_AVCHAT
};

const std::string& CIMMsgType_Name(
    CIMMsgType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMMsgType_entries,
          CIMMsgType_entries_by_number,
          11, CIMMsgType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMMsgType_entries,
      CIMMsgType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMMsgType_strings[idx].get();
}
bool CIMMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMMsgType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMMsgType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<CIMMsgType>(int_value);
  }
  return success;
}
bool CIMMsgStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMMsgStatus_strings[11] = {};

static const char CIMMsgStatus_names[] =
  "kCIM_MSG_STATUS_DELETED"
  "kCIM_MSG_STATUS_DRAFT"
  "kCIM_MSG_STATUS_FAILED"
  "kCIM_MSG_STATUS_NONE"
  "kCIM_MSG_STATUS_READ"
  "kCIM_MSG_STATUS_RECEIPT"
  "kCIM_MSG_STATUS_REFUSED"
  "kCIM_MSG_STATUS_SENDING"
  "kCIM_MSG_STATUS_SENT"
  "kCIM_MSG_STATUS_SendCacel"
  "kCIM_MSG_STATUS_UNREAD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMMsgStatus_entries[] = {
  { {CIMMsgStatus_names + 0, 23}, 3 },
  { {CIMMsgStatus_names + 23, 21}, 7 },
  { {CIMMsgStatus_names + 44, 22}, 10 },
  { {CIMMsgStatus_names + 66, 20}, 0 },
  { {CIMMsgStatus_names + 86, 20}, 2 },
  { {CIMMsgStatus_names + 106, 23}, 6 },
  { {CIMMsgStatus_names + 129, 23}, 9 },
  { {CIMMsgStatus_names + 152, 23}, 4 },
  { {CIMMsgStatus_names + 175, 20}, 5 },
  { {CIMMsgStatus_names + 195, 25}, 8 },
  { {CIMMsgStatus_names + 220, 22}, 1 },
};

static const int CIMMsgStatus_entries_by_number[] = {
  3, // 0 -> kCIM_MSG_STATUS_NONE
  10, // 1 -> kCIM_MSG_STATUS_UNREAD
  4, // 2 -> kCIM_MSG_STATUS_READ
  0, // 3 -> kCIM_MSG_STATUS_DELETED
  7, // 4 -> kCIM_MSG_STATUS_SENDING
  8, // 5 -> kCIM_MSG_STATUS_SENT
  5, // 6 -> kCIM_MSG_STATUS_RECEIPT
  1, // 7 -> kCIM_MSG_STATUS_DRAFT
  9, // 8 -> kCIM_MSG_STATUS_SendCacel
  6, // 9 -> kCIM_MSG_STATUS_REFUSED
  2, // 10 -> kCIM_MSG_STATUS_FAILED
};

const std::string& CIMMsgStatus_Name(
    CIMMsgStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMMsgStatus_entries,
          CIMMsgStatus_entries_by_number,
          11, CIMMsgStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMMsgStatus_entries,
      CIMMsgStatus_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMMsgStatus_strings[idx].get();
}
bool CIMMsgStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMMsgStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMMsgStatus_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<CIMMsgStatus>(int_value);
  }
  return success;
}
bool CIMMsgNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMMsgNotificationType_strings[7] = {};

static const char CIMMsgNotificationType_names[] =
  "kCIM_MSG_NOTIFICATION_GROUP_BE_INVITE"
  "kCIM_MSG_NOTIFICATION_GROUP_CREATE"
  "kCIM_MSG_NOTIFICATION_GROUP_DISMISS"
  "kCIM_MSG_NOTIFICATION_GROUP_KICK"
  "kCIM_MSG_NOTIFICATION_GROUP_LEAVE"
  "kCIM_MSG_NOTIFICATION_GROUP_UPDATE"
  "kCIM_MSG_NOTIFICATION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMMsgNotificationType_entries[] = {
  { {CIMMsgNotificationType_names + 0, 37}, 2 },
  { {CIMMsgNotificationType_names + 37, 34}, 1 },
  { {CIMMsgNotificationType_names + 71, 35}, 6 },
  { {CIMMsgNotificationType_names + 106, 32}, 3 },
  { {CIMMsgNotificationType_names + 138, 33}, 4 },
  { {CIMMsgNotificationType_names + 171, 34}, 5 },
  { {CIMMsgNotificationType_names + 205, 29}, 0 },
};

static const int CIMMsgNotificationType_entries_by_number[] = {
  6, // 0 -> kCIM_MSG_NOTIFICATION_UNKNOWN
  1, // 1 -> kCIM_MSG_NOTIFICATION_GROUP_CREATE
  0, // 2 -> kCIM_MSG_NOTIFICATION_GROUP_BE_INVITE
  3, // 3 -> kCIM_MSG_NOTIFICATION_GROUP_KICK
  4, // 4 -> kCIM_MSG_NOTIFICATION_GROUP_LEAVE
  5, // 5 -> kCIM_MSG_NOTIFICATION_GROUP_UPDATE
  2, // 6 -> kCIM_MSG_NOTIFICATION_GROUP_DISMISS
};

const std::string& CIMMsgNotificationType_Name(
    CIMMsgNotificationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMMsgNotificationType_entries,
          CIMMsgNotificationType_entries_by_number,
          7, CIMMsgNotificationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMMsgNotificationType_entries,
      CIMMsgNotificationType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMMsgNotificationType_strings[idx].get();
}
bool CIMMsgNotificationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMMsgNotificationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMMsgNotificationType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<CIMMsgNotificationType>(int_value);
  }
  return success;
}
bool CIMSessionStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMSessionStatusType_strings[3] = {};

static const char CIMSessionStatusType_names[] =
  "kCIM_SESSION_STATUS_DELETE"
  "kCIM_SESSION_STATUS_OK"
  "kCIM_SESSION_STATUS_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMSessionStatusType_entries[] = {
  { {CIMSessionStatusType_names + 0, 26}, 2 },
  { {CIMSessionStatusType_names + 26, 22}, 1 },
  { {CIMSessionStatusType_names + 48, 27}, 0 },
};

static const int CIMSessionStatusType_entries_by_number[] = {
  2, // 0 -> kCIM_SESSION_STATUS_UNKNOWN
  1, // 1 -> kCIM_SESSION_STATUS_OK
  0, // 2 -> kCIM_SESSION_STATUS_DELETE
};

const std::string& CIMSessionStatusType_Name(
    CIMSessionStatusType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMSessionStatusType_entries,
          CIMSessionStatusType_entries_by_number,
          3, CIMSessionStatusType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMSessionStatusType_entries,
      CIMSessionStatusType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMSessionStatusType_strings[idx].get();
}
bool CIMSessionStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMSessionStatusType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMSessionStatusType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMSessionStatusType>(int_value);
  }
  return success;
}
bool CIMMsgFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMMsgFeature_strings[2] = {};

static const char CIMMsgFeature_names[] =
  "kCIM_MSG_FEATURE_DEFAULT"
  "kCIM_MSG_FEATURE_ROAM_MSG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMMsgFeature_entries[] = {
  { {CIMMsgFeature_names + 0, 24}, 0 },
  { {CIMMsgFeature_names + 24, 25}, 2 },
};

static const int CIMMsgFeature_entries_by_number[] = {
  0, // 0 -> kCIM_MSG_FEATURE_DEFAULT
  1, // 2 -> kCIM_MSG_FEATURE_ROAM_MSG
};

const std::string& CIMMsgFeature_Name(
    CIMMsgFeature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMMsgFeature_entries,
          CIMMsgFeature_entries_by_number,
          2, CIMMsgFeature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMMsgFeature_entries,
      CIMMsgFeature_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMMsgFeature_strings[idx].get();
}
bool CIMMsgFeature_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMMsgFeature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMMsgFeature_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CIMMsgFeature>(int_value);
  }
  return success;
}
bool CIMVoipInviteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMVoipInviteType_strings[3] = {};

static const char CIMVoipInviteType_names[] =
  "kCIM_VOIP_INVITE_TYPE_UNKNOWN"
  "kCIM_VOIP_INVITE_TYPE_VIDEO_CALL"
  "kCIM_VOIP_INVITE_TYPE_VOICE_CALL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMVoipInviteType_entries[] = {
  { {CIMVoipInviteType_names + 0, 29}, 0 },
  { {CIMVoipInviteType_names + 29, 32}, 2 },
  { {CIMVoipInviteType_names + 61, 32}, 1 },
};

static const int CIMVoipInviteType_entries_by_number[] = {
  0, // 0 -> kCIM_VOIP_INVITE_TYPE_UNKNOWN
  2, // 1 -> kCIM_VOIP_INVITE_TYPE_VOICE_CALL
  1, // 2 -> kCIM_VOIP_INVITE_TYPE_VIDEO_CALL
};

const std::string& CIMVoipInviteType_Name(
    CIMVoipInviteType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMVoipInviteType_entries,
          CIMVoipInviteType_entries_by_number,
          3, CIMVoipInviteType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMVoipInviteType_entries,
      CIMVoipInviteType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMVoipInviteType_strings[idx].get();
}
bool CIMVoipInviteType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMVoipInviteType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMVoipInviteType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMVoipInviteType>(int_value);
  }
  return success;
}
bool CIMInviteRspCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 180:
    case 200:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMInviteRspCode_strings[4] = {};

static const char CIMInviteRspCode_names[] =
  "KCIM_VOIP_INVITE_CODE_OK"
  "kCIM_VOIP_INVITE_CODE_RINGING"
  "kCIM_VOIP_INVITE_CODE_TRYING"
  "kCIM_VOIP_INVITE_CODE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMInviteRspCode_entries[] = {
  { {CIMInviteRspCode_names + 0, 24}, 200 },
  { {CIMInviteRspCode_names + 24, 29}, 180 },
  { {CIMInviteRspCode_names + 53, 28}, 100 },
  { {CIMInviteRspCode_names + 81, 29}, 0 },
};

static const int CIMInviteRspCode_entries_by_number[] = {
  3, // 0 -> kCIM_VOIP_INVITE_CODE_UNKNOWN
  2, // 100 -> kCIM_VOIP_INVITE_CODE_TRYING
  1, // 180 -> kCIM_VOIP_INVITE_CODE_RINGING
  0, // 200 -> KCIM_VOIP_INVITE_CODE_OK
};

const std::string& CIMInviteRspCode_Name(
    CIMInviteRspCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMInviteRspCode_entries,
          CIMInviteRspCode_entries_by_number,
          4, CIMInviteRspCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMInviteRspCode_entries,
      CIMInviteRspCode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMInviteRspCode_strings[idx].get();
}
bool CIMInviteRspCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMInviteRspCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMInviteRspCode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CIMInviteRspCode>(int_value);
  }
  return success;
}
bool CIMVoipByeReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMVoipByeReason_strings[6] = {};

static const char CIMVoipByeReason_names[] =
  "kCIM_VOIP_BYE_REASON_BUSY"
  "kCIM_VOIP_BYE_REASON_CANCEL"
  "kCIM_VOIP_BYE_REASON_END"
  "kCIM_VOIP_BYE_REASON_ONLINE_CLIENT_REJECT"
  "kCIM_VOIP_BYE_REASON_REJECT"
  "kCIM_VOIP_BYE_REASON_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMVoipByeReason_entries[] = {
  { {CIMVoipByeReason_names + 0, 25}, 4 },
  { {CIMVoipByeReason_names + 25, 27}, 1 },
  { {CIMVoipByeReason_names + 52, 24}, 3 },
  { {CIMVoipByeReason_names + 76, 41}, 5 },
  { {CIMVoipByeReason_names + 117, 27}, 2 },
  { {CIMVoipByeReason_names + 144, 28}, 0 },
};

static const int CIMVoipByeReason_entries_by_number[] = {
  5, // 0 -> kCIM_VOIP_BYE_REASON_UNKNOWN
  1, // 1 -> kCIM_VOIP_BYE_REASON_CANCEL
  4, // 2 -> kCIM_VOIP_BYE_REASON_REJECT
  2, // 3 -> kCIM_VOIP_BYE_REASON_END
  0, // 4 -> kCIM_VOIP_BYE_REASON_BUSY
  3, // 5 -> kCIM_VOIP_BYE_REASON_ONLINE_CLIENT_REJECT
};

const std::string& CIMVoipByeReason_Name(
    CIMVoipByeReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMVoipByeReason_entries,
          CIMVoipByeReason_entries_by_number,
          6, CIMVoipByeReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMVoipByeReason_entries,
      CIMVoipByeReason_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMVoipByeReason_strings[idx].get();
}
bool CIMVoipByeReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMVoipByeReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMVoipByeReason_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<CIMVoipByeReason>(int_value);
  }
  return success;
}
bool CIMResCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMResCode_strings[2] = {};

static const char CIMResCode_names[] =
  "kCIM_RES_CODE_OK"
  "kCIM_RES_CODE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMResCode_entries[] = {
  { {CIMResCode_names + 0, 16}, 1 },
  { {CIMResCode_names + 16, 21}, 0 },
};

static const int CIMResCode_entries_by_number[] = {
  1, // 0 -> kCIM_RES_CODE_UNKNOWN
  0, // 1 -> kCIM_RES_CODE_OK
};

const std::string& CIMResCode_Name(
    CIMResCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMResCode_entries,
          CIMResCode_entries_by_number,
          2, CIMResCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMResCode_entries,
      CIMResCode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMResCode_strings[idx].get();
}
bool CIMResCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMResCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMResCode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CIMResCode>(int_value);
  }
  return success;
}

// ===================================================================

class CIMUserInfo::_Internal {
 public:
};

CIMUserInfo::CIMUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Def.CIMUserInfo)
}
CIMUserInfo::CIMUserInfo(const CIMUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArena());
  }
  nick_name_spell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name_spell().empty()) {
    nick_name_spell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name_spell(), 
      GetArena());
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArena());
  }
  attach_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_info().empty()) {
    attach_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_info(), 
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Def.CIMUserInfo)
}

void CIMUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMUserInfo_CIM_2eDef_2eproto.base);
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_spell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = PROTOBUF_ULONGLONG(0);
}

CIMUserInfo::~CIMUserInfo() {
  // @@protoc_insertion_point(destructor:CIM.Def.CIMUserInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_spell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMUserInfo::ArenaDtor(void* object) {
  CIMUserInfo* _this = reinterpret_cast< CIMUserInfo* >(object);
  (void)_this;
}
void CIMUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMUserInfo& CIMUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMUserInfo_CIM_2eDef_2eproto.base);
  return *internal_default_instance();
}


void CIMUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Def.CIMUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  nick_name_spell_.ClearToEmpty();
  phone_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  attach_info_.ClearToEmpty();
  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* CIMUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name_spell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick_name_spell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attach_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_attach_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Def.CIMUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMUserInfo.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // string nick_name_spell = 3;
  if (this->nick_name_spell().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name_spell().data(), static_cast<int>(this->_internal_nick_name_spell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMUserInfo.nick_name_spell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick_name_spell(), target);
  }

  // string phone = 9;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMUserInfo.phone");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_phone(), target);
  }

  // string avatar_url = 10;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMUserInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_avatar_url(), target);
  }

  // string attach_info = 11;
  if (this->attach_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attach_info().data(), static_cast<int>(this->_internal_attach_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMUserInfo.attach_info");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_attach_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Def.CIMUserInfo)
  return target;
}

size_t CIMUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Def.CIMUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string nick_name_spell = 3;
  if (this->nick_name_spell().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name_spell());
  }

  // string phone = 9;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string avatar_url = 10;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string attach_info = 11;
  if (this->attach_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attach_info());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMUserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMUserInfo*>(
      &from));
}

void CIMUserInfo::MergeFrom(const CIMUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Def.CIMUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.nick_name_spell().size() > 0) {
    _internal_set_nick_name_spell(from._internal_nick_name_spell());
  }
  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.attach_info().size() > 0) {
    _internal_set_attach_info(from._internal_attach_info());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void CIMUserInfo::CopyFrom(const CIMUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Def.CIMUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMUserInfo::IsInitialized() const {
  return true;
}

void CIMUserInfo::InternalSwap(CIMUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_spell_.Swap(&other->nick_name_spell_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_info_.Swap(&other->attach_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

std::string CIMUserInfo::GetTypeName() const {
  return "CIM.Def.CIMUserInfo";
}


// ===================================================================

class CIMContactSessionInfo::_Internal {
 public:
};

CIMContactSessionInfo::CIMContactSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Def.CIMContactSessionInfo)
}
CIMContactSessionInfo::CIMContactSessionInfo(const CIMContactSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_id().empty()) {
    msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_id(), 
      GetArena());
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArena());
  }
  msg_attach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_attach().empty()) {
    msg_attach_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_attach(), 
      GetArena());
  }
  extend_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extend_data().empty()) {
    extend_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extend_data(), 
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_robot_session_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(is_robot_session_));
  // @@protoc_insertion_point(copy_constructor:CIM.Def.CIMContactSessionInfo)
}

void CIMContactSessionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMContactSessionInfo_CIM_2eDef_2eproto.base);
  msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_attach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extend_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_robot_session_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(is_robot_session_));
}

CIMContactSessionInfo::~CIMContactSessionInfo() {
  // @@protoc_insertion_point(destructor:CIM.Def.CIMContactSessionInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMContactSessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_attach_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extend_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMContactSessionInfo::ArenaDtor(void* object) {
  CIMContactSessionInfo* _this = reinterpret_cast< CIMContactSessionInfo* >(object);
  (void)_this;
}
void CIMContactSessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMContactSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMContactSessionInfo& CIMContactSessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMContactSessionInfo_CIM_2eDef_2eproto.base);
  return *internal_default_instance();
}


void CIMContactSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Def.CIMContactSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmpty();
  msg_data_.ClearToEmpty();
  msg_attach_.ClearToEmpty();
  extend_data_.ClearToEmpty();
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_robot_session_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(is_robot_session_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMContactSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionStatusType session_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_status(static_cast<::CIM::Def::CIMSessionStatusType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 unread_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          unread_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          updated_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_msg_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          server_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_time_stamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          msg_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgType msg_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::CIM::Def::CIMMsgType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 msg_from_user_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          msg_from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgStatus msg_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_status(static_cast<::CIM::Def::CIMMsgStatus>(val));
        } else goto handle_unusual;
        continue;
      // string msg_attach = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_msg_attach();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extend_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_extend_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_robot_session = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_robot_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMContactSessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Def.CIMContactSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // .CIM.Def.CIMSessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_session_status(), target);
  }

  // uint32 unread_cnt = 4;
  if (this->unread_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unread_cnt(), target);
  }

  // uint32 updated_time = 5;
  if (this->updated_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_updated_time(), target);
  }

  // string msg_id = 6;
  if (this->msg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMContactSessionInfo.msg_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg_id(), target);
  }

  // uint64 server_msg_id = 7;
  if (this->server_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_server_msg_id(), target);
  }

  // uint32 msg_time_stamp = 8;
  if (this->msg_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_msg_time_stamp(), target);
  }

  // bytes msg_data = 9;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_msg_data(), target);
  }

  // .CIM.Def.CIMMsgType msg_type = 10;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_msg_type(), target);
  }

  // uint64 msg_from_user_id = 11;
  if (this->msg_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_msg_from_user_id(), target);
  }

  // .CIM.Def.CIMMsgStatus msg_status = 12;
  if (this->msg_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_msg_status(), target);
  }

  // string msg_attach = 13;
  if (this->msg_attach().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_attach().data(), static_cast<int>(this->_internal_msg_attach().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMContactSessionInfo.msg_attach");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_msg_attach(), target);
  }

  // string extend_data = 14;
  if (this->extend_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extend_data().data(), static_cast<int>(this->_internal_extend_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMContactSessionInfo.extend_data");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_extend_data(), target);
  }

  // bool is_robot_session = 15;
  if (this->is_robot_session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_robot_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Def.CIMContactSessionInfo)
  return target;
}

size_t CIMContactSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Def.CIMContactSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_id = 6;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // bytes msg_data = 9;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // string msg_attach = 13;
  if (this->msg_attach().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_attach());
  }

  // string extend_data = 14;
  if (this->extend_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extend_data());
  }

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // .CIM.Def.CIMSessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_status());
  }

  // uint32 unread_cnt = 4;
  if (this->unread_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unread_cnt());
  }

  // uint32 updated_time = 5;
  if (this->updated_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_time());
  }

  // uint64 server_msg_id = 7;
  if (this->server_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_msg_id());
  }

  // uint32 msg_time_stamp = 8;
  if (this->msg_time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_time_stamp());
  }

  // .CIM.Def.CIMMsgType msg_type = 10;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // uint64 msg_from_user_id = 11;
  if (this->msg_from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_from_user_id());
  }

  // .CIM.Def.CIMMsgStatus msg_status = 12;
  if (this->msg_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_status());
  }

  // bool is_robot_session = 15;
  if (this->is_robot_session() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMContactSessionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMContactSessionInfo*>(
      &from));
}

void CIMContactSessionInfo::MergeFrom(const CIMContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Def.CIMContactSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.msg_data().size() > 0) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.msg_attach().size() > 0) {
    _internal_set_msg_attach(from._internal_msg_attach());
  }
  if (from.extend_data().size() > 0) {
    _internal_set_extend_data(from._internal_extend_data());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.session_status() != 0) {
    _internal_set_session_status(from._internal_session_status());
  }
  if (from.unread_cnt() != 0) {
    _internal_set_unread_cnt(from._internal_unread_cnt());
  }
  if (from.updated_time() != 0) {
    _internal_set_updated_time(from._internal_updated_time());
  }
  if (from.server_msg_id() != 0) {
    _internal_set_server_msg_id(from._internal_server_msg_id());
  }
  if (from.msg_time_stamp() != 0) {
    _internal_set_msg_time_stamp(from._internal_msg_time_stamp());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.msg_from_user_id() != 0) {
    _internal_set_msg_from_user_id(from._internal_msg_from_user_id());
  }
  if (from.msg_status() != 0) {
    _internal_set_msg_status(from._internal_msg_status());
  }
  if (from.is_robot_session() != 0) {
    _internal_set_is_robot_session(from._internal_is_robot_session());
  }
}

void CIMContactSessionInfo::CopyFrom(const CIMContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Def.CIMContactSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMContactSessionInfo::IsInitialized() const {
  return true;
}

void CIMContactSessionInfo::InternalSwap(CIMContactSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_id_.Swap(&other->msg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_attach_.Swap(&other->msg_attach_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extend_data_.Swap(&other->extend_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMContactSessionInfo, is_robot_session_)
      + sizeof(CIMContactSessionInfo::is_robot_session_)
      - PROTOBUF_FIELD_OFFSET(CIMContactSessionInfo, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

std::string CIMContactSessionInfo::GetTypeName() const {
  return "CIM.Def.CIMContactSessionInfo";
}


// ===================================================================

class CIMMsgInfo::_Internal {
 public:
};

CIMMsgInfo::CIMMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Def.CIMMsgInfo)
}
CIMMsgInfo::CIMMsgInfo(const CIMMsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_msg_id().empty()) {
    client_msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_msg_id(), 
      GetArena());
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArena());
  }
  attach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach().empty()) {
    attach_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach(), 
      GetArena());
  }
  ::memcpy(&server_msg_id_, &from.server_msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_client_type_) -
    reinterpret_cast<char*>(&server_msg_id_)) + sizeof(sender_client_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Def.CIMMsgInfo)
}

void CIMMsgInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMMsgInfo_CIM_2eDef_2eproto.base);
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_msg_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sender_client_type_) -
      reinterpret_cast<char*>(&server_msg_id_)) + sizeof(sender_client_type_));
}

CIMMsgInfo::~CIMMsgInfo() {
  // @@protoc_insertion_point(destructor:CIM.Def.CIMMsgInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMMsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMMsgInfo::ArenaDtor(void* object) {
  CIMMsgInfo* _this = reinterpret_cast< CIMMsgInfo* >(object);
  (void)_this;
}
void CIMMsgInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMMsgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMMsgInfo& CIMMsgInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMMsgInfo_CIM_2eDef_2eproto.base);
  return *internal_default_instance();
}


void CIMMsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Def.CIMMsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_msg_id_.ClearToEmpty();
  msg_data_.ClearToEmpty();
  attach_.ClearToEmpty();
  ::memset(&server_msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_client_type_) -
      reinterpret_cast<char*>(&server_msg_id_)) + sizeof(sender_client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMMsgInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMResCode msg_res_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_res_code(static_cast<::CIM::Def::CIMResCode>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgFeature msg_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_feature(static_cast<::CIM::Def::CIMMsgFeature>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 from_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_session_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          to_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgType msg_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::CIM::Def::CIMMsgType>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgStatus msg_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_status(static_cast<::CIM::Def::CIMMsgStatus>(val));
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attach = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_attach();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType sender_client_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sender_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMMsgInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Def.CIMMsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_msg_id = 1;
  if (this->client_msg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_msg_id().data(), static_cast<int>(this->_internal_client_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMMsgInfo.client_msg_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_msg_id(), target);
  }

  // uint64 server_msg_id = 2;
  if (this->server_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_msg_id(), target);
  }

  // .CIM.Def.CIMResCode msg_res_code = 3;
  if (this->msg_res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_msg_res_code(), target);
  }

  // .CIM.Def.CIMMsgFeature msg_feature = 4;
  if (this->msg_feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_msg_feature(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 5;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_session_type(), target);
  }

  // uint64 from_user_id = 6;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_from_user_id(), target);
  }

  // uint64 to_session_id = 7;
  if (this->to_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_to_session_id(), target);
  }

  // uint32 create_time = 8;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_create_time(), target);
  }

  // .CIM.Def.CIMMsgType msg_type = 9;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_msg_type(), target);
  }

  // .CIM.Def.CIMMsgStatus msg_status = 10;
  if (this->msg_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_msg_status(), target);
  }

  // bytes msg_data = 11;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_msg_data(), target);
  }

  // string attach = 12;
  if (this->attach().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attach().data(), static_cast<int>(this->_internal_attach().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMMsgInfo.attach");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_attach(), target);
  }

  // .CIM.Def.CIMClientType sender_client_type = 13;
  if (this->sender_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_sender_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Def.CIMMsgInfo)
  return target;
}

size_t CIMMsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Def.CIMMsgInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_msg_id = 1;
  if (this->client_msg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_msg_id());
  }

  // bytes msg_data = 11;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // string attach = 12;
  if (this->attach().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attach());
  }

  // uint64 server_msg_id = 2;
  if (this->server_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_msg_id());
  }

  // .CIM.Def.CIMResCode msg_res_code = 3;
  if (this->msg_res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_res_code());
  }

  // .CIM.Def.CIMMsgFeature msg_feature = 4;
  if (this->msg_feature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_feature());
  }

  // uint64 from_user_id = 6;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_user_id());
  }

  // .CIM.Def.CIMSessionType session_type = 5;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 create_time = 8;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  // uint64 to_session_id = 7;
  if (this->to_session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to_session_id());
  }

  // .CIM.Def.CIMMsgType msg_type = 9;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // .CIM.Def.CIMMsgStatus msg_status = 10;
  if (this->msg_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_status());
  }

  // .CIM.Def.CIMClientType sender_client_type = 13;
  if (this->sender_client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sender_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMMsgInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMMsgInfo*>(
      &from));
}

void CIMMsgInfo::MergeFrom(const CIMMsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Def.CIMMsgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_msg_id().size() > 0) {
    _internal_set_client_msg_id(from._internal_client_msg_id());
  }
  if (from.msg_data().size() > 0) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.attach().size() > 0) {
    _internal_set_attach(from._internal_attach());
  }
  if (from.server_msg_id() != 0) {
    _internal_set_server_msg_id(from._internal_server_msg_id());
  }
  if (from.msg_res_code() != 0) {
    _internal_set_msg_res_code(from._internal_msg_res_code());
  }
  if (from.msg_feature() != 0) {
    _internal_set_msg_feature(from._internal_msg_feature());
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.to_session_id() != 0) {
    _internal_set_to_session_id(from._internal_to_session_id());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.msg_status() != 0) {
    _internal_set_msg_status(from._internal_msg_status());
  }
  if (from.sender_client_type() != 0) {
    _internal_set_sender_client_type(from._internal_sender_client_type());
  }
}

void CIMMsgInfo::CopyFrom(const CIMMsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Def.CIMMsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMMsgInfo::IsInitialized() const {
  return true;
}

void CIMMsgInfo::InternalSwap(CIMMsgInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  client_msg_id_.Swap(&other->client_msg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_.Swap(&other->attach_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMMsgInfo, sender_client_type_)
      + sizeof(CIMMsgInfo::sender_client_type_)
      - PROTOBUF_FIELD_OFFSET(CIMMsgInfo, server_msg_id_)>(
          reinterpret_cast<char*>(&server_msg_id_),
          reinterpret_cast<char*>(&other->server_msg_id_));
}

std::string CIMMsgInfo::GetTypeName() const {
  return "CIM.Def.CIMMsgInfo";
}


// ===================================================================

class CIMChannelInfo::_Internal {
 public:
};

CIMChannelInfo::CIMChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Def.CIMChannelInfo)
}
CIMChannelInfo::CIMChannelInfo(const CIMChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_name().empty()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  channel_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_token().empty()) {
    channel_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_token(), 
      GetArena());
  }
  creator_id_ = from.creator_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Def.CIMChannelInfo)
}

void CIMChannelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_id_ = PROTOBUF_ULONGLONG(0);
}

CIMChannelInfo::~CIMChannelInfo() {
  // @@protoc_insertion_point(destructor:CIM.Def.CIMChannelInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMChannelInfo::ArenaDtor(void* object) {
  CIMChannelInfo* _this = reinterpret_cast< CIMChannelInfo* >(object);
  (void)_this;
}
void CIMChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMChannelInfo& CIMChannelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMChannelInfo_CIM_2eDef_2eproto.base);
  return *internal_default_instance();
}


void CIMChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Def.CIMChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmpty();
  channel_token_.ClearToEmpty();
  creator_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* CIMChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 creator_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          creator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMChannelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Def.CIMChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMChannelInfo.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // string channel_token = 2;
  if (this->channel_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_token().data(), static_cast<int>(this->_internal_channel_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Def.CIMChannelInfo.channel_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_token(), target);
  }

  // uint64 creator_id = 3;
  if (this->creator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_creator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Def.CIMChannelInfo)
  return target;
}

size_t CIMChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Def.CIMChannelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // string channel_token = 2;
  if (this->channel_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_token());
  }

  // uint64 creator_id = 3;
  if (this->creator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_creator_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMChannelInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMChannelInfo*>(
      &from));
}

void CIMChannelInfo::MergeFrom(const CIMChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Def.CIMChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {
    _internal_set_channel_name(from._internal_channel_name());
  }
  if (from.channel_token().size() > 0) {
    _internal_set_channel_token(from._internal_channel_token());
  }
  if (from.creator_id() != 0) {
    _internal_set_creator_id(from._internal_creator_id());
  }
}

void CIMChannelInfo::CopyFrom(const CIMChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Def.CIMChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMChannelInfo::IsInitialized() const {
  return true;
}

void CIMChannelInfo::InternalSwap(CIMChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_token_.Swap(&other->channel_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(creator_id_, other->creator_id_);
}

std::string CIMChannelInfo::GetTypeName() const {
  return "CIM.Def.CIMChannelInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Def
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Def::CIMUserInfo* Arena::CreateMaybeMessage< ::CIM::Def::CIMUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Def::CIMUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Def::CIMContactSessionInfo* Arena::CreateMaybeMessage< ::CIM::Def::CIMContactSessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Def::CIMContactSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Def::CIMMsgInfo* Arena::CreateMaybeMessage< ::CIM::Def::CIMMsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Def::CIMMsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Def::CIMChannelInfo* Arena::CreateMaybeMessage< ::CIM::Def::CIMChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Def::CIMChannelInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
