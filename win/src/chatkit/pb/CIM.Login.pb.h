// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CIM_2eLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CIM_2eLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "CIM.Def.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CIM_2eLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CIM_2eLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace CIM {
namespace Login {
class CIMAuthTokenReq;
class CIMAuthTokenReqDefaultTypeInternal;
extern CIMAuthTokenReqDefaultTypeInternal _CIMAuthTokenReq_default_instance_;
class CIMAuthTokenRsp;
class CIMAuthTokenRspDefaultTypeInternal;
extern CIMAuthTokenRspDefaultTypeInternal _CIMAuthTokenRsp_default_instance_;
class CIMHeartBeat;
class CIMHeartBeatDefaultTypeInternal;
extern CIMHeartBeatDefaultTypeInternal _CIMHeartBeat_default_instance_;
class CIMLogoutReq;
class CIMLogoutReqDefaultTypeInternal;
extern CIMLogoutReqDefaultTypeInternal _CIMLogoutReq_default_instance_;
class CIMLogoutRsp;
class CIMLogoutRspDefaultTypeInternal;
extern CIMLogoutRspDefaultTypeInternal _CIMLogoutRsp_default_instance_;
}  // namespace Login
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> ::CIM::Login::CIMAuthTokenReq* Arena::CreateMaybeMessage<::CIM::Login::CIMAuthTokenReq>(Arena*);
template<> ::CIM::Login::CIMAuthTokenRsp* Arena::CreateMaybeMessage<::CIM::Login::CIMAuthTokenRsp>(Arena*);
template<> ::CIM::Login::CIMHeartBeat* Arena::CreateMaybeMessage<::CIM::Login::CIMHeartBeat>(Arena*);
template<> ::CIM::Login::CIMLogoutReq* Arena::CreateMaybeMessage<::CIM::Login::CIMLogoutReq>(Arena*);
template<> ::CIM::Login::CIMLogoutRsp* Arena::CreateMaybeMessage<::CIM::Login::CIMLogoutRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CIM {
namespace Login {

// ===================================================================

class CIMAuthTokenReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Login.CIMAuthTokenReq) */ {
 public:
  inline CIMAuthTokenReq() : CIMAuthTokenReq(nullptr) {}
  virtual ~CIMAuthTokenReq();

  CIMAuthTokenReq(const CIMAuthTokenReq& from);
  CIMAuthTokenReq(CIMAuthTokenReq&& from) noexcept
    : CIMAuthTokenReq() {
    *this = ::std::move(from);
  }

  inline CIMAuthTokenReq& operator=(const CIMAuthTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMAuthTokenReq& operator=(CIMAuthTokenReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMAuthTokenReq& default_instance();

  static inline const CIMAuthTokenReq* internal_default_instance() {
    return reinterpret_cast<const CIMAuthTokenReq*>(
               &_CIMAuthTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CIMAuthTokenReq& a, CIMAuthTokenReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMAuthTokenReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMAuthTokenReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMAuthTokenReq* New() const final {
    return CreateMaybeMessage<CIMAuthTokenReq>(nullptr);
  }

  CIMAuthTokenReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMAuthTokenReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMAuthTokenReq& from);
  void MergeFrom(const CIMAuthTokenReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMAuthTokenReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Login.CIMAuthTokenReq";
  }
  protected:
  explicit CIMAuthTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kUserTokenFieldNumber = 3,
    kClientVersionFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kClientTypeFieldNumber = 4,
  };
  // string nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string user_token = 3;
  void clear_user_token();
  const std::string& user_token() const;
  void set_user_token(const std::string& value);
  void set_user_token(std::string&& value);
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  std::string* mutable_user_token();
  std::string* release_user_token();
  void set_allocated_user_token(std::string* user_token);
  private:
  const std::string& _internal_user_token() const;
  void _internal_set_user_token(const std::string& value);
  std::string* _internal_mutable_user_token();
  public:

  // string client_version = 5;
  void clear_client_version();
  const std::string& client_version() const;
  void set_client_version(const std::string& value);
  void set_client_version(std::string&& value);
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  std::string* mutable_client_version();
  std::string* release_client_version();
  void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMClientType client_type = 4;
  void clear_client_type();
  ::CIM::Def::CIMClientType client_type() const;
  void set_client_type(::CIM::Def::CIMClientType value);
  private:
  ::CIM::Def::CIMClientType _internal_client_type() const;
  void _internal_set_client_type(::CIM::Def::CIMClientType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Login.CIMAuthTokenReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class CIMAuthTokenRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Login.CIMAuthTokenRsp) */ {
 public:
  inline CIMAuthTokenRsp() : CIMAuthTokenRsp(nullptr) {}
  virtual ~CIMAuthTokenRsp();

  CIMAuthTokenRsp(const CIMAuthTokenRsp& from);
  CIMAuthTokenRsp(CIMAuthTokenRsp&& from) noexcept
    : CIMAuthTokenRsp() {
    *this = ::std::move(from);
  }

  inline CIMAuthTokenRsp& operator=(const CIMAuthTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMAuthTokenRsp& operator=(CIMAuthTokenRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMAuthTokenRsp& default_instance();

  static inline const CIMAuthTokenRsp* internal_default_instance() {
    return reinterpret_cast<const CIMAuthTokenRsp*>(
               &_CIMAuthTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CIMAuthTokenRsp& a, CIMAuthTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMAuthTokenRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMAuthTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMAuthTokenRsp* New() const final {
    return CreateMaybeMessage<CIMAuthTokenRsp>(nullptr);
  }

  CIMAuthTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMAuthTokenRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMAuthTokenRsp& from);
  void MergeFrom(const CIMAuthTokenRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMAuthTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Login.CIMAuthTokenRsp";
  }
  protected:
  explicit CIMAuthTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultStringFieldNumber = 3,
    kUserInfoFieldNumber = 4,
    kServerTimeFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // string result_string = 3;
  void clear_result_string();
  const std::string& result_string() const;
  void set_result_string(const std::string& value);
  void set_result_string(std::string&& value);
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  std::string* mutable_result_string();
  std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // .CIM.Def.CIMUserInfo user_info = 4;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::CIM::Def::CIMUserInfo& user_info() const;
  ::CIM::Def::CIMUserInfo* release_user_info();
  ::CIM::Def::CIMUserInfo* mutable_user_info();
  void set_allocated_user_info(::CIM::Def::CIMUserInfo* user_info);
  private:
  const ::CIM::Def::CIMUserInfo& _internal_user_info() const;
  ::CIM::Def::CIMUserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::CIM::Def::CIMUserInfo* user_info);
  ::CIM::Def::CIMUserInfo* unsafe_arena_release_user_info();

  // uint32 server_time = 1;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .CIM.Def.CIMErrorCode result_code = 2;
  void clear_result_code();
  ::CIM::Def::CIMErrorCode result_code() const;
  void set_result_code(::CIM::Def::CIMErrorCode value);
  private:
  ::CIM::Def::CIMErrorCode _internal_result_code() const;
  void _internal_set_result_code(::CIM::Def::CIMErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Login.CIMAuthTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::CIM::Def::CIMUserInfo* user_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_time_;
  int result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class CIMLogoutReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Login.CIMLogoutReq) */ {
 public:
  inline CIMLogoutReq() : CIMLogoutReq(nullptr) {}
  virtual ~CIMLogoutReq();

  CIMLogoutReq(const CIMLogoutReq& from);
  CIMLogoutReq(CIMLogoutReq&& from) noexcept
    : CIMLogoutReq() {
    *this = ::std::move(from);
  }

  inline CIMLogoutReq& operator=(const CIMLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMLogoutReq& operator=(CIMLogoutReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMLogoutReq& default_instance();

  static inline const CIMLogoutReq* internal_default_instance() {
    return reinterpret_cast<const CIMLogoutReq*>(
               &_CIMLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CIMLogoutReq& a, CIMLogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMLogoutReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMLogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMLogoutReq* New() const final {
    return CreateMaybeMessage<CIMLogoutReq>(nullptr);
  }

  CIMLogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMLogoutReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMLogoutReq& from);
  void MergeFrom(const CIMLogoutReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMLogoutReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Login.CIMLogoutReq";
  }
  protected:
  explicit CIMLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kClientTypeFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CIM.Def.CIMClientType client_type = 2;
  void clear_client_type();
  ::CIM::Def::CIMClientType client_type() const;
  void set_client_type(::CIM::Def::CIMClientType value);
  private:
  ::CIM::Def::CIMClientType _internal_client_type() const;
  void _internal_set_client_type(::CIM::Def::CIMClientType value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Login.CIMLogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class CIMLogoutRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Login.CIMLogoutRsp) */ {
 public:
  inline CIMLogoutRsp() : CIMLogoutRsp(nullptr) {}
  virtual ~CIMLogoutRsp();

  CIMLogoutRsp(const CIMLogoutRsp& from);
  CIMLogoutRsp(CIMLogoutRsp&& from) noexcept
    : CIMLogoutRsp() {
    *this = ::std::move(from);
  }

  inline CIMLogoutRsp& operator=(const CIMLogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMLogoutRsp& operator=(CIMLogoutRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMLogoutRsp& default_instance();

  static inline const CIMLogoutRsp* internal_default_instance() {
    return reinterpret_cast<const CIMLogoutRsp*>(
               &_CIMLogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CIMLogoutRsp& a, CIMLogoutRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMLogoutRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMLogoutRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMLogoutRsp* New() const final {
    return CreateMaybeMessage<CIMLogoutRsp>(nullptr);
  }

  CIMLogoutRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMLogoutRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMLogoutRsp& from);
  void MergeFrom(const CIMLogoutRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMLogoutRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Login.CIMLogoutRsp";
  }
  protected:
  explicit CIMLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
  };
  // uint32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CIM.Login.CIMLogoutRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eLogin_2eproto;
};
// -------------------------------------------------------------------

class CIMHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:CIM.Login.CIMHeartBeat) */ {
 public:
  inline CIMHeartBeat() : CIMHeartBeat(nullptr) {}
  virtual ~CIMHeartBeat();

  CIMHeartBeat(const CIMHeartBeat& from);
  CIMHeartBeat(CIMHeartBeat&& from) noexcept
    : CIMHeartBeat() {
    *this = ::std::move(from);
  }

  inline CIMHeartBeat& operator=(const CIMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIMHeartBeat& operator=(CIMHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CIMHeartBeat& default_instance();

  static inline const CIMHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CIMHeartBeat*>(
               &_CIMHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CIMHeartBeat& a, CIMHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CIMHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIMHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIMHeartBeat* New() const final {
    return CreateMaybeMessage<CIMHeartBeat>(nullptr);
  }

  CIMHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIMHeartBeat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CIMHeartBeat& from);
  void MergeFrom(const CIMHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CIMHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CIM.Login.CIMHeartBeat";
  }
  protected:
  explicit CIMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CIM.Login.CIMHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CIM_2eLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CIMAuthTokenReq

// uint64 user_id = 1;
inline void CIMAuthTokenReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMAuthTokenReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMAuthTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenReq.user_id)
  return _internal_user_id();
}
inline void CIMAuthTokenReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMAuthTokenReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenReq.user_id)
}

// string nick_name = 2;
inline void CIMAuthTokenReq::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& CIMAuthTokenReq::nick_name() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenReq.nick_name)
  return _internal_nick_name();
}
inline void CIMAuthTokenReq::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenReq.nick_name)
}
inline std::string* CIMAuthTokenReq::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:CIM.Login.CIMAuthTokenReq.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& CIMAuthTokenReq::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void CIMAuthTokenReq::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CIMAuthTokenReq::set_nick_name(std::string&& value) {
  
  nick_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Login.CIMAuthTokenReq.nick_name)
}
inline void CIMAuthTokenReq::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Login.CIMAuthTokenReq.nick_name)
}
inline void CIMAuthTokenReq::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Login.CIMAuthTokenReq.nick_name)
}
inline std::string* CIMAuthTokenReq::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CIMAuthTokenReq::release_nick_name() {
  // @@protoc_insertion_point(field_release:CIM.Login.CIMAuthTokenReq.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMAuthTokenReq::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Login.CIMAuthTokenReq.nick_name)
}

// string user_token = 3;
inline void CIMAuthTokenReq::clear_user_token() {
  user_token_.ClearToEmpty();
}
inline const std::string& CIMAuthTokenReq::user_token() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenReq.user_token)
  return _internal_user_token();
}
inline void CIMAuthTokenReq::set_user_token(const std::string& value) {
  _internal_set_user_token(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenReq.user_token)
}
inline std::string* CIMAuthTokenReq::mutable_user_token() {
  // @@protoc_insertion_point(field_mutable:CIM.Login.CIMAuthTokenReq.user_token)
  return _internal_mutable_user_token();
}
inline const std::string& CIMAuthTokenReq::_internal_user_token() const {
  return user_token_.Get();
}
inline void CIMAuthTokenReq::_internal_set_user_token(const std::string& value) {
  
  user_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CIMAuthTokenReq::set_user_token(std::string&& value) {
  
  user_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Login.CIMAuthTokenReq.user_token)
}
inline void CIMAuthTokenReq::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Login.CIMAuthTokenReq.user_token)
}
inline void CIMAuthTokenReq::set_user_token(const char* value,
    size_t size) {
  
  user_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Login.CIMAuthTokenReq.user_token)
}
inline std::string* CIMAuthTokenReq::_internal_mutable_user_token() {
  
  return user_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CIMAuthTokenReq::release_user_token() {
  // @@protoc_insertion_point(field_release:CIM.Login.CIMAuthTokenReq.user_token)
  return user_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMAuthTokenReq::set_allocated_user_token(std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Login.CIMAuthTokenReq.user_token)
}

// .CIM.Def.CIMClientType client_type = 4;
inline void CIMAuthTokenReq::clear_client_type() {
  client_type_ = 0;
}
inline ::CIM::Def::CIMClientType CIMAuthTokenReq::_internal_client_type() const {
  return static_cast< ::CIM::Def::CIMClientType >(client_type_);
}
inline ::CIM::Def::CIMClientType CIMAuthTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenReq.client_type)
  return _internal_client_type();
}
inline void CIMAuthTokenReq::_internal_set_client_type(::CIM::Def::CIMClientType value) {
  
  client_type_ = value;
}
inline void CIMAuthTokenReq::set_client_type(::CIM::Def::CIMClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenReq.client_type)
}

// string client_version = 5;
inline void CIMAuthTokenReq::clear_client_version() {
  client_version_.ClearToEmpty();
}
inline const std::string& CIMAuthTokenReq::client_version() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenReq.client_version)
  return _internal_client_version();
}
inline void CIMAuthTokenReq::set_client_version(const std::string& value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenReq.client_version)
}
inline std::string* CIMAuthTokenReq::mutable_client_version() {
  // @@protoc_insertion_point(field_mutable:CIM.Login.CIMAuthTokenReq.client_version)
  return _internal_mutable_client_version();
}
inline const std::string& CIMAuthTokenReq::_internal_client_version() const {
  return client_version_.Get();
}
inline void CIMAuthTokenReq::_internal_set_client_version(const std::string& value) {
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CIMAuthTokenReq::set_client_version(std::string&& value) {
  
  client_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Login.CIMAuthTokenReq.client_version)
}
inline void CIMAuthTokenReq::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Login.CIMAuthTokenReq.client_version)
}
inline void CIMAuthTokenReq::set_client_version(const char* value,
    size_t size) {
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Login.CIMAuthTokenReq.client_version)
}
inline std::string* CIMAuthTokenReq::_internal_mutable_client_version() {
  
  return client_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CIMAuthTokenReq::release_client_version() {
  // @@protoc_insertion_point(field_release:CIM.Login.CIMAuthTokenReq.client_version)
  return client_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMAuthTokenReq::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    
  } else {
    
  }
  client_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Login.CIMAuthTokenReq.client_version)
}

// -------------------------------------------------------------------

// CIMAuthTokenRsp

// uint32 server_time = 1;
inline void CIMAuthTokenRsp::clear_server_time() {
  server_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CIMAuthTokenRsp::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CIMAuthTokenRsp::server_time() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenRsp.server_time)
  return _internal_server_time();
}
inline void CIMAuthTokenRsp::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_time_ = value;
}
inline void CIMAuthTokenRsp::set_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenRsp.server_time)
}

// .CIM.Def.CIMErrorCode result_code = 2;
inline void CIMAuthTokenRsp::clear_result_code() {
  result_code_ = 0;
}
inline ::CIM::Def::CIMErrorCode CIMAuthTokenRsp::_internal_result_code() const {
  return static_cast< ::CIM::Def::CIMErrorCode >(result_code_);
}
inline ::CIM::Def::CIMErrorCode CIMAuthTokenRsp::result_code() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenRsp.result_code)
  return _internal_result_code();
}
inline void CIMAuthTokenRsp::_internal_set_result_code(::CIM::Def::CIMErrorCode value) {
  
  result_code_ = value;
}
inline void CIMAuthTokenRsp::set_result_code(::CIM::Def::CIMErrorCode value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenRsp.result_code)
}

// string result_string = 3;
inline void CIMAuthTokenRsp::clear_result_string() {
  result_string_.ClearToEmpty();
}
inline const std::string& CIMAuthTokenRsp::result_string() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenRsp.result_string)
  return _internal_result_string();
}
inline void CIMAuthTokenRsp::set_result_string(const std::string& value) {
  _internal_set_result_string(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMAuthTokenRsp.result_string)
}
inline std::string* CIMAuthTokenRsp::mutable_result_string() {
  // @@protoc_insertion_point(field_mutable:CIM.Login.CIMAuthTokenRsp.result_string)
  return _internal_mutable_result_string();
}
inline const std::string& CIMAuthTokenRsp::_internal_result_string() const {
  return result_string_.Get();
}
inline void CIMAuthTokenRsp::_internal_set_result_string(const std::string& value) {
  
  result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CIMAuthTokenRsp::set_result_string(std::string&& value) {
  
  result_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CIM.Login.CIMAuthTokenRsp.result_string)
}
inline void CIMAuthTokenRsp::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CIM.Login.CIMAuthTokenRsp.result_string)
}
inline void CIMAuthTokenRsp::set_result_string(const char* value,
    size_t size) {
  
  result_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CIM.Login.CIMAuthTokenRsp.result_string)
}
inline std::string* CIMAuthTokenRsp::_internal_mutable_result_string() {
  
  return result_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CIMAuthTokenRsp::release_result_string() {
  // @@protoc_insertion_point(field_release:CIM.Login.CIMAuthTokenRsp.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CIMAuthTokenRsp::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CIM.Login.CIMAuthTokenRsp.result_string)
}

// .CIM.Def.CIMUserInfo user_info = 4;
inline bool CIMAuthTokenRsp::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool CIMAuthTokenRsp::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::CIM::Def::CIMUserInfo& CIMAuthTokenRsp::_internal_user_info() const {
  const ::CIM::Def::CIMUserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CIM::Def::CIMUserInfo&>(
      ::CIM::Def::_CIMUserInfo_default_instance_);
}
inline const ::CIM::Def::CIMUserInfo& CIMAuthTokenRsp::user_info() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMAuthTokenRsp.user_info)
  return _internal_user_info();
}
inline void CIMAuthTokenRsp::unsafe_arena_set_allocated_user_info(
    ::CIM::Def::CIMUserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CIM.Login.CIMAuthTokenRsp.user_info)
}
inline ::CIM::Def::CIMUserInfo* CIMAuthTokenRsp::release_user_info() {
  
  ::CIM::Def::CIMUserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CIM::Def::CIMUserInfo* CIMAuthTokenRsp::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:CIM.Login.CIMAuthTokenRsp.user_info)
  
  ::CIM::Def::CIMUserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::CIM::Def::CIMUserInfo* CIMAuthTokenRsp::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CIM::Def::CIMUserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::CIM::Def::CIMUserInfo* CIMAuthTokenRsp::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:CIM.Login.CIMAuthTokenRsp.user_info)
  return _internal_mutable_user_info();
}
inline void CIMAuthTokenRsp::set_allocated_user_info(::CIM::Def::CIMUserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:CIM.Login.CIMAuthTokenRsp.user_info)
}

// -------------------------------------------------------------------

// CIMLogoutReq

// uint64 user_id = 1;
inline void CIMLogoutReq::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMLogoutReq::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIMLogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMLogoutReq.user_id)
  return _internal_user_id();
}
inline void CIMLogoutReq::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CIMLogoutReq::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMLogoutReq.user_id)
}

// .CIM.Def.CIMClientType client_type = 2;
inline void CIMLogoutReq::clear_client_type() {
  client_type_ = 0;
}
inline ::CIM::Def::CIMClientType CIMLogoutReq::_internal_client_type() const {
  return static_cast< ::CIM::Def::CIMClientType >(client_type_);
}
inline ::CIM::Def::CIMClientType CIMLogoutReq::client_type() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMLogoutReq.client_type)
  return _internal_client_type();
}
inline void CIMLogoutReq::_internal_set_client_type(::CIM::Def::CIMClientType value) {
  
  client_type_ = value;
}
inline void CIMLogoutReq::set_client_type(::CIM::Def::CIMClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMLogoutReq.client_type)
}

// -------------------------------------------------------------------

// CIMLogoutRsp

// uint32 result_code = 1;
inline void CIMLogoutRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CIMLogoutRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CIMLogoutRsp::result_code() const {
  // @@protoc_insertion_point(field_get:CIM.Login.CIMLogoutRsp.result_code)
  return _internal_result_code();
}
inline void CIMLogoutRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void CIMLogoutRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:CIM.Login.CIMLogoutRsp.result_code)
}

// -------------------------------------------------------------------

// CIMHeartBeat

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace CIM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CIM_2eLogin_2eproto
