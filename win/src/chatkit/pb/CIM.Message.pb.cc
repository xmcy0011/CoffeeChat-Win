// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Message.proto

#include "CIM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CIM_2eDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgInfo_CIM_2eDef_2eproto;
namespace CIM {
namespace Message {
class CIMMsgDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMMsgData> _instance;
} _CIMMsgData_default_instance_;
class CIMMsgDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMMsgDataAck> _instance;
} _CIMMsgDataAck_default_instance_;
class CIMMsgDataReadAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMMsgDataReadAck> _instance;
} _CIMMsgDataReadAck_default_instance_;
class CIMMsgDataReadNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMMsgDataReadNotify> _instance;
} _CIMMsgDataReadNotify_default_instance_;
class CIMGetLatestMsgIdReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetLatestMsgIdReq> _instance;
} _CIMGetLatestMsgIdReq_default_instance_;
class CIMGetLatestMsgIdRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetLatestMsgIdRsp> _instance;
} _CIMGetLatestMsgIdRsp_default_instance_;
class CIMGetMsgByIdReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetMsgByIdReq> _instance;
} _CIMGetMsgByIdReq_default_instance_;
class CIMGetMsgByIdRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIMGetMsgByIdRsp> _instance;
} _CIMGetMsgByIdRsp_default_instance_;
}  // namespace Message
}  // namespace CIM
static void InitDefaultsscc_info_CIMGetLatestMsgIdReq_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMGetLatestMsgIdReq_default_instance_;
    new (ptr) ::CIM::Message::CIMGetLatestMsgIdReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMGetLatestMsgIdReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMGetLatestMsgIdReq_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMGetLatestMsgIdReq_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMGetLatestMsgIdRsp_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMGetLatestMsgIdRsp_default_instance_;
    new (ptr) ::CIM::Message::CIMGetLatestMsgIdRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMGetLatestMsgIdRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMGetLatestMsgIdRsp_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMGetLatestMsgIdRsp_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMGetMsgByIdReq_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMGetMsgByIdReq_default_instance_;
    new (ptr) ::CIM::Message::CIMGetMsgByIdReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMGetMsgByIdReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMGetMsgByIdReq_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMGetMsgByIdReq_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMGetMsgByIdRsp_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMGetMsgByIdRsp_default_instance_;
    new (ptr) ::CIM::Message::CIMGetMsgByIdRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMGetMsgByIdRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CIMGetMsgByIdRsp_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CIMGetMsgByIdRsp_CIM_2eMessage_2eproto}, {
      &scc_info_CIMMsgInfo_CIM_2eDef_2eproto.base,}};

static void InitDefaultsscc_info_CIMMsgData_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMMsgData_default_instance_;
    new (ptr) ::CIM::Message::CIMMsgData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMMsgData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgData_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMMsgData_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMMsgDataAck_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMMsgDataAck_default_instance_;
    new (ptr) ::CIM::Message::CIMMsgDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMMsgDataAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgDataAck_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMMsgDataAck_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMMsgDataReadAck_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMMsgDataReadAck_default_instance_;
    new (ptr) ::CIM::Message::CIMMsgDataReadAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMMsgDataReadAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgDataReadAck_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMMsgDataReadAck_CIM_2eMessage_2eproto}, {}};

static void InitDefaultsscc_info_CIMMsgDataReadNotify_CIM_2eMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CIM::Message::_CIMMsgDataReadNotify_default_instance_;
    new (ptr) ::CIM::Message::CIMMsgDataReadNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CIM::Message::CIMMsgDataReadNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIMMsgDataReadNotify_CIM_2eMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIMMsgDataReadNotify_CIM_2eMessage_2eproto}, {}};

namespace CIM {
namespace Message {

// ===================================================================

void CIMMsgData::InitAsDefaultInstance() {
}
class CIMMsgData::_Internal {
 public:
};

CIMMsgData::CIMMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMMsgData)
}
CIMMsgData::CIMMsgData(const CIMMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  from_nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_nick_name().empty()) {
    from_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_nick_name(),
      GetArena());
  }
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_msg_id().empty()) {
    client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_msg_id(),
      GetArena());
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_data(),
      GetArena());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMMsgData)
}

void CIMMsgData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMMsgData_CIM_2eMessage_2eproto.base);
  from_nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(session_type_));
}

CIMMsgData::~CIMMsgData() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMMsgData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMMsgData::ArenaDtor(void* object) {
  CIMMsgData* _this = reinterpret_cast< CIMMsgData* >(object);
  (void)_this;
}
void CIMMsgData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMMsgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMMsgData& CIMMsgData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMMsgData_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMMsgData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          to_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_client_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_msg_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 create_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMMsgType msg_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::CIM::Def::CIMMsgType>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMMsgData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_user_id(), target);
  }

  // string from_nick_name = 2;
  if (this->from_nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_nick_name().data(), static_cast<int>(this->_internal_from_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Message.CIMMsgData.from_nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_nick_name(), target);
  }

  // uint64 to_session_id = 3;
  if (this->to_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_to_session_id(), target);
  }

  // string client_msg_id = 4;
  if (this->client_msg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_msg_id().data(), static_cast<int>(this->_internal_client_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Message.CIMMsgData.client_msg_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_msg_id(), target);
  }

  // uint64 server_msg_id = 5;
  if (this->server_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_msg_id(), target);
  }

  // int32 create_time = 6;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_create_time(), target);
  }

  // .CIM.Def.CIMMsgType msg_type = 7;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_msg_type(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 8;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_session_type(), target);
  }

  // bytes msg_data = 9;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_msg_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMMsgData)
  return target;
}

size_t CIMMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMMsgData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_nick_name = 2;
  if (this->from_nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_nick_name());
  }

  // string client_msg_id = 4;
  if (this->client_msg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_msg_id());
  }

  // bytes msg_data = 9;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // uint64 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_user_id());
  }

  // uint64 to_session_id = 3;
  if (this->to_session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to_session_id());
  }

  // uint64 server_msg_id = 5;
  if (this->server_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_msg_id());
  }

  // int32 create_time = 6;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_create_time());
  }

  // .CIM.Def.CIMMsgType msg_type = 7;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // .CIM.Def.CIMSessionType session_type = 8;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMMsgData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMMsgData*>(
      &from));
}

void CIMMsgData::MergeFrom(const CIMMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_nick_name().size() > 0) {
    _internal_set_from_nick_name(from._internal_from_nick_name());
  }
  if (from.client_msg_id().size() > 0) {
    _internal_set_client_msg_id(from._internal_client_msg_id());
  }
  if (from.msg_data().size() > 0) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.to_session_id() != 0) {
    _internal_set_to_session_id(from._internal_to_session_id());
  }
  if (from.server_msg_id() != 0) {
    _internal_set_server_msg_id(from._internal_server_msg_id());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMMsgData::CopyFrom(const CIMMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMMsgData::IsInitialized() const {
  return true;
}

void CIMMsgData::InternalSwap(CIMMsgData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  from_nick_name_.Swap(&other->from_nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_msg_id_.Swap(&other->client_msg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMMsgData, session_type_)
      + sizeof(CIMMsgData::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMMsgData, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

std::string CIMMsgData::GetTypeName() const {
  return "CIM.Message.CIMMsgData";
}


// ===================================================================

void CIMMsgDataAck::InitAsDefaultInstance() {
}
class CIMMsgDataAck::_Internal {
 public:
};

CIMMsgDataAck::CIMMsgDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMMsgDataAck)
}
CIMMsgDataAck::CIMMsgDataAck(const CIMMsgDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_msg_id().empty()) {
    client_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_msg_id(),
      GetArena());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMMsgDataAck)
}

void CIMMsgDataAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMMsgDataAck_CIM_2eMessage_2eproto.base);
  client_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(create_time_));
}

CIMMsgDataAck::~CIMMsgDataAck() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMMsgDataAck)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMMsgDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMMsgDataAck::ArenaDtor(void* object) {
  CIMMsgDataAck* _this = reinterpret_cast< CIMMsgDataAck* >(object);
  (void)_this;
}
void CIMMsgDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMMsgDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMMsgDataAck& CIMMsgDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMMsgDataAck_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMMsgDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMMsgDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(create_time_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMMsgDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          server_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMResCode res_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res_code(static_cast<::CIM::Def::CIMResCode>(val));
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMMsgDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMMsgDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint64 to_session_id = 2;
  if (this->to_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to_session_id(), target);
  }

  // string client_msg_id = 3;
  if (this->client_msg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_msg_id().data(), static_cast<int>(this->_internal_client_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Message.CIMMsgDataAck.client_msg_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_msg_id(), target);
  }

  // uint64 server_msg_id = 4;
  if (this->server_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_server_msg_id(), target);
  }

  // .CIM.Def.CIMResCode res_code = 5;
  if (this->res_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_res_code(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 6;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_session_type(), target);
  }

  // int32 create_time = 7;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_create_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMMsgDataAck)
  return target;
}

size_t CIMMsgDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMMsgDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_msg_id = 3;
  if (this->client_msg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_msg_id());
  }

  // uint64 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_user_id());
  }

  // uint64 to_session_id = 2;
  if (this->to_session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to_session_id());
  }

  // uint64 server_msg_id = 4;
  if (this->server_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_msg_id());
  }

  // .CIM.Def.CIMResCode res_code = 5;
  if (this->res_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res_code());
  }

  // .CIM.Def.CIMSessionType session_type = 6;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // int32 create_time = 7;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_create_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMMsgDataAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMMsgDataAck*>(
      &from));
}

void CIMMsgDataAck::MergeFrom(const CIMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMMsgDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_msg_id().size() > 0) {
    _internal_set_client_msg_id(from._internal_client_msg_id());
  }
  if (from.from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.to_session_id() != 0) {
    _internal_set_to_session_id(from._internal_to_session_id());
  }
  if (from.server_msg_id() != 0) {
    _internal_set_server_msg_id(from._internal_server_msg_id());
  }
  if (from.res_code() != 0) {
    _internal_set_res_code(from._internal_res_code());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
}

void CIMMsgDataAck::CopyFrom(const CIMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMMsgDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMMsgDataAck::IsInitialized() const {
  return true;
}

void CIMMsgDataAck::InternalSwap(CIMMsgDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  client_msg_id_.Swap(&other->client_msg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMMsgDataAck, create_time_)
      + sizeof(CIMMsgDataAck::create_time_)
      - PROTOBUF_FIELD_OFFSET(CIMMsgDataAck, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

std::string CIMMsgDataAck::GetTypeName() const {
  return "CIM.Message.CIMMsgDataAck";
}


// ===================================================================

void CIMMsgDataReadAck::InitAsDefaultInstance() {
}
class CIMMsgDataReadAck::_Internal {
 public:
};

CIMMsgDataReadAck::CIMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMMsgDataReadAck)
}
CIMMsgDataReadAck::CIMMsgDataReadAck(const CIMMsgDataReadAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMMsgDataReadAck)
}

void CIMMsgDataReadAck::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMMsgDataReadAck::~CIMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMMsgDataReadAck)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMMsgDataReadAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMMsgDataReadAck::ArenaDtor(void* object) {
  CIMMsgDataReadAck* _this = reinterpret_cast< CIMMsgDataReadAck* >(object);
  (void)_this;
}
void CIMMsgDataReadAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMMsgDataReadAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMMsgDataReadAck& CIMMsgDataReadAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMMsgDataReadAck_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMMsgDataReadAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMMsgDataReadAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMMsgDataReadAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMMsgDataReadAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMMsgDataReadAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session_id(), target);
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 4;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMMsgDataReadAck)
  return target;
}

size_t CIMMsgDataReadAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMMsgDataReadAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_id());
  }

  // .CIM.Def.CIMSessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMMsgDataReadAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMMsgDataReadAck*>(
      &from));
}

void CIMMsgDataReadAck::MergeFrom(const CIMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMMsgDataReadAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMMsgDataReadAck::CopyFrom(const CIMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMMsgDataReadAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMMsgDataReadAck::IsInitialized() const {
  return true;
}

void CIMMsgDataReadAck::InternalSwap(CIMMsgDataReadAck* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMMsgDataReadAck, session_type_)
      + sizeof(CIMMsgDataReadAck::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMMsgDataReadAck, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMMsgDataReadAck::GetTypeName() const {
  return "CIM.Message.CIMMsgDataReadAck";
}


// ===================================================================

void CIMMsgDataReadNotify::InitAsDefaultInstance() {
}
class CIMMsgDataReadNotify::_Internal {
 public:
};

CIMMsgDataReadNotify::CIMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMMsgDataReadNotify)
}
CIMMsgDataReadNotify::CIMMsgDataReadNotify(const CIMMsgDataReadNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMMsgDataReadNotify)
}

void CIMMsgDataReadNotify::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMMsgDataReadNotify::~CIMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMMsgDataReadNotify)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMMsgDataReadNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMMsgDataReadNotify::ArenaDtor(void* object) {
  CIMMsgDataReadNotify* _this = reinterpret_cast< CIMMsgDataReadNotify* >(object);
  (void)_this;
}
void CIMMsgDataReadNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMMsgDataReadNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMMsgDataReadNotify& CIMMsgDataReadNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMMsgDataReadNotify_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMMsgDataReadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMMsgDataReadNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMMsgDataReadNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMMsgDataReadNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMMsgDataReadNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session_id(), target);
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 4;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMMsgDataReadNotify)
  return target;
}

size_t CIMMsgDataReadNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMMsgDataReadNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_id());
  }

  // .CIM.Def.CIMSessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMMsgDataReadNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMMsgDataReadNotify*>(
      &from));
}

void CIMMsgDataReadNotify::MergeFrom(const CIMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMMsgDataReadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMMsgDataReadNotify::CopyFrom(const CIMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMMsgDataReadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMMsgDataReadNotify::IsInitialized() const {
  return true;
}

void CIMMsgDataReadNotify::InternalSwap(CIMMsgDataReadNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMMsgDataReadNotify, session_type_)
      + sizeof(CIMMsgDataReadNotify::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMMsgDataReadNotify, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMMsgDataReadNotify::GetTypeName() const {
  return "CIM.Message.CIMMsgDataReadNotify";
}


// ===================================================================

void CIMGetLatestMsgIdReq::InitAsDefaultInstance() {
}
class CIMGetLatestMsgIdReq::_Internal {
 public:
};

CIMGetLatestMsgIdReq::CIMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMGetLatestMsgIdReq)
}
CIMGetLatestMsgIdReq::CIMGetLatestMsgIdReq(const CIMGetLatestMsgIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMGetLatestMsgIdReq)
}

void CIMGetLatestMsgIdReq::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMGetLatestMsgIdReq::~CIMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMGetLatestMsgIdReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetLatestMsgIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMGetLatestMsgIdReq::ArenaDtor(void* object) {
  CIMGetLatestMsgIdReq* _this = reinterpret_cast< CIMGetLatestMsgIdReq* >(object);
  (void)_this;
}
void CIMGetLatestMsgIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetLatestMsgIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetLatestMsgIdReq& CIMGetLatestMsgIdReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetLatestMsgIdReq_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMGetLatestMsgIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMGetLatestMsgIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetLatestMsgIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetLatestMsgIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMGetLatestMsgIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMGetLatestMsgIdReq)
  return target;
}

size_t CIMGetLatestMsgIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMGetLatestMsgIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetLatestMsgIdReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetLatestMsgIdReq*>(
      &from));
}

void CIMGetLatestMsgIdReq::MergeFrom(const CIMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMGetLatestMsgIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMGetLatestMsgIdReq::CopyFrom(const CIMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMGetLatestMsgIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetLatestMsgIdReq::IsInitialized() const {
  return true;
}

void CIMGetLatestMsgIdReq::InternalSwap(CIMGetLatestMsgIdReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetLatestMsgIdReq, session_type_)
      + sizeof(CIMGetLatestMsgIdReq::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMGetLatestMsgIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetLatestMsgIdReq::GetTypeName() const {
  return "CIM.Message.CIMGetLatestMsgIdReq";
}


// ===================================================================

void CIMGetLatestMsgIdRsp::InitAsDefaultInstance() {
}
class CIMGetLatestMsgIdRsp::_Internal {
 public:
};

CIMGetLatestMsgIdRsp::CIMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMGetLatestMsgIdRsp)
}
CIMGetLatestMsgIdRsp::CIMGetLatestMsgIdRsp(const CIMGetLatestMsgIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  latest_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_msg_id().empty()) {
    latest_msg_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latest_msg_id(),
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMGetLatestMsgIdRsp)
}

void CIMGetLatestMsgIdRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMGetLatestMsgIdRsp_CIM_2eMessage_2eproto.base);
  latest_msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMGetLatestMsgIdRsp::~CIMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMGetLatestMsgIdRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetLatestMsgIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  latest_msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGetLatestMsgIdRsp::ArenaDtor(void* object) {
  CIMGetLatestMsgIdRsp* _this = reinterpret_cast< CIMGetLatestMsgIdRsp* >(object);
  (void)_this;
}
void CIMGetLatestMsgIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetLatestMsgIdRsp& CIMGetLatestMsgIdRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetLatestMsgIdRsp_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMGetLatestMsgIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMGetLatestMsgIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latest_msg_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetLatestMsgIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latest_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_latest_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetLatestMsgIdRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMGetLatestMsgIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  // string latest_msg_id = 4;
  if (this->latest_msg_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_msg_id().data(), static_cast<int>(this->_internal_latest_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Message.CIMGetLatestMsgIdRsp.latest_msg_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_latest_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMGetLatestMsgIdRsp)
  return target;
}

size_t CIMGetLatestMsgIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMGetLatestMsgIdRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string latest_msg_id = 4;
  if (this->latest_msg_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_msg_id());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetLatestMsgIdRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetLatestMsgIdRsp*>(
      &from));
}

void CIMGetLatestMsgIdRsp::MergeFrom(const CIMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMGetLatestMsgIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_msg_id().size() > 0) {
    _internal_set_latest_msg_id(from._internal_latest_msg_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMGetLatestMsgIdRsp::CopyFrom(const CIMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMGetLatestMsgIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetLatestMsgIdRsp::IsInitialized() const {
  return true;
}

void CIMGetLatestMsgIdRsp::InternalSwap(CIMGetLatestMsgIdRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  latest_msg_id_.Swap(&other->latest_msg_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetLatestMsgIdRsp, session_type_)
      + sizeof(CIMGetLatestMsgIdRsp::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMGetLatestMsgIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetLatestMsgIdRsp::GetTypeName() const {
  return "CIM.Message.CIMGetLatestMsgIdRsp";
}


// ===================================================================

void CIMGetMsgByIdReq::InitAsDefaultInstance() {
}
class CIMGetMsgByIdReq::_Internal {
 public:
};

CIMGetMsgByIdReq::CIMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  msg_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMGetMsgByIdReq)
}
CIMGetMsgByIdReq::CIMGetMsgByIdReq(const CIMGetMsgByIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_id_list_(from.msg_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMGetMsgByIdReq)
}

void CIMGetMsgByIdReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMGetMsgByIdReq_CIM_2eMessage_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMGetMsgByIdReq::~CIMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMGetMsgByIdReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetMsgByIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMGetMsgByIdReq::ArenaDtor(void* object) {
  CIMGetMsgByIdReq* _this = reinterpret_cast< CIMGetMsgByIdReq* >(object);
  (void)_this;
}
void CIMGetMsgByIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetMsgByIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetMsgByIdReq& CIMGetMsgByIdReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetMsgByIdReq_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMGetMsgByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMGetMsgByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetMsgByIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string msg_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msg_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetMsgByIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMGetMsgByIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  // repeated string msg_id_list = 4;
  for (int i = 0, n = this->_internal_msg_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_msg_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Message.CIMGetMsgByIdReq.msg_id_list");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMGetMsgByIdReq)
  return target;
}

size_t CIMGetMsgByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMGetMsgByIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msg_id_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msg_id_list_.size());
  for (int i = 0, n = msg_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      msg_id_list_.Get(i));
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetMsgByIdReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetMsgByIdReq*>(
      &from));
}

void CIMGetMsgByIdReq::MergeFrom(const CIMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMGetMsgByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMGetMsgByIdReq::CopyFrom(const CIMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMGetMsgByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetMsgByIdReq::IsInitialized() const {
  return true;
}

void CIMGetMsgByIdReq::InternalSwap(CIMGetMsgByIdReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_id_list_.InternalSwap(&other->msg_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetMsgByIdReq, session_type_)
      + sizeof(CIMGetMsgByIdReq::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMGetMsgByIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetMsgByIdReq::GetTypeName() const {
  return "CIM.Message.CIMGetMsgByIdReq";
}


// ===================================================================

void CIMGetMsgByIdRsp::InitAsDefaultInstance() {
}
class CIMGetMsgByIdRsp::_Internal {
 public:
};

void CIMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
CIMGetMsgByIdRsp::CIMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  msg_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIM.Message.CIMGetMsgByIdRsp)
}
CIMGetMsgByIdRsp::CIMGetMsgByIdRsp(const CIMGetMsgByIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Message.CIMGetMsgByIdRsp)
}

void CIMGetMsgByIdRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CIMGetMsgByIdRsp_CIM_2eMessage_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

CIMGetMsgByIdRsp::~CIMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:CIM.Message.CIMGetMsgByIdRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CIMGetMsgByIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIMGetMsgByIdRsp::ArenaDtor(void* object) {
  CIMGetMsgByIdRsp* _this = reinterpret_cast< CIMGetMsgByIdRsp* >(object);
  (void)_this;
}
void CIMGetMsgByIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGetMsgByIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIMGetMsgByIdRsp& CIMGetMsgByIdRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIMGetMsgByIdRsp_CIM_2eMessage_2eproto.base);
  return *internal_default_instance();
}


void CIMGetMsgByIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Message.CIMGetMsgByIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGetMsgByIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CIM.Def.CIMSessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::CIM::Def::CIMSessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CIM.Def.CIMMsgInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIMGetMsgByIdRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Message.CIMGetMsgByIdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  // repeated .CIM.Def.CIMMsgInfo msg_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msg_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Message.CIMGetMsgByIdRsp)
  return target;
}

size_t CIMGetMsgByIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Message.CIMGetMsgByIdRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Def.CIMMsgInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // .CIM.Def.CIMSessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGetMsgByIdRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGetMsgByIdRsp*>(
      &from));
}

void CIMGetMsgByIdRsp::MergeFrom(const CIMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Message.CIMGetMsgByIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
}

void CIMGetMsgByIdRsp::CopyFrom(const CIMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Message.CIMGetMsgByIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGetMsgByIdRsp::IsInitialized() const {
  return true;
}

void CIMGetMsgByIdRsp::InternalSwap(CIMGetMsgByIdRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGetMsgByIdRsp, session_type_)
      + sizeof(CIMGetMsgByIdRsp::session_type_)
      - PROTOBUF_FIELD_OFFSET(CIMGetMsgByIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGetMsgByIdRsp::GetTypeName() const {
  return "CIM.Message.CIMGetMsgByIdRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMMsgData* Arena::CreateMaybeMessage< ::CIM::Message::CIMMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMMsgDataAck* Arena::CreateMaybeMessage< ::CIM::Message::CIMMsgDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMMsgDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMMsgDataReadAck* Arena::CreateMaybeMessage< ::CIM::Message::CIMMsgDataReadAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMMsgDataReadAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMMsgDataReadNotify* Arena::CreateMaybeMessage< ::CIM::Message::CIMMsgDataReadNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMMsgDataReadNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMGetLatestMsgIdReq* Arena::CreateMaybeMessage< ::CIM::Message::CIMGetLatestMsgIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMGetLatestMsgIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMGetLatestMsgIdRsp* Arena::CreateMaybeMessage< ::CIM::Message::CIMGetLatestMsgIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMGetLatestMsgIdRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMGetMsgByIdReq* Arena::CreateMaybeMessage< ::CIM::Message::CIMGetMsgByIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMGetMsgByIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Message::CIMGetMsgByIdRsp* Arena::CreateMaybeMessage< ::CIM::Message::CIMGetMsgByIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Message::CIMGetMsgByIdRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
